exports[`test renders correctly 1`] = `
<View>
  <View
    style={Object {}}
    virtual={undefined} />
</View>
`;

exports[`test renders header with a null button 1`] = `
<View>
  <View
    style={Object {}}
    virtual={undefined}>
    <Text
      accessible={true}
      allowFontScaling={true}
      disabled={false}
      ellipsizeMode="tail"
      numberOfLines={1}
      style={Object {}}
      virtual={undefined}>
      Header
    </Text>
  </View>
</View>
`;

exports[`test renders header with buttons 1`] = `
<View>
  <View
    style={Object {}}
    virtual={undefined}>
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      collapsable={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "borderRadius": 2,
          "opacity": 1,
        }
      }
      testID={undefined}
      tvParallaxProperties={undefined}>
      <Text
        accessible={true}
        allowFontScaling={false}
        disabled={false}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "color": undefined,
              "fontSize": 12,
            },
            Array [
              Object {},
              Object {},
            ],
            Object {
              "fontFamily": "Ionicons",
              "fontStyle": "normal",
              "fontWeight": "normal",
            },
          ]
        }
        virtual={undefined}>
        
      </Text>
    </View>
    <Text
      accessible={true}
      allowFontScaling={true}
      disabled={false}
      ellipsizeMode="tail"
      numberOfLines={1}
      style={Object {}}
      virtual={undefined}>
      Header
    </Text>
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      collapsable={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "borderRadius": 2,
          "opacity": 1,
        }
      }
      testID={undefined}
      tvParallaxProperties={undefined}>
      <Text
        accessible={true}
        allowFontScaling={false}
        disabled={false}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "color": undefined,
              "fontSize": 12,
            },
            Array [
              Object {},
              Object {},
            ],
            Object {
              "fontFamily": "Ionicons",
              "fontStyle": "normal",
              "fontWeight": "normal",
            },
          ]
        }
        virtual={undefined}>
        
      </Text>
    </View>
  </View>
</View>
`;

exports[`test renders header with buttons and subtitle 1`] = `
<View>
  <View
    style={Object {}}
    virtual={undefined}>
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      collapsable={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "borderRadius": 2,
          "opacity": 1,
        }
      }
      testID={undefined}
      tvParallaxProperties={undefined}>
      <Text
        accessible={true}
        allowFontScaling={false}
        disabled={false}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "color": undefined,
              "fontSize": 12,
            },
            Array [
              Object {},
              Object {},
            ],
            Object {
              "fontFamily": "Ionicons",
              "fontStyle": "normal",
              "fontWeight": "normal",
            },
          ]
        }
        virtual={undefined}>
        
      </Text>
    </View>
    <Text
      accessible={true}
      allowFontScaling={true}
      disabled={false}
      ellipsizeMode="tail"
      numberOfLines={1}
      style={Object {}}
      virtual={undefined}>
      Header
    </Text>
    <Text
      accessible={true}
      allowFontScaling={true}
      disabled={false}
      ellipsizeMode="tail"
      style={Object {}}
      virtual={undefined}>
      Subtitle
    </Text>
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      collapsable={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "borderRadius": 2,
          "opacity": 1,
        }
      }
      testID={undefined}
      tvParallaxProperties={undefined}>
      <Text
        accessible={true}
        allowFontScaling={false}
        disabled={false}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "color": undefined,
              "fontSize": 12,
            },
            Array [
              Object {},
              Object {},
            ],
            Object {
              "fontFamily": "Ionicons",
              "fontStyle": "normal",
              "fontWeight": "normal",
            },
          ]
        }
        virtual={undefined}>
        
      </Text>
    </View>
  </View>
</View>
`;

exports[`test renders header with just one button 1`] = `
<View>
  <View
    style={Object {}}
    virtual={undefined}>
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      collapsable={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "borderRadius": 2,
          "opacity": 1,
        }
      }
      testID={undefined}
      tvParallaxProperties={undefined}>
      <Text
        accessible={true}
        allowFontScaling={false}
        disabled={false}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "color": undefined,
              "fontSize": 12,
            },
            Array [
              Object {},
              Object {},
            ],
            Object {
              "fontFamily": "Ionicons",
              "fontStyle": "normal",
              "fontWeight": "normal",
            },
          ]
        }
        virtual={undefined}>
        
      </Text>
    </View>
    <Text
      accessible={true}
      allowFontScaling={true}
      disabled={false}
      ellipsizeMode="tail"
      numberOfLines={1}
      style={Object {}}
      virtual={undefined}>
      Header
    </Text>
  </View>
</View>
`;

exports[`test renders header with just one button and iconRight 1`] = `
<View>
  <View
    iconRight={true}
    style={Object {}}
    virtual={undefined}>
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      collapsable={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "borderRadius": 2,
          "opacity": 1,
        }
      }
      testID={undefined}
      tvParallaxProperties={undefined}>
      <Text
        accessible={true}
        allowFontScaling={false}
        disabled={false}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "color": undefined,
              "fontSize": 12,
            },
            Array [
              Object {},
              Object {},
            ],
            Object {
              "fontFamily": "Ionicons",
              "fontStyle": "normal",
              "fontWeight": "normal",
            },
          ]
        }
        virtual={undefined}>
        
      </Text>
    </View>
    <Text
      accessible={true}
      allowFontScaling={true}
      disabled={false}
      ellipsizeMode="tail"
      numberOfLines={1}
      style={Object {}}
      virtual={undefined}>
      Header
    </Text>
  </View>
</View>
`;

exports[`test renders header with just one button and subtitle 1`] = `
<View>
  <View
    style={Object {}}
    virtual={undefined}>
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      collapsable={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "borderRadius": 2,
          "opacity": 1,
        }
      }
      testID={undefined}
      tvParallaxProperties={undefined}>
      <Text
        accessible={true}
        allowFontScaling={false}
        disabled={false}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "color": undefined,
              "fontSize": 12,
            },
            Array [
              Object {},
              Object {},
            ],
            Object {
              "fontFamily": "Ionicons",
              "fontStyle": "normal",
              "fontWeight": "normal",
            },
          ]
        }
        virtual={undefined}>
        
      </Text>
    </View>
    <Text
      accessible={true}
      allowFontScaling={true}
      disabled={false}
      ellipsizeMode="tail"
      numberOfLines={1}
      style={Object {}}
      virtual={undefined}>
      Header
    </Text>
    <Text
      accessible={true}
      allowFontScaling={true}
      disabled={false}
      ellipsizeMode="tail"
      style={Object {}}
      virtual={undefined}>
      Subtitle
    </Text>
  </View>
</View>
`;

exports[`test renders header with just one button, iconRight and a subtitle 1`] = `
<View>
  <View
    iconRight={true}
    style={Object {}}
    virtual={undefined}>
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      collapsable={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "borderRadius": 2,
          "opacity": 1,
        }
      }
      testID={undefined}
      tvParallaxProperties={undefined}>
      <Text
        accessible={true}
        allowFontScaling={false}
        disabled={false}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "color": undefined,
              "fontSize": 12,
            },
            Array [
              Object {},
              Object {},
            ],
            Object {
              "fontFamily": "Ionicons",
              "fontStyle": "normal",
              "fontWeight": "normal",
            },
          ]
        }
        virtual={undefined}>
        
      </Text>
    </View>
    <Text
      accessible={true}
      allowFontScaling={true}
      disabled={false}
      ellipsizeMode="tail"
      numberOfLines={1}
      style={Object {}}
      virtual={undefined}>
      Header
    </Text>
    <Text
      accessible={true}
      allowFontScaling={true}
      disabled={false}
      ellipsizeMode="tail"
      style={Object {}}
      virtual={undefined}>
      SubTitle
    </Text>
  </View>
</View>
`;
