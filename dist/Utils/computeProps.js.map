{"version":3,"sources":["../../Utils/computeProps.js"],"names":["module","exports","incomingProps","defaultProps","computedProps","clone","children","incomingPropsStyle","style","assign","computedPropsStyle","Array","isArray","forEach","merge","getByID"],"mappings":"AAAA;AACA,8B;AACA,qH;;;AAGAA,OAAOC,OAAP,CAAiB,SAASC,aAAT,CAAwBC,YAAxB,CAAsC;;AAEnD,GAAIC,eAAgB,EAApB;;AAEAF,cAAgB,iBAAEG,KAAF,CAAQH,aAAR,CAAhB;AACA,MAAOA,eAAcI,QAArB;;AAEA,GAAIC,oBAAqBL,cAAcM,KAAvC;AACA,MAAON,eAAcM,KAArB;;;AAGA,GAAGN,aAAH,CAAkB;AAChB,iBAAEO,MAAF,CAASL,aAAT,CAAwBD,YAAxB,CAAsCD,aAAtC;AACD,CAFD;AAGIE,cAAgBD,YAAhB;;AAEJ,GAAGI,kBAAH,CAAuB;;AAEnB,GAAIG,oBAAqB,EAAzB;AACAN,cAAcI,KAAd,CAAsB,EAAtB;AACA,GAAIG,MAAMC,OAAN,CAAcL,kBAAd,CAAJ,CAAuC;AACnC,iBAAEM,OAAF,CAAUN,kBAAV,CAA8B,SAACC,KAAD,CAAS;AACnC,GAAG,MAAOA,MAAP,EAAgB,QAAnB,CAA6B;AACzB,iBAAEM,KAAF,CAAQJ,kBAAR,CAA4B,kCAAwBK,OAAxB,CAAgCP,KAAhC,CAA5B;AACH,CAFD,IAEO;AACH,iBAAEM,KAAF,CAAQJ,kBAAR,CAA4BF,KAA5B;AACH;AACJ,CAND;;AAQH,CATD;AAUK;AACD,GAAG,MAAOD,mBAAP,EAA6B,QAAhC,CAA0C;AACtCG,mBAAqB,kCAAwBK,OAAxB,CAAgCR,kBAAhC,CAArB;AACH,CAFD,IAEO;AACHG,mBAAqBH,kBAArB;AACH;AACJ;;AAED,iBAAEO,KAAF,CAAQV,cAAcI,KAAtB,CAA6BL,aAAaK,KAA1C,CAAiDE,kBAAjD;;;AAGH;;AAED,MAAON,cAAP;AACH,CA5CD","file":"computeProps.js","sourcesContent":["'use_strict';\nimport _ from 'lodash';\nimport ReactNativePropRegistry from 'react-native/Libraries/Renderer/src/renderers/native/ReactNativePropRegistry';\n// For compatibility with RN 0.25\n// import ReactNativePropRegistry from \"react-native/Libraries/ReactNative/ReactNativePropRegistry\";\nmodule.exports = function(incomingProps, defaultProps) {\n    // External props has a higher precedence\n    var computedProps = {};\n\n    incomingProps = _.clone(incomingProps);\n    delete incomingProps.children;\n\n    var incomingPropsStyle = incomingProps.style;\n    delete incomingProps.style;\n\n    // console.log(defaultProps, incomingProps);\n    if(incomingProps) {\n      _.assign(computedProps, defaultProps, incomingProps);\n    } else\n        computedProps = defaultProps;\n    // Pass the merged Style Object instead\n    if(incomingPropsStyle) {\n\n        var computedPropsStyle = {};\n        computedProps.style = {};\n        if (Array.isArray(incomingPropsStyle)) {\n            _.forEach(incomingPropsStyle, (style)=>{\n                if(typeof style == 'number') {\n                    _.merge(computedPropsStyle, ReactNativePropRegistry.getByID(style));\n                } else {\n                    _.merge(computedPropsStyle, style);\n                }\n            })\n\n        }\n        else {\n            if(typeof incomingPropsStyle == 'number') {\n                computedPropsStyle = ReactNativePropRegistry.getByID(incomingPropsStyle);\n            } else {\n                computedPropsStyle = incomingPropsStyle;\n            }\n        }\n\n        _.merge(computedProps.style, defaultProps.style, computedPropsStyle);\n\n\n    }\n    // console.log(\"computedProps \", computedProps);\n    return computedProps;\n}\n"]}