{"version":3,"sources":["../../../../Components/vendor/react-native-scrollable-tab-view/DefaultTabBar.js"],"names":["deviceWidth","get","width","DefaultTabBar","tab","flex","alignItems","justifyContent","backgroundColor","getTheme","tabBgColor","tabs","height","flexDirection","borderWidth","borderTopWidth","borderLeftWidth","borderRightWidth","borderBottomColor","name","page","isTabActive","props","activeTab","darkenHeader","getInitialStyle","goToPage","color","tabTextColor","fontWeight","fontSize","tabFontSize","numberOfTabs","length","tabUnderlineStyle","position","bottom","left","scrollValue","interpolate","inputRange","outputRange","map","i","renderTabOption","propTypes","PropTypes","func","number","array"],"mappings":"AAAA,a;;AAEA,4B;AACA,oE;AACA,wC;;AAEA,yC;;;;;;;;AAQA,GAAIA,aAAc,wBAAWC,GAAX,CAAe,QAAf,EAAyBC,KAA3C,C;;AAEqBC,a;AACC;AACd,MAAO;AACHC,IAAK;AACDC,KAAM,CADL;AAEDC,WAAY,QAFX;AAGDC,eAAgB,QAHf;AAIDC,gBAAiB,KAAKC,QAAL,GAAgBC,UAJhC,CADF;;AAOHC,KAAM;AACFC,OAAQ,EADN;AAEFC,cAAe,KAFb;AAGFN,eAAgB,cAHd;AAIFO,YAAa,CAJX;AAKFC,eAAgB,CALd;AAMFC,gBAAiB,CANf;AAOFC,iBAAkB,CAPhB;AAQFC,kBAAmB,MARjB,CAPH,CAAP;;;AAkBH,C;;;;;;;AAOaC,I,CAAMC,I,CAAM;AAC1B,GAAIC,aAAc,KAAKC,KAAL,CAAWC,SAAX,GAAyBH,IAA3C;;AAEA;AACE,+DAAoB,cAAe,KAAKX,QAAL,GAAgBe,YAAnD,CAAiE,MAAO,CAAC,KAAKC,eAAL,GAAuBrB,GAAxB,CAAxE,CAAsG,IAAKe,IAA3G,CAAiH,QAAS,yBAAM,QAAKG,KAAL,CAAWI,QAAX,CAAoBN,IAApB,CAAN,EAA1H;AACE;AACE,8CAAM,MAAO,CAACO,MAAON,YAAc,KAAKZ,QAAL,GAAgBmB,YAA9B,CAA6C,KAAKnB,QAAL,GAAgBmB,YAArE,CAAmFC,WAAYR,YAAc,MAAd,CAAuB,QAAtH,CAAgIS,SAAU,KAAKrB,QAAL,GAAgBsB,WAA1J,CAAb,EAAsLZ,IAAtL,CADF,CADF,CADF;;;;AAOD,C;;AAEQ;AACP,GAAIa,cAAe,KAAKV,KAAL,CAAWX,IAAX,CAAgBsB,MAAnC;AACA,GAAIC,mBAAoB;AACtBC,SAAU,UADY;AAEtBjC,MAAOF,YAAcgC,YAFC;AAGtBpB,OAAQ,CAHc;AAItBJ,gBAAiB,KAAKC,QAAL,GAAgBmB,YAJX;AAKtBQ,OAAQ,CALc,CAAxB;;;AAQA,GAAIC,MAAO,KAAKf,KAAL,CAAWgB,WAAX,CAAuBC,WAAvB,CAAmC;AAC5CC,WAAY,CAAC,CAAD,CAAI,CAAJ,CADgC,CACxBC,YAAa,CAAC,CAAD,CAAIzC,YAAcgC,YAAlB,CADW,CAAnC,CAAX;;;AAIA;AACE,iDAAM,MAAO,KAAKP,eAAL,GAAuBd,IAApC;AACG,KAAKW,KAAL,CAAWX,IAAX,CAAgB+B,GAAhB,CAAoB,SAACtC,GAAD,CAAMuC,CAAN,QAAY,QAAKC,eAAL,CAAqBxC,GAArB,CAA0BuC,CAA1B,CAAZ,EAApB,CADH;AAEE,oDAAU,IAAV,EAAe,MAAO,CAACT,iBAAD,CAAoB,CAACG,SAAD,CAApB,CAAtB,EAFF,CADF;;;AAMD,C,0DA3DkBlC,a,CAqBV0C,S,CAAY,CACfnB,SAAU,gBAAMoB,SAAN,CAAgBC,IADX,CAEfxB,UAAW,gBAAMuB,SAAN,CAAgBE,MAFZ,CAGfrC,KAAM,gBAAMmC,SAAN,CAAgBG,KAHP,C,iBArBF9C,a","file":"DefaultTabBar.js","sourcesContent":["'use strict';\n\nimport React from 'react';\nimport NativeBaseComponent from '../../Base/NativeBaseComponent';\nimport Text from '../../Widgets/Text';\n\nimport {\n  Dimensions,\n  StyleSheet,\n  TouchableHighlight,\n  View,\n  Animated,\n} from 'react-native';\n\nvar deviceWidth = Dimensions.get('window').width;\n\nexport default class DefaultTabBar extends NativeBaseComponent {\n    getInitialStyle() {\n        return {\n            tab: {\n                flex: 1,\n                alignItems: 'center',\n                justifyContent: 'center',\n                backgroundColor: this.getTheme().tabBgColor\n            },\n            tabs: {\n                height: 45,\n                flexDirection: 'row',\n                justifyContent: 'space-around',\n                borderWidth: 1,\n                borderTopWidth: 0,\n                borderLeftWidth: 0,\n                borderRightWidth: 0,\n                borderBottomColor: '#ccc',\n            }\n        }\n    }\n    static propTypes = {\n        goToPage: React.PropTypes.func,\n        activeTab: React.PropTypes.number,\n        tabs: React.PropTypes.array\n    }\n\n  renderTabOption(name, page) {\n    var isTabActive = this.props.activeTab === page;\n\n    return (\n      <TouchableHighlight underlayColor={this.getTheme().darkenHeader} style={[this.getInitialStyle().tab]} key={name} onPress={() => this.props.goToPage(page)}>\n        <View>\n          <Text style={{color: isTabActive ? this.getTheme().tabTextColor : this.getTheme().tabTextColor, fontWeight: isTabActive ? 'bold' : 'normal', fontSize: this.getTheme().tabFontSize}}>{name}</Text>\n        </View>\n      </TouchableHighlight>\n    );\n  }\n\n  render() {\n    var numberOfTabs = this.props.tabs.length;\n    var tabUnderlineStyle = {\n      position: 'absolute',\n      width: deviceWidth / numberOfTabs,\n      height: 4,\n      backgroundColor: this.getTheme().tabTextColor,\n      bottom: 0,\n    };\n\n    var left = this.props.scrollValue.interpolate({\n      inputRange: [0, 1], outputRange: [0, deviceWidth / numberOfTabs]\n    });\n\n    return (\n      <View style={this.getInitialStyle().tabs}>\n        {this.props.tabs.map((tab, i) => this.renderTabOption(tab, i))}\n        <Animated.View style={[tabUnderlineStyle, {left}]} />\n      </View>\n    );\n  }\n}\n"]}