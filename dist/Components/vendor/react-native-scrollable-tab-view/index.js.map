{"version":3,"sources":["../../../../Components/vendor/react-native-scrollable-tab-view/index.js"],"names":["deviceWidth","get","width","ScrollableTabView","props","currentPage","initialPage","state","scrollValue","Value","release","e","gestureState","relativeGestureDistance","dx","lastPageIndex","children","length","vx","newPage","hasTouch","goToPage","Math","max","min","_panResponder","create","onMoveShouldSetPanResponder","abs","dy","moveX","edgeHitWidth","locked","onPanResponderRelease","onPanResponderTerminate","onPanResponderMove","offsetX","setValue","pageNumber","onChangeTab","i","ref","setState","spring","toValue","friction","springFriction","tension","springTension","start","renderTabBar","cloneElement","sceneContainerStyle","flex","flexDirection","translateX","interpolate","inputRange","outputRange","tabBarProps","bind","tabs","map","child","tabLabel","activeTab","tabBarPosition","transform","panHandlers","defaultProps"],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\n\nimport React from 'react';\nimport NativeBaseComponent from '../../Base/NativeBaseComponent';\nimport {\n  Dimensions,\n  Text,\n  View,\n  TouchableOpacity,\n  PanResponder,\n  Animated,\n} from 'react-native';\n\nimport DefaultTabBar from './DefaultTabBar';\nvar deviceWidth = Dimensions.get('window').width;\n\nexport default class ScrollableTabView extends NativeBaseComponent {\n  static defaultProps = {\n    ...NativeBaseComponent.defaultProps,\n    tabBarPosition: 'top',\n    edgeHitWidth: 30,\n    springTension: 50,\n    springFriction: 10\n  };\n  constructor(props) {\n    super(props);\n    var currentPage = this.props.initialPage || 0;\n    this.state = {\n      currentPage: currentPage,\n      scrollValue: new Animated.Value(currentPage)\n    }\n  }\n\n  componentWillMount() {\n    var release = (e, gestureState) => {\n      var relativeGestureDistance = gestureState.dx / deviceWidth,\n          lastPageIndex = this.props.children.length - 1,\n          vx = gestureState.vx,\n          newPage = this.state.currentPage;\n\n      if (relativeGestureDistance < -0.5 || (relativeGestureDistance < 0 && vx <= -0.5)) {\n        newPage = newPage + 1;\n      } else if (relativeGestureDistance > 0.5 || (relativeGestureDistance > 0 && vx >= 0.5)) {\n        newPage = newPage - 1;\n      }\n\n      this.props.hasTouch && this.props.hasTouch(false);\n      this.goToPage(Math.max(0, Math.min(newPage, this.props.children.length - 1)));\n    }\n\n    this._panResponder = PanResponder.create({\n      // Claim responder if it's a horizontal pan\n      onMoveShouldSetPanResponder: (e, gestureState) => {\n        if (Math.abs(gestureState.dx) > Math.abs(gestureState.dy)) {\n          if ((gestureState.moveX <= this.props.edgeHitWidth ||\n              gestureState.moveX >= deviceWidth - this.props.edgeHitWidth) &&\n                this.props.locked !== true) {\n            this.props.hasTouch && this.props.hasTouch(true);\n            return true;\n          }\n        }\n      },\n\n      // Touch is released, scroll to the one that you're closest to\n      onPanResponderRelease: release,\n      onPanResponderTerminate: release,\n\n      // Dragging, move the view with the touch\n      onPanResponderMove: (e, gestureState) => {\n        var dx = gestureState.dx;\n        var lastPageIndex = this.props.children.length - 1;\n\n        // This is awkward because when we are scrolling we are offsetting the underlying view\n        // to the left (-x)\n        var offsetX = dx - (this.state.currentPage * deviceWidth);\n        this.state.scrollValue.setValue(-1 * offsetX / deviceWidth);\n      },\n    });\n  }\n\n  goToPage(pageNumber) {\n    this.props.onChangeTab && this.props.onChangeTab({\n      i: pageNumber, ref: this.props.children[pageNumber]\n    });\n\n    this.setState({\n      currentPage: pageNumber\n    });\n\n    Animated.spring(this.state.scrollValue, {toValue: pageNumber, friction: this.props.springFriction, tension: this.props.springTension}).start();\n  }\n\n  renderTabBar(props) {\n    if (this.props.renderTabBar === false) {\n      return null;\n    } else if (this.props.renderTabBar) {\n      return React.cloneElement(this.props.renderTabBar(), props);\n    } else {\n      return <DefaultTabBar {...props} />;\n    }\n  }\n\n  render() {\n    var sceneContainerStyle = {\n      width: deviceWidth * this.props.children.length,\n      flex: 1,\n      flexDirection: 'row'\n    };\n\n    var translateX = this.state.scrollValue.interpolate({\n      inputRange: [0, 1], outputRange: [0, -deviceWidth]\n    });\n\n    var tabBarProps = {\n      goToPage: this.goToPage.bind(this),\n      tabs: this.props.children.map((child) => child.props.tabLabel),\n      activeTab: this.state.currentPage,\n      scrollValue: this.state.scrollValue\n    };\n\n    return (\n      <View style={{flex: 1}}>\n        {this.props.tabBarPosition === 'top' ? this.renderTabBar(tabBarProps) : null}\n        <Animated.View style={[sceneContainerStyle, {transform: [{translateX}]}]}\n          {...this._panResponder.panHandlers}>\n          {this.props.children}\n        </Animated.View>\n        {this.props.tabBarPosition === 'bottom' ? this.renderTabBar(tabBarProps) : null}\n      </View>\n    );\n  }\n}\n"]}