{"version":3,"sources":["../../../../Components/Widgets/CardSwiper/index.js"],"names":["SWIPE_THRESHOLD","CardSwiper","props","state","pan","ValueXY","enter","Value","_animateEntrance","spring","toValue","friction","start","_panResponder","create","onMoveShouldSetResponderCapture","onMoveShouldSetPanResponderCapture","onPanResponderGrant","e","gestureState","setOffset","x","_value","y","setValue","onPanResponderMove","event","dx","dy","onPanResponderRelease","vx","vy","flattenOffset","velocity","Math","abs","onSwipeRight","onSwipeLeft","decay","deceleration","_resetState","bind","translateX","translateY","rotate","interpolate","inputRange","outputRange","opacity","scale","animatedCardStyles","transform","_root","c","panHandlers","children"],"mappings":"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","file":"index.js","sourcesContent":["/* @flow */\n'use strict';\n\nimport React from 'react';\nimport clamp from 'clamp';\nimport {Animated, PanResponder} from 'react-native';\nimport NativeBaseComponent from '../../Base/NativeBaseComponent';\nimport View from './../View';\n\n\nvar SWIPE_THRESHOLD = 120;\n\nexport default class CardSwiper extends NativeBaseComponent {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            pan: new Animated.ValueXY(),\n            enter: new Animated.Value(0.5)\n        }\n    }\n\n    componentDidMount() {\n        this._animateEntrance();\n    }\n\n    _animateEntrance() {\n        Animated.spring(\n            this.state.enter,\n            { toValue: 1, friction: 8 }\n        ).start();\n    }\n\n    componentWillMount() {\n        this._panResponder = PanResponder.create({\n            onMoveShouldSetResponderCapture: () => true,\n            onMoveShouldSetPanResponderCapture: () => true,\n\n            onPanResponderGrant: (e, gestureState) => {\n                this.state.pan.setOffset({x: this.state.pan.x._value, y: this.state.pan.y._value});\n                this.state.pan.setValue({x: 0, y: 0});\n            },\n\n            onPanResponderMove: Animated.event([\n                null, {dx: this.state.pan.x, dy: this.state.pan.y},\n            ]),\n\n            onPanResponderRelease: (e, {vx, vy}) => {\n                this.state.pan.flattenOffset();\n                var velocity;\n\n                if (vx >= 0) {\n                    velocity = clamp(vx, 3, 5);\n                } else if (vx < 0) {\n                    velocity = clamp(vx * -1, 3, 5) * -1;\n                }\n\n                if (Math.abs(this.state.pan.x._value) > SWIPE_THRESHOLD) {\n                    if (velocity>0) {\n                        this.props.onSwipeRight();\n                    } else {\n                        this.props.onSwipeLeft();\n                    }\n                    Animated.decay(this.state.pan, {\n                        velocity: {x: velocity, y: vy},\n                        deceleration: 0.98\n                    }).start(this._resetState.bind(this))\n                } else {\n                    Animated.spring(this.state.pan, {\n                        toValue: {x: 0, y: 0},\n                        friction: 4\n                    }).start()\n                }\n            }\n        })\n    }\n\n    _resetState() {\n        this.state.pan.setValue({x: 0, y: 0});\n        this.state.enter.setValue(0);\n        this._animateEntrance();\n    }\n\n    render() {\n\n        let { pan, enter, } = this.state;\n\n        let [translateX, translateY] = [pan.x, pan.y];\n\n        let rotate = pan.x.interpolate({inputRange: [-300, 0, 300], outputRange: ['-30deg', '0deg', '30deg']});\n        let opacity = pan.x.interpolate({inputRange: [-150, 0, 150], outputRange: [0.5, 1, 0.5]})\n        let scale = enter;\n\n        let animatedCardStyles = {transform: [{translateX}, {translateY}, {rotate}, {scale}], opacity};\n\n\n\n        return(\n            <View ref={c => this._root = c}>\n                <Animated.View style={ animatedCardStyles } {...this._panResponder.panHandlers} >\n                {this.props.children}\n                </Animated.View>\n            </View>\n        );\n    }\n\n}\n"]}