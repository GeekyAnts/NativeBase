{"version":3,"sources":["../../../../Components/Widgets/Thumbnail/index.js"],"names":["ThumbnailNB","thumbnail","borderRadius","props","size","width","height","resizeMode","contain","undefined","thumbnailStyle","circular","square","defaultProps","style","merge","getInitialStyle","_root","c","prepareRootProps"],"mappings":";AACA,a;;AAEA,4B;AACA;AACA,oE;AACA,yD;AACA,8B;;AAEqBA,W;;;;;;;;;AASC;AACd,MAAO;AACHC,UAAW;AACPC,aAAc,KAAKC,KAAL,CAAWC,IAAX,CAAkB,KAAKD,KAAL,CAAWC,IAAX,CAAgB,CAAlC,CAAsC,EAD7C;AAEPC,MAAO,KAAKF,KAAL,CAAWC,IAAX,CAAkB,KAAKD,KAAL,CAAWC,IAA7B,CAAoC,EAFpC;AAGPE,OAAQ,KAAKH,KAAL,CAAWC,IAAX,CAAkB,KAAKD,KAAL,CAAWC,IAA7B,CAAoC,EAHrC;AAIPG,WAAY,KAAKJ,KAAL,CAAWK,OAAX,CAAqB,SAArB,CAAiCC,SAJtC,CADR,CAAP;;;AAQH,C;;AAEkB;AACf,GAAIC,gBAAiB,EAArB;AACA,GAAG,KAAKP,KAAL,CAAWQ,QAAd,CAAwB;AACpBD,eAAeL,KAAf,CAAuB,KAAKF,KAAL,CAAWC,IAAlC;AACAM,eAAeJ,MAAf,CAAwB,KAAKH,KAAL,CAAWC,IAAnC;AACAM,eAAeR,YAAf,CAA8B,KAAKC,KAAL,CAAWC,IAAX,CAAgB,CAA9C;AACH,CAJD;AAKK,GAAG,KAAKD,KAAL,CAAWS,MAAd,CAAsB;AACvBF,eAAeL,KAAf,CAAuB,KAAKF,KAAL,CAAWC,IAAlC;AACAM,eAAeJ,MAAf,CAAwB,KAAKH,KAAL,CAAWC,IAAnC;AACAM,eAAeR,YAAf,CAA8B,CAA9B;AACH;;AAED,GAAIW,cAAe;AACfC,MAAO,iBAAEC,KAAF,CAAQ,KAAKC,eAAL,GAAuBf,SAA/B,CAA0CS,cAA1C,CADQ,CAAnB;;;AAIA,MAAO,2BAAa,KAAKP,KAAlB,CAAyBU,YAAzB,CAAP;AACH,C;;AAEQ;AACL;AACI,2DAAO,IAAK,sBAAK,QAAKI,KAAL,CAAaC,CAAlB,EAAZ,EAAqC,KAAKC,gBAAL,EAArC,EADJ;;AAGH,C,wEA5CgBnB,W","file":"index.js","sourcesContent":["/* @flow */\n'use strict';\n\nimport React from 'react';\nimport {Image} from 'react-native';\nimport NativeBaseComponent from '../../Base/NativeBaseComponent';\nimport computeProps from '../../../Utils/computeProps';\nimport _ from 'lodash';\n\nexport default class ThumbnailNB extends NativeBaseComponent {\n\n    propTypes: {\n        style : React.PropTypes.object,\n        size : React.PropTypes.number,\n        circular : React.PropTypes.bool,\n        square : React.PropTypes.bool\n    }\n\n    getInitialStyle() {\n        return {\n            thumbnail: {\n                borderRadius: this.props.size ? this.props.size/2 : 15,\n                width: this.props.size ? this.props.size : 30,\n                height: this.props.size ? this.props.size : 30,\n                resizeMode: this.props.contain ? 'contain' : undefined\n            }\n        }\n    }\n\n    prepareRootProps() {\n        var thumbnailStyle = {};\n        if(this.props.circular) {\n            thumbnailStyle.width = this.props.size;\n            thumbnailStyle.height = this.props.size;\n            thumbnailStyle.borderRadius = this.props.size/2;\n        }\n        else if(this.props.square) {\n            thumbnailStyle.width = this.props.size;\n            thumbnailStyle.height = this.props.size;\n            thumbnailStyle.borderRadius = 0;\n        }\n\n        var defaultProps = {\n            style: _.merge(this.getInitialStyle().thumbnail, thumbnailStyle)\n        };\n\n        return computeProps(this.props, defaultProps);\n    }\n\n    render() {\n        return(\n            <Image ref={c => this._root = c} {...this.prepareRootProps()}/>\n            );\n    }\n}\n"]}