{"version":3,"sources":["../../../../Components/Widgets/Card/index.js"],"names":["CardNB","card","marginVertical","flex","borderWidth","getTheme","borderRadius","borderColor","listBorderColor","flexWrap","borderBottomWidth","backgroundColor","props","transparent","cardDefaultBg","shadowColor","undefined","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","defaultProps","style","getInitialStyle","childrenArray","Children","map","children","child","dataArray","renderRow","ds","DataSource","rowHasChanged","r1","r2","dataSource","cloneWithRows","prepareRootProps","_root","c","renderChildren"],"mappings":";AACA,a;;AAEA,4B;AACA;AACA,oE;AACA,yD;;AAEqBA,M;;;;;;AAMC;AACd,MAAO;AACHC,KAAM;AACFC,eAAgB,CADd;AAEFC,KAAM,CAFJ;AAGFC,YAAa,KAAKC,QAAL,GAAgBD,WAH3B;AAIFE,aAAc,CAJZ;AAKFC,YAAa,KAAKF,QAAL,GAAgBG,eAL3B;AAMFC,SAAU,MANR;AAOFC,kBAAmB,CAPjB;AAQFC,gBAAiB,KAAKC,KAAL,CAAWC,WAAX,CAAwB,aAAxB,CAAwC,KAAKR,QAAL,GAAgBS,aARvE;AASFC,YAAa,KAAKH,KAAL,CAAWC,WAAX,CAAyBG,SAAzB,CAAqC,MAThD;AAUFC,aAAc,KAAKL,KAAL,CAAWC,WAAX,CAAyBG,SAAzB,CAAqC,CAACE,MAAO,CAAR,CAAWC,OAAQ,CAAnB,CAVjD;AAWFC,cAAe,KAAKR,KAAL,CAAWC,WAAX,CAAyBG,SAAzB,CAAqC,GAXlD;AAYFK,aAAc,KAAKT,KAAL,CAAWC,WAAX,CAAyBG,SAAzB,CAAqC,GAZjD;AAaFM,UAAW,KAAKV,KAAL,CAAWC,WAAX,CAAyBG,SAAzB,CAAqC,CAb9C,CADH,CAAP;;;AAiBH,C;;AAEkB;;AAEf,GAAIO,cAAe;AACfC,MAAO,KAAKC,eAAL,GAAuBxB,IADf,CAAnB;;;AAIA,MAAO,2BAAa,KAAKW,KAAlB,CAAyBW,YAAzB,CAAP;;AAEH,C;;AAEgB;AACb,GAAIG,eAAgB,gBAAMC,QAAN,CAAeC,GAAf,CAAmB,KAAKhB,KAAL,CAAWiB,QAA9B,CAAwC,SAACC,KAAD,CAAW;AACnE,MAAOA,MAAP;AACH,CAFmB,CAApB;;AAIA,MAAOJ,cAAP;AACH,C;;AAEQ;AACL,GAAG,KAAKd,KAAL,CAAWmB,SAAX,EAAwB,KAAKnB,KAAL,CAAWoB,SAAtC,CAAiD;AAC7C,GAAMC,IAAK,GAAI,uBAASC,UAAb,CAAwB,CAACC,cAAe,uBAACC,EAAD,CAAKC,EAAL,QAAYD,MAAOC,EAAnB,EAAhB,CAAxB,CAAX;AACA,GAAIC,YAAaL,GAAGM,aAAH,CAAiB,KAAK3B,KAAL,CAAWmB,SAA5B,CAAjB;AACA;AACI,gEAAc,KAAKS,gBAAL,EAAd;AACI,oBAAqB,IADzB;AAEI,WAAYF,UAFhB;AAGI,UAAW,KAAK1B,KAAL,CAAWoB,SAH1B,GADJ;;AAMH;AACD;AACI,0DAAM,IAAK,sBAAK,QAAKS,KAAL,CAAaC,CAAlB,EAAX,EAAoC,KAAKF,gBAAL,EAApC;AACK,KAAKG,cAAL,EADL,CADJ;;;AAKH,C,mEA5DgB3C,M","file":"index.js","sourcesContent":["/* @flow */\n'use strict';\n\nimport React from 'react';\nimport {View, ListView} from 'react-native';\nimport NativeBaseComponent from '../../Base/NativeBaseComponent';\nimport computeProps from '../../../Utils/computeProps';\n\nexport default class CardNB extends NativeBaseComponent {\n\n    propTypes: {\n        style : React.PropTypes.object\n    }\n\n    getInitialStyle() {\n        return {\n            card: {\n                marginVertical: 5,\n                flex: 1,\n                borderWidth: this.getTheme().borderWidth,\n                borderRadius: 2,\n                borderColor: this.getTheme().listBorderColor,\n                flexWrap: 'wrap',\n                borderBottomWidth: 1,\n                backgroundColor: this.props.transparent? 'transparent' : this.getTheme().cardDefaultBg,\n                shadowColor: this.props.transparent ? undefined : '#000',\n                shadowOffset: this.props.transparent ? undefined : {width: 0, height: 2},\n                shadowOpacity: this.props.transparent ? undefined : 0.1,\n                shadowRadius: this.props.transparent ? undefined : 1.5,\n                elevation: this.props.transparent ? undefined : 2\n            }\n        }\n    }\n\n    prepareRootProps() {\n\n        var defaultProps = {\n            style: this.getInitialStyle().card\n        };\n\n        return computeProps(this.props, defaultProps);\n\n    }\n\n    renderChildren() {\n        var childrenArray = React.Children.map(this.props.children, (child) => {\n            return child;\n        });\n\n        return childrenArray;\n    }\n\n    render() {\n        if(this.props.dataArray && this.props.renderRow) {\n            const ds = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});\n            var dataSource = ds.cloneWithRows(this.props.dataArray);\n            return (\n                <ListView {...this.prepareRootProps()}\n                    enableEmptySections={true}\n                    dataSource={dataSource}\n                    renderRow={this.props.renderRow} />\n            );\n        }\n        return(\n            <View ref={c => this._root = c} {...this.prepareRootProps()} >\n                {this.renderChildren()}\n            </View>\n        );\n    }\n\n}\n"]}