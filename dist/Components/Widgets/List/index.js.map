{"version":3,"sources":["../../../../Components/Widgets/List/index.js"],"names":["ListNB","list","insetList","borderWidth","borderColor","getTheme","listBorderColor","margin","borderBottomWidth","defaultProps","style","props","inset","getInitialStyle","childrenArray","Children","toArray","children","keyIndex","map","child","cloneElement","key","lastElement","last","concat","slice","length","dataArray","renderRow","ds","DataSource","rowHasChanged","r1","r2","dataSource","cloneWithRows","prepareRootProps","refreshing","onRefresh","_root","c","renderChildren"],"mappings":";AACA,a;;AAEA,4B;AACA;AACA,oE;AACA,yD;AACA,8B;;AAEqBA,M;;;;;;;;AAQC;AACd,MAAO;AACHC,KAAM,EADH;;;AAIHC,UAAW;AACPC,YAAa,CADN;AAEPC,YAAa,KAAKC,QAAL,GAAgBC,eAFtB;AAGPC,OAAQ,EAHD;AAIPC,kBAAmB,CAJZ,CAJR,CAAP;;;AAWH,C;;;AAGkB;;AAEf,GAAIC,cAAe;AACfC,MAAO,KAAKC,KAAL,CAAWC,KAAX,CAAmB,KAAKC,eAAL,GAAuBX,SAA1C,CAAsD,KAAKW,eAAL,GAAuBZ,IADrE,CAAnB;;;AAIA,MAAO,2BAAa,KAAKU,KAAlB,CAAyBF,YAAzB,CAAP;AACH,C;;AAEgB;;AAEb,GAAIK,eAAgB,gBAAMC,QAAN,CAAeC,OAAf,CAAuB,KAAKL,KAAL,CAAWM,QAAlC,CAApB;;AAEA,GAAIC,UAAW,CAAf;;AAEAJ,cAAgBA,cAAcK,GAAd,CAAkB,SAACC,KAAD,CAAW;AACzCF;AACA,MAAO,iBAAMG,YAAN,CAAmBD,KAAnB,aAA8BA,MAAMT,KAApC,EAA2CW,IAAKJ,QAAhD,GAAP;AACH,CAHe,CAAhB;;AAKA,GAAIK,aAAc,iBAAEC,IAAF,CAAOV,aAAP,CAAlB;;;;AAIA,MAAO,kBAAEW,MAAF,CAAS,iBAAEC,KAAF,CAAQZ,aAAR,CAAuB,CAAvB,CAA0BA,cAAca,MAAd,CAAuB,CAAjD,CAAT,CAA8DJ,WAA9D,CAAP;AACH,C;;AAEQ;AACL,GAAG,KAAKZ,KAAL,CAAWiB,SAAX,EAAwB,KAAKjB,KAAL,CAAWkB,SAAtC,CAAiD;AAC7C,GAAMC,IAAK,GAAI,uBAASC,UAAb,CAAwB,CAACC,cAAe,uBAACC,EAAD,CAAKC,EAAL,QAAYD,MAAOC,EAAnB,EAAhB,CAAxB,CAAX;AACA,GAAIC,YAAaL,GAAGM,aAAH,CAAiB,KAAKzB,KAAL,CAAWiB,SAA5B,CAAjB;AACA;AACI,gEAAc,KAAKS,gBAAL,EAAd;AACI,oBAAqB,IADzB;AAEI,WAAYF,UAFhB;AAGI,WAAY,KAAKxB,KAAL,CAAW2B,UAH3B;AAII,UAAW,KAAK3B,KAAL,CAAW4B,SAJ1B;AAKI,UAAW,KAAK5B,KAAL,CAAWkB,SAL1B,GADJ;;AAQH,CAXD;AAYK;AACD;AACI,0DAAM,IAAK,sBAAK,QAAKW,KAAL,CAAaC,CAAlB,EAAX,EAAoC,KAAKJ,gBAAL,EAApC;AACC,KAAKK,cAAL,EADD,CADJ;;;AAKH;AACJ,C,mEAtEgB1C,M","file":"index.js","sourcesContent":["/* @flow */\n'use strict';\n\nimport React from 'react';\nimport {View, ListView} from 'react-native';\nimport NativeBaseComponent from '../../Base/NativeBaseComponent';\nimport computeProps from '../../../Utils/computeProps';\nimport _ from 'lodash';\n\nexport default class ListNB extends NativeBaseComponent {\n\n    propTypes: {\n        style : React.PropTypes.object,\n        dataArray : React.PropTypes.array,\n        renderRow : React.PropTypes.func\n    }\n\n    getInitialStyle() {\n        return {\n            list: {\n\n            },\n            insetList: {\n                borderWidth: 1,\n                borderColor: this.getTheme().listBorderColor,\n                margin: 15,\n                borderBottomWidth: 0\n            }\n        }\n    }\n\n\n    prepareRootProps() {\n\n        var defaultProps = {\n            style: this.props.inset ? this.getInitialStyle().insetList : this.getInitialStyle().list\n        };\n\n        return computeProps(this.props, defaultProps);\n    }\n\n    renderChildren() {\n\n        var childrenArray = React.Children.toArray(this.props.children);\n\n        var keyIndex = 0;\n\n        childrenArray = childrenArray.map((child) => {\n            keyIndex++;\n            return React.cloneElement(child, {...child.props, key: keyIndex});\n        });\n\n        var lastElement = _.last(childrenArray);\n\n\n\n        return _.concat(_.slice(childrenArray, 0, childrenArray.length - 1), lastElement);\n    }\n\n    render() {\n        if(this.props.dataArray && this.props.renderRow) {\n            const ds = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});\n            var dataSource = ds.cloneWithRows(this.props.dataArray);\n            return (\n                <ListView {...this.prepareRootProps()}\n                    enableEmptySections={true}\n                    dataSource={dataSource}\n                    refreshing={this.props.refreshing}\n                    onRefresh={this.props.onRefresh}\n                    renderRow={this.props.renderRow} />\n            );\n        }\n        else {\n            return(\n                <View ref={c => this._root = c} {...this.prepareRootProps()} >\n                {this.renderChildren()}\n                </View>\n            );\n        }\n    }\n}\n"]}