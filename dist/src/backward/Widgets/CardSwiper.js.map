{"version":3,"sources":["../../../../src/backward/Widgets/CardSwiper.js"],"names":["SWIPE_THRESHOLD","CardSwiper","props","state","pan","ValueXY","enter","Value","_animateEntrance","spring","toValue","friction","start","_panResponder","create","onMoveShouldSetResponderCapture","onMoveShouldSetPanResponderCapture","onPanResponderGrant","e","gestureState","setOffset","x","_value","y","setValue","onPanResponderMove","event","dx","dy","onPanResponderRelease","vx","vy","flattenOffset","velocity","Math","abs","onSwipeRight","onSwipeLeft","decay","deceleration","_resetState","bind","translateX","translateY","rotate","interpolate","inputRange","outputRange","opacity","scale","animatedCardStyles","transform","_root","c","panHandlers","children"],"mappings":"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","file":"CardSwiper.js","sourcesContent":["/* @flow */\n\nimport React from 'react';\nimport clamp from 'clamp';\nimport { Animated, PanResponder } from 'react-native';\nimport NativeBaseComponent from '../Base/NativeBaseComponent';\nimport { View } from './View';\n\n\nconst SWIPE_THRESHOLD = 120;\n\nexport default class CardSwiper extends NativeBaseComponent {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      pan: new Animated.ValueXY(),\n      enter: new Animated.Value(0.5),\n    };\n  }\n\n  componentDidMount() {\n    this._animateEntrance();\n  }\n\n  _animateEntrance() {\n    Animated.spring(\n            this.state.enter,\n            { toValue: 1, friction: 8 }\n        ).start();\n  }\n\n  componentWillMount() {\n    this._panResponder = PanResponder.create({\n      onMoveShouldSetResponderCapture: () => true,\n      onMoveShouldSetPanResponderCapture: () => true,\n\n      onPanResponderGrant: (e, gestureState) => {\n        this.state.pan.setOffset({ x: this.state.pan.x._value, y: this.state.pan.y._value });\n        this.state.pan.setValue({ x: 0, y: 0 });\n      },\n\n      onPanResponderMove: Animated.event([\n        null, { dx: this.state.pan.x, dy: this.state.pan.y },\n      ]),\n\n      onPanResponderRelease: (e, { vx, vy }) => {\n        this.state.pan.flattenOffset();\n        let velocity;\n\n        if (vx >= 0) {\n          velocity = clamp(vx, 3, 5);\n        } else if (vx < 0) {\n          velocity = clamp(vx * -1, 3, 5) * -1;\n        }\n\n        if (Math.abs(this.state.pan.x._value) > SWIPE_THRESHOLD) {\n          if (velocity > 0) {\n            this.props.onSwipeRight();\n          } else {\n            this.props.onSwipeLeft();\n          }\n          Animated.decay(this.state.pan, {\n            velocity: { x: velocity, y: vy },\n            deceleration: 0.98,\n          }).start(this._resetState.bind(this));\n        } else {\n          Animated.spring(this.state.pan, {\n            toValue: { x: 0, y: 0 },\n            friction: 4,\n          }).start();\n        }\n      },\n    });\n  }\n\n  _resetState() {\n    this.state.pan.setValue({ x: 0, y: 0 });\n    this.state.enter.setValue(0);\n    this._animateEntrance();\n  }\n\n  render() {\n    const { pan, enter } = this.state;\n\n    const [translateX, translateY] = [pan.x, pan.y];\n\n    const rotate = pan.x.interpolate({ inputRange: [-300, 0, 300], outputRange: ['-30deg', '0deg', '30deg'] });\n    const opacity = pan.x.interpolate({ inputRange: [-150, 0, 150], outputRange: [0.5, 1, 0.5] });\n    const scale = enter;\n\n    const animatedCardStyles = { transform: [{ translateX }, { translateY }, { rotate }, { scale }], opacity };\n\n\n    return (\n      <View ref={c => this._root = c}>\n        <Animated.View style={animatedCardStyles} {...this._panResponder.panHandlers} >\n          {this.props.children}\n        </Animated.View>\n      </View>\n    );\n  }\n\n}\n"]}