{"version":3,"sources":["../../../../src/basic/Swipe/NativeButton.js"],"names":["styles","create","button","flexDirection","alignSelf","justifyContent","textButton","fontSize","opacity","NativeButton","createClass","propTypes","textStyle","style","disabledStyle","children","node","isRequired","underlayColor","string","background","any","statics","isAndroid","OS","getDefaultProps","_renderText","props","render","disabled","buttonProps","accessibilityComponentType","accessibilityTraits","accessible","delayLongPress","delayPressIn","delayPressOut","hitSlop","onLayout","onPress","onPressIn","onPressOut","onLongPress","pressRetentionOffset","SelectableBackground"],"mappings":"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","file":"NativeButton.js","sourcesContent":["import React, {\n  PropTypes,\n} from 'react';\n\nimport {\n  TouchableWithoutFeedback,\n  TouchableNativeFeedback,\n  TouchableHighlight,\n  Text,\n  StyleSheet,\n  Platform,\n  View,\n} from 'react-native';\n\nconst styles = StyleSheet.create({\n  button: {\n    flexDirection: 'row',\n    alignSelf: 'stretch',\n    justifyContent: 'center',\n  },\n  textButton: {\n    fontSize: 14,\n    alignSelf: 'center',\n  },\n  opacity: {\n    opacity: 0.8,\n  },\n});\n\nconst NativeButton = React.createClass({\n\n  propTypes: {\n    // Extract parent props\n    ...TouchableWithoutFeedback.propTypes,\n    textStyle: Text.propTypes.style,\n    disabledStyle: Text.propTypes.style,\n    children: PropTypes.node.isRequired,\n    underlayColor: PropTypes.string,\n    background: (TouchableNativeFeedback.propTypes) ? TouchableNativeFeedback.propTypes.background : PropTypes.any,\n  },\n\n  statics: {\n    isAndroid: (Platform.OS === 'android'),\n  },\n\n  getDefaultProps: function() {\n    return {\n      textStyle: null,\n      disabledStyle: null,\n      underlayColor: null,\n    };\n  },\n\n  _renderText: function() {\n    // If children is not a string don't wrapp it in a Text component\n    if (typeof this.props.children !== 'string') {\n      return this.props.children;\n    }\n\n    return (\n      <Text style={ [ styles.textButton, this.props.textStyle ] }>\n        { this.props.children }\n      </Text>\n    );\n  },\n\n  render: function() {\n    const disabledStyle = this.props.disabled ? (this.props.disabledStyle || styles.opacity) : {};\n\n    // Extract Button props\n    let buttonProps = {\n      accessibilityComponentType: this.props.accessibilityComponentType,\n      accessibilityTraits: this.props.accessibilityTraits,\n      accessible: this.props.accessible,\n      delayLongPress: this.props.delayLongPress,\n      delayPressIn: this.props.delayPressIn,\n      delayPressOut: this.props.delayPressOut,\n      disabled: this.props.disabled,\n      hitSlop: this.props.hitSlop,\n      onLayout: this.props.onLayout,\n      onPress: this.props.onPress,\n      onPressIn: this.props.onPressIn,\n      onPressOut: this.props.onPressOut,\n      onLongPress: this.props.onLongPress,\n      pressRetentionOffset: this.props.pressRetentionOffset,\n    };\n\n    // Render Native Android Button\n    if (NativeButton.isAndroid) {\n      buttonProps = Object.assign(buttonProps, {\n        background: this.props.background || TouchableNativeFeedback.SelectableBackground(),\n      });\n\n      return (\n        <TouchableNativeFeedback\n          {...buttonProps}>\n          <View style={[styles.button, this.props.style, disabledStyle]}>\n            {this._renderText()}\n          </View>\n        </TouchableNativeFeedback>\n      );\n    }\n\n    // Render default button\n    return (\n      <TouchableHighlight\n        {...buttonProps}\n        style={[styles.button, this.props.style, disabledStyle]}\n        underlayColor={ this.props.underlayColor }>\n        { this._renderText() }\n      </TouchableHighlight>\n    );\n  }\n});\n\nexport default NativeButton;\n"]}