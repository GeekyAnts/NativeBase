{"version":3,"sources":["../../../src/basic/ListItem.js"],"names":["ListItem","variables","context","theme","variable","Platform","OS","androidRipple","props","onPress","onLongPress","Version","_root","c","listBtnUnderlayColor","touchableHighlightStyle","children","marginLeft","paddingLeft","Component","contextTypes","PropTypes","object","propTypes","TouchableHighlight","style","oneOfType","number","array","itemDivider","bool","button","StyledListItem","mapPropsToStyleNames"],"mappings":"61BAAA,4B;AACA,qC;AACA;;;;;;;AAOA;AACA,mE;AACA,qD;;AAEMA,Q;;;;AAIK;AACP,GAAMC,WAAY,KAAKC,OAAL,CAAaC,KAAb;AACd,KAAKD,OAAL,CAAaC,KAAb,CAAmB,4BAAnB,EAAiDF,SADnC;AAEdG,kBAFJ;;AAIA;AACEC,sBAASC,EAAT,GAAgB,KAAhB;AACAD,sBAASC,EAAT,GAAgB,KADhB;AAEAL,UAAUM,aAAV,GAA4B,KAF5B;AAGC,CAAC,KAAKC,KAAL,CAAWC,OAAZ,EAAuB,CAAC,KAAKD,KAAL,CAAWE,WAHpC;AAIAL,sBAASM,OAAT,EAAoB,EALtB;AAME;AACA;AACE,8BAAC,+BAAD;AACE,QAAS,KAAKH,KAAL,CAAWC,OADtB;AAEE,YAAa,KAAKD,KAAL,CAAWE,WAF1B;AAGE,IAAK,sBAAM,QAAKE,KAAL,CAAaC,CAAnB,EAHP;AAIE,cAAeZ,UAAUa,oBAJ3B;AAKM,KAAKN,KALX;AAME,MAAO,KAAKA,KAAL,CAAWO,uBANpB;;AAQE,8BAAC,iBAAD,aAAU,KAAKP,KAAf,mDAAuB,KAAKA,KAAL,CAAWQ,QAAlC,CARF,CADF;;;AAYD,CAnBD,IAmBO;AACL;AACE,8BAAC,oCAAD;AACE,IAAK,sBAAM,QAAKJ,KAAL,CAAaC,CAAnB,EADP;AAEM,KAAKL,KAFX;;AAIE,8BAAC,iBAAD,EAAM,MAAO,CAAES,WAAY,CAAC,EAAf,CAAmBC,YAAa,EAAhC,CAAb;AACE,8BAAC,iBAAD,aAAU,KAAKV,KAAf,mDAAuB,KAAKA,KAAL,CAAWQ,QAAlC,CADF,CAJF,CADF;;;;AAUD;AACF,C,sBAxCoBG,gB,EAAjBnB,Q,CACGoB,Y,CAAe,CACpBjB,MAAOkB,oBAAUC,MADG,C;;;AA0CxBtB,SAASuB,SAAT;AACKC,gCAAmBD,SADxB;AAEEE,MAAOJ,oBAAUK,SAAV,CAAoB;AACzBL,oBAAUC,MADe;AAEzBD,oBAAUM,MAFe;AAGzBN,oBAAUO,KAHe,CAApB,CAFT;;AAOEb,wBAAyBM,oBAAUK,SAAV,CAAoB;AAC3CL,oBAAUC,MADiC;AAE3CD,oBAAUO,KAFiC,CAApB,CAP3B;;AAWEC,YAAaR,oBAAUS,IAXzB;AAYEC,OAAQV,oBAAUS,IAZpB;;;AAeA,GAAME,gBAAiB;AACrB,qBADqB;AAErB,EAFqB;AAGrBC,8BAHqB;AAIrBjC,QAJqB,CAAvB,C;;AAM2BA,Q,CAAlBgC,c","file":"ListItem.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  TouchableHighlight,\r\n  Platform,\r\n  TouchableNativeFeedback,\r\n  View\r\n} from \"react-native\";\r\n\r\nimport { connectStyle } from \"native-base-shoutem-theme\";\r\nimport mapPropsToStyleNames from \"../utils/mapPropsToStyleNames\";\r\nimport variable from \"../theme/variables/platform\";\r\n\r\nclass ListItem extends Component {\r\n  static contextTypes = {\r\n    theme: PropTypes.object\r\n  };\r\n  render() {\r\n    const variables = this.context.theme\r\n      ? this.context.theme[\"@@shoutem.theme/themeStyle\"].variables\r\n      : variable;\r\n\r\n    if (\r\n      Platform.OS === \"ios\" ||\r\n      Platform.OS === \"web\" ||\r\n      variables.androidRipple === false ||\r\n      (!this.props.onPress && !this.props.onLongPress) ||\r\n      Platform.Version <= 21\r\n    ) {\r\n      return (\r\n        <TouchableHighlight\r\n          onPress={this.props.onPress}\r\n          onLongPress={this.props.onLongPress}\r\n          ref={c => (this._root = c)}\r\n          underlayColor={variables.listBtnUnderlayColor}\r\n          {...this.props}\r\n          style={this.props.touchableHighlightStyle}\r\n        >\r\n          <View {...this.props}>{this.props.children}</View>\r\n        </TouchableHighlight>\r\n      );\r\n    } else {\r\n      return (\r\n        <TouchableNativeFeedback\r\n          ref={c => (this._root = c)}\r\n          {...this.props}\r\n        >\r\n          <View style={{ marginLeft: -17, paddingLeft: 17 }}>\r\n            <View {...this.props}>{this.props.children}</View>\r\n          </View>\r\n        </TouchableNativeFeedback>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nListItem.propTypes = {\r\n  ...TouchableHighlight.propTypes,\r\n  style: PropTypes.oneOfType([\r\n    PropTypes.object,\r\n    PropTypes.number,\r\n    PropTypes.array\r\n  ]),\r\n  touchableHighlightStyle: PropTypes.oneOfType([\r\n    PropTypes.object,\r\n    PropTypes.array\r\n  ]),\r\n  itemDivider: PropTypes.bool,\r\n  button: PropTypes.bool\r\n};\r\n\r\nconst StyledListItem = connectStyle(\r\n  \"NativeBase.ListItem\",\r\n  {},\r\n  mapPropsToStyleNames\r\n)(ListItem);\r\n\r\nexport { StyledListItem as ListItem };\r\n"]}