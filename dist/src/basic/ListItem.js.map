{"version":3,"sources":["../../../src/basic/ListItem.js"],"names":["ListItem","variables","context","theme","OS","androidRipple","props","onPress","onLongPress","Version","_root","c","listBtnUnderlayColor","children","androidRippleColor","Ripple","androidRippleColorDark","marginLeft","paddingLeft","contextTypes","PropTypes","object","propTypes","style","itemDivider","bool","button","StyledListItem"],"mappings":"kzBAAA,4B;AACA;;AAEA;AACA,mE;AACA,qD;;AAEMA,Q;;;;AAIK;AACP,GAAMC,WAAa,KAAKC,OAAL,CAAaC,KAAd,CAAuB,KAAKD,OAAL,CAAaC,KAAb,CAAmB,4BAAnB,EAAiDF,SAAxE,mBAAlB;;AAEA,GAAI,sBAASG,EAAT,GAAgB,KAAhB,EAAyB,mBAASC,aAAT,GAA2B,KAApD,EAA6D,CAAC,KAAKC,KAAL,CAAWC,OAAzE,EAAoF,CAAC,KAAKD,KAAL,CAAWE,WAAhG,EAA+G,sBAASC,OAAT,EAAoB,EAAvI,CAA2I;AACzI;AACE;AACE,QAAS,KAAKH,KAAL,CAAWC,OADtB;AAEE,YAAa,KAAKD,KAAL,CAAWE,WAF1B;AAGE,IAAK,sBAAK,QAAKE,KAAL,CAAaC,CAAlB,EAHP;AAIE,cAAeV,UAAUW,oBAJ3B;;AAME,gDAAU,KAAKN,KAAf,CAAuB,KAAKA,KAAL,CAAWO,QAAlC,CANF,CADF;;;AAUD,CAXD;AAYK;AACH;AACI,oEAAyB,IAAK,sBAAK,QAAKH,KAAL,CAAaC,CAAlB,EAA9B;AACI,QAAS,KAAKL,KAAL,CAAWC,OADxB;AAEI,YAAa,KAAKD,KAAL,CAAWE,WAF5B;AAGI,WAAa,KAAKF,KAAL,CAAWQ,kBAAZ,CAAkC,qCAAwBC,MAAxB,CAA+B,KAAKT,KAAL,CAAWQ,kBAA1C,CAAlC,CAAkG,qCAAwBC,MAAxB,CAA+B,mBAASC,sBAAxC,CAHlH;AAII,iDAAM,MAAO,CAAEC,WAAY,CAAC,EAAf,CAAmBC,YAAa,EAAhC,CAAb;AACE,gDAAU,KAAKZ,KAAf,CAAuB,KAAKA,KAAL,CAAWO,QAAlC,CADF,CAJJ,CADJ;;;;AAUD;AACF,C,wCA/BGb,Q,CACGmB,Y,CAAe,CACpBhB,MAAO,gBAAMiB,SAAN,CAAgBC,MADH,C;;;AAiCxBrB,SAASsB,SAAT;AACK,gCAAmBA,SADxB;AAEEC,MAAO,gBAAMH,SAAN,CAAgBC,MAFzB;AAGEG,YAAa,gBAAMJ,SAAN,CAAgBK,IAH/B;AAIEC,OAAQ,gBAAMN,SAAN,CAAgBK,IAJ1B;;;AAOA,GAAME,gBAAiB,wBAAa,qBAAb,CAAoC,EAApC,iCAA8D3B,QAA9D,CAAvB,C;;;AAGoBA,Q,CAAlB2B,c","file":"ListItem.js","sourcesContent":["import React, { Component } from 'react';\nimport { TouchableHighlight, Platform, TouchableNativeFeedback, View } from 'react-native';\n\nimport { connectStyle } from '@shoutem/theme';\nimport mapPropsToStyleNames from '../Utils/mapPropsToStyleNames';\nimport variable from '../theme/variables/platform';\n\nclass ListItem extends Component {\n  static contextTypes = {\n    theme: React.PropTypes.object,\n  }\n  render() {\n    const variables = (this.context.theme) ? this.context.theme['@@shoutem.theme/themeStyle'].variables : variable;\n\n    if (Platform.OS === 'ios' || variable.androidRipple === false || !this.props.onPress || !this.props.onLongPress || Platform.Version <= 21) {\n      return (\n        <TouchableHighlight\n          onPress={this.props.onPress}\n          onLongPress={this.props.onLongPress}\n          ref={c => this._root = c}\n          underlayColor={variables.listBtnUnderlayColor}\n        >\n          <View {...this.props}>{this.props.children}</View>\n        </TouchableHighlight>\n      );\n    }\n    else {\n      return(\n          <TouchableNativeFeedback ref={c => this._root = c}\n              onPress={this.props.onPress}\n              onLongPress={this.props.onLongPress}\n              background={(this.props.androidRippleColor) ? TouchableNativeFeedback.Ripple(this.props.androidRippleColor) : TouchableNativeFeedback.Ripple(variable.androidRippleColorDark)}>\n              <View style={{ marginLeft: -17, paddingLeft: 17 }}>\n                <View {...this.props}>{this.props.children}</View>\n              </View>\n          </TouchableNativeFeedback>\n      );\n    }\n  }\n}\n\nListItem.propTypes = {\n  ...TouchableHighlight.propTypes,\n  style: React.PropTypes.object,\n  itemDivider: React.PropTypes.bool,\n  button: React.PropTypes.bool,\n};\n\nconst StyledListItem = connectStyle('NativeBase.ListItem', {}, mapPropsToStyleNames)(ListItem);\n\nexport {\n  StyledListItem as ListItem,\n};\n"]}