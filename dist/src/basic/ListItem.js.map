{"version":3,"sources":["../../../src/basic/ListItem.js"],"names":["ListItem","OS","androidRipple","props","onPress","_root","c","children","androidRippleColor","Ripple","androidRippleColorDark","propTypes","style","PropTypes","object","itemDivider","bool","button","StyledListItem"],"mappings":"kzBAAA,4B;AACA;;AAEA;AACA,mE;AACA,qD;;AAEMA,Q;AACK;AACP,GAAI,sBAASC,EAAT,GAAc,KAAd,EAAuB,mBAASC,aAAT,GAAyB,KAAhD,EAAyD,CAAC,KAAKC,KAAL,CAAWC,OAAzE,CAAkF;AAChF;AACE;AACE,IAAK,sBAAK,QAAKC,KAAL,CAAaC,CAAlB,EADP;AAEM,KAAKH,KAFX,EAEkB,cAAgB,KAAKA,KAAL,CAAWC,OAAZ,CAAuB,GAAvB,CAA6B,CAF9D;;AAIG,KAAKD,KAAL,CAAWI,QAJd,CADF;;;AAQD,CATD;AAUK;AACH;AACI,oEAAyB,IAAK,sBAAK,QAAKF,KAAL,CAAaC,CAAlB,EAA9B;AACI,QAAS,KAAKH,KAAL,CAAWC,OADxB;AAEI,WAAa,KAAKD,KAAL,CAAWK,kBAAZ,CAAkC,qCAAwBC,MAAxB,CAA+B,KAAKN,KAAL,CAAWK,kBAA1C,CAAlC,CAAkG,qCAAwBC,MAAxB,CAA+B,mBAASC,sBAAxC,CAFlH;AAGI,gDAAU,KAAKP,KAAf,CAAuB,KAAKA,KAAL,CAAWI,QAAlC,CAHJ,CADJ;;;AAOD;AACF,C;;;AAGHP,SAASW,SAAT;AACK,8BAAiBA,SADtB;AAEEC,MAAO,gBAAMC,SAAN,CAAgBC,MAFzB;AAGEC,YAAa,gBAAMF,SAAN,CAAgBG,IAH/B;AAIEC,OAAQ,gBAAMJ,SAAN,CAAgBG,IAJ1B;;;AAOA,GAAME,gBAAiB,wBAAa,qBAAb,CAAoC,EAApC,iCAA8DlB,QAA9D,CAAvB,C;;;AAGoBA,Q,CAAlBkB,c","file":"ListItem.js","sourcesContent":["import React, { Component } from 'react';\nimport { TouchableOpacity, Platform, TouchableNativeFeedback, View } from 'react-native';\n\nimport { connectStyle } from '@shoutem/theme';\nimport mapPropsToStyleNames from '../Utils/mapPropsToStyleNames';\nimport variable from '../theme/variables/platform';\n\nclass ListItem extends Component {\n  render() {\n    if (Platform.OS==='ios' || variable.androidRipple===false || !this.props.onPress) {\n      return (\n        <TouchableOpacity\n          ref={c => this._root = c}\n          {...this.props} activeOpacity={(this.props.onPress) ? 0.4 : 1}\n        >\n          {this.props.children}\n        </TouchableOpacity>\n      );\n    }\n    else {\n      return(\n          <TouchableNativeFeedback ref={c => this._root = c}\n              onPress={this.props.onPress}\n              background={(this.props.androidRippleColor) ? TouchableNativeFeedback.Ripple(this.props.androidRippleColor) : TouchableNativeFeedback.Ripple(variable.androidRippleColorDark)}>\n              <View {...this.props}>{this.props.children}</View>\n          </TouchableNativeFeedback>\n      );\n    }\n  }\n}\n\nListItem.propTypes = {\n  ...TouchableOpacity.propTypes,\n  style: React.PropTypes.object,\n  itemDivider: React.PropTypes.bool,\n  button: React.PropTypes.bool,\n};\n\nconst StyledListItem = connectStyle('NativeBase.ListItem', {}, mapPropsToStyleNames)(ListItem);\n\nexport {\n  StyledListItem as ListItem,\n};\n"]}