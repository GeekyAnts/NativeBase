{"version":3,"sources":["../../../src/basic/ListItem.js"],"names":["ListItem","variables","context","theme","variable","Platform","OS","androidRipple","props","onPress","onLongPress","Version","_root","c","listBtnUnderlayColor","touchableHighlightStyle","undefined","children","marginLeft","paddingLeft","Component","contextTypes","PropTypes","object","propTypes","TouchableHighlight","style","oneOfType","number","array","itemDivider","bool","button","StyledListItem","mapPropsToStyleNames"],"mappings":"21BAAA,4B,2CACA,qC,mDACA,yCAMA,iEAEA,mE,yEACA,qD,q7BAEMA,S,yRAIK,iBACP,GAAMC,WAAY,KAAKC,OAAL,CAAaC,KAAb,CACd,KAAKD,OAAL,CAAaC,KAAb,CAAmB,4BAAnB,EAAiDF,SADnC,CAEdG,kBAFJ,CAIA,GACEC,sBAASC,EAAT,GAAgB,KAAhB,EACAD,sBAASC,EAAT,GAAgB,KADhB,EAEAL,UAAUM,aAAV,GAA4B,KAF5B,EAGC,CAAC,KAAKC,KAAL,CAAWC,OAAZ,EAAuB,CAAC,KAAKD,KAAL,CAAWE,WAHpC,EAIAL,sBAASM,OAAT,EAAoB,EALtB,CAME,CACA,MACE,+BAAC,+BAAD,WACE,QAAS,KAAKH,KAAL,CAAWC,OADtB,CAEE,YAAa,KAAKD,KAAL,CAAWE,WAF1B,CAGE,IAAK,sBAAM,QAAKE,KAAL,CAAaC,CAAnB,EAHP,CAIE,cAAeZ,UAAUa,oBAJ3B,EAKM,KAAKN,KALX,EAME,MAAO,KAAKA,KAAL,CAAWO,uBANpB,kDAQE,8BAAC,iBAAD,aAAU,KAAKP,KAAf,EAAsB,OAAQQ,SAA9B,kDACG,KAAKR,KAAL,CAAWS,QADd,CARF,CADF,CAcD,CACD,MACE,+BAAC,oCAAD,WAAyB,IAAK,sBAAM,QAAKL,KAAL,CAAaC,CAAnB,EAA9B,EAAyD,KAAKL,KAA9D,mDACE,8BAAC,iBAAD,EAAM,MAAO,CAAEU,WAAY,CAAC,EAAf,CAAmBC,YAAa,EAAhC,CAAb,iDACE,8BAAC,iBAAD,aAAU,KAAKX,KAAf,EAAsB,OAAQQ,SAA9B,kDACG,KAAKR,KAAL,CAAWS,QADd,CADF,CADF,CADF,CASD,C,sBAxCoBG,gB,EAAjBpB,Q,CACGqB,Y,CAAe,CACpBlB,MAAOmB,oBAAUC,MADG,C,CA0CxBvB,SAASwB,SAAT,aACKC,gCAAmBD,SADxB,EAEEE,MAAOJ,oBAAUK,SAAV,CAAoB,CACzBL,oBAAUC,MADe,CAEzBD,oBAAUM,MAFe,CAGzBN,oBAAUO,KAHe,CAApB,CAFT,CAOEd,wBAAyBO,oBAAUK,SAAV,CAAoB,CAC3CL,oBAAUC,MADiC,CAE3CD,oBAAUO,KAFiC,CAApB,CAP3B,CAWEC,YAAaR,oBAAUS,IAXzB,CAYEC,OAAQV,oBAAUS,IAZpB,GAeA,GAAME,gBAAiB,yCACrB,qBADqB,CAErB,EAFqB,CAGrBC,8BAHqB,EAIrBlC,QAJqB,CAAvB,C,QAM2BA,Q,CAAlBiC,c","file":"ListItem.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  TouchableHighlight,\n  Platform,\n  TouchableNativeFeedback,\n  View\n} from 'react-native';\nimport { connectStyle } from 'native-base-shoutem-theme';\n\nimport mapPropsToStyleNames from '../utils/mapPropsToStyleNames';\nimport variable from '../theme/variables/platform';\n\nclass ListItem extends Component {\n  static contextTypes = {\n    theme: PropTypes.object\n  };\n  render() {\n    const variables = this.context.theme\n      ? this.context.theme['@@shoutem.theme/themeStyle'].variables\n      : variable;\n\n    if (\n      Platform.OS === 'ios' ||\n      Platform.OS === 'web' ||\n      variables.androidRipple === false ||\n      (!this.props.onPress && !this.props.onLongPress) ||\n      Platform.Version <= 21\n    ) {\n      return (\n        <TouchableHighlight\n          onPress={this.props.onPress}\n          onLongPress={this.props.onLongPress}\n          ref={c => (this._root = c)}\n          underlayColor={variables.listBtnUnderlayColor}\n          {...this.props}\n          style={this.props.touchableHighlightStyle}\n        >\n          <View {...this.props} testID={undefined}>\n            {this.props.children}\n          </View>\n        </TouchableHighlight>\n      );\n    }\n    return (\n      <TouchableNativeFeedback ref={c => (this._root = c)} {...this.props}>\n        <View style={{ marginLeft: -17, paddingLeft: 17 }}>\n          <View {...this.props} testID={undefined}>\n            {this.props.children}\n          </View>\n        </View>\n      </TouchableNativeFeedback>\n    );\n  }\n}\n\nListItem.propTypes = {\n  ...TouchableHighlight.propTypes,\n  style: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number,\n    PropTypes.array\n  ]),\n  touchableHighlightStyle: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.array\n  ]),\n  itemDivider: PropTypes.bool,\n  button: PropTypes.bool\n};\n\nconst StyledListItem = connectStyle(\n  'NativeBase.ListItem',\n  {},\n  mapPropsToStyleNames\n)(ListItem);\n\nexport { StyledListItem as ListItem };\n"]}