{"version":3,"sources":["../../../src/basic/Card.js"],"names":["Card","props","dataArray","renderRow","ds","ListView","DataSource","rowHasChanged","r1","r2","dataSource","cloneWithRows","_root","c","children","Component","propTypes","ViewPropTypes","style","PropTypes","oneOfType","object","number","array","func","StyledCard","mapPropsToStyleNames"],"mappings":"q1BAAA,4B;AACA,qC;AACA;;AAEA;AACA,mE;;AAEMA,I;AACK;AACP,GAAI,KAAKC,KAAL,CAAWC,SAAX,EAAwB,KAAKD,KAAL,CAAWE,SAAvC,CAAkD;AAChD,GAAMC,IAAK,GAAIC,uBAASC,UAAb,CAAwB;AACjCC,cAAe,uBAACC,EAAD,CAAKC,EAAL,QAAYD,MAAOC,EAAnB,EADkB,CAAxB,CAAX;;AAGA,GAAMC,YAAaN,GAAGO,aAAH,CAAiB,KAAKV,KAAL,CAAWC,SAA5B,CAAnB;AACA;AACE,8BAAC,qBAAD;AACM,KAAKD,KADX;AAEE,wBAFF;AAGE,WAAYS,UAHd;AAIE,UAAW,KAAKT,KAAL,CAAWE,SAJxB,kDADF;;;AAQD;AACD;AACE,8BAAC,iBAAD,WAAM,IAAK,sBAAM,QAAKS,KAAL,CAAaC,CAAnB,EAAX,EAAsC,KAAKZ,KAA3C;AACG,KAAKA,KAAL,CAAWa,QADd,CADF;;;AAKD,C,kBArBgBC,gB;;;AAwBnBf,KAAKgB,SAAL;AACKC,0BADL;AAEEC,MAAOC,oBAAUC,SAAV,CAAoB;AACzBD,oBAAUE,MADe;AAEzBF,oBAAUG,MAFe;AAGzBH,oBAAUI,KAHe,CAApB,CAFT;;AAOErB,UAAWiB,oBAAUI,KAPvB;AAQEpB,UAAWgB,oBAAUK,IARvB;;;AAWA,GAAMC,YAAa,yCAAa,iBAAb,CAAgC,EAAhC,CAAoCC,8BAApC;AACjB1B,IADiB,CAAnB,C;;;AAIuBA,I,CAAdyB,U","file":"Card.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { View, ListView, ViewPropTypes } from \"react-native\";\r\n\r\nimport { connectStyle } from \"native-base-shoutem-theme\";\r\nimport mapPropsToStyleNames from \"../utils/mapPropsToStyleNames\";\r\n\r\nclass Card extends Component {\r\n  render() {\r\n    if (this.props.dataArray && this.props.renderRow) {\r\n      const ds = new ListView.DataSource({\r\n        rowHasChanged: (r1, r2) => r1 !== r2\r\n      });\r\n      const dataSource = ds.cloneWithRows(this.props.dataArray);\r\n      return (\r\n        <ListView\r\n          {...this.props}\r\n          enableEmptySections\r\n          dataSource={dataSource}\r\n          renderRow={this.props.renderRow}\r\n        />\r\n      );\r\n    }\r\n    return (\r\n      <View ref={c => (this._root = c)} {...this.props}>\r\n        {this.props.children}\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nCard.propTypes = {\r\n  ...ViewPropTypes,\r\n  style: PropTypes.oneOfType([\r\n    PropTypes.object,\r\n    PropTypes.number,\r\n    PropTypes.array\r\n  ]),\r\n  dataArray: PropTypes.array,\r\n  renderRow: PropTypes.func\r\n};\r\n\r\nconst StyledCard = connectStyle(\"NativeBase.Card\", {}, mapPropsToStyleNames)(\r\n  Card\r\n);\r\n\r\nexport { StyledCard as Card };\r\n"]}