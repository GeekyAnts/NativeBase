{"version":3,"sources":["../../../src/basic/Card.js"],"names":["Card","props","dataArray","renderRow","ds","ListView","DataSource","rowHasChanged","r1","r2","dataSource","cloneWithRows","_root","c","children","Component","propTypes","ViewPropTypes","style","PropTypes","oneOfType","object","number","array","func","StyledCard","mapPropsToStyleNames"],"mappings":"8yBAAA,4B,2CACA,qC,mDACA,yCAEA,iEACA,mE,68BAEMA,K,iQACK,iBACP,GAAI,KAAKC,KAAL,CAAWC,SAAX,EAAwB,KAAKD,KAAL,CAAWE,SAAvC,CAAkD,CAChD,GAAMC,IAAK,GAAIC,uBAASC,UAAb,CAAwB,CACjCC,cAAe,uBAACC,EAAD,CAAKC,EAAL,QAAYD,MAAOC,EAAnB,EADkB,CAAxB,CAAX,CAGA,GAAMC,YAAaN,GAAGO,aAAH,CAAiB,KAAKV,KAAL,CAAWC,SAA5B,CAAnB,CACA,MACE,+BAAC,qBAAD,aACM,KAAKD,KADX,EAEE,wBAFF,CAGE,WAAYS,UAHd,CAIE,UAAW,KAAKT,KAAL,CAAWE,SAJxB,GADF,CAQD,CACD,MACE,+BAAC,iBAAD,WAAM,IAAK,sBAAM,QAAKS,KAAL,CAAaC,CAAnB,EAAX,EAAsC,KAAKZ,KAA3C,EACG,KAAKA,KAAL,CAAWa,QADd,CADF,CAKD,C,kBArBgBC,gB,EAwBnBf,KAAKgB,SAAL,aACKC,0BADL,EAEEC,MAAOC,oBAAUC,SAAV,CAAoB,CACzBD,oBAAUE,MADe,CAEzBF,oBAAUG,MAFe,CAGzBH,oBAAUI,KAHe,CAApB,CAFT,CAOErB,UAAWiB,oBAAUI,KAPvB,CAQEpB,UAAWgB,oBAAUK,IARvB,GAWA,GAAMC,YAAa,yCAAa,iBAAb,CAAgC,EAAhC,CAAoCC,8BAApC,EACjB1B,IADiB,CAAnB,C,QAIuBA,I,CAAdyB,U","file":"Card.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { View, ListView, ViewPropTypes } from \"react-native\";\n\nimport { connectStyle } from \"native-base-shoutem-theme\";\nimport mapPropsToStyleNames from \"../utils/mapPropsToStyleNames\";\n\nclass Card extends Component {\n  render() {\n    if (this.props.dataArray && this.props.renderRow) {\n      const ds = new ListView.DataSource({\n        rowHasChanged: (r1, r2) => r1 !== r2\n      });\n      const dataSource = ds.cloneWithRows(this.props.dataArray);\n      return (\n        <ListView\n          {...this.props}\n          enableEmptySections\n          dataSource={dataSource}\n          renderRow={this.props.renderRow}\n        />\n      );\n    }\n    return (\n      <View ref={c => (this._root = c)} {...this.props}>\n        {this.props.children}\n      </View>\n    );\n  }\n}\n\nCard.propTypes = {\n  ...ViewPropTypes,\n  style: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number,\n    PropTypes.array\n  ]),\n  dataArray: PropTypes.array,\n  renderRow: PropTypes.func\n};\n\nconst StyledCard = connectStyle(\"NativeBase.Card\", {}, mapPropsToStyleNames)(\n  Card\n);\n\nexport { StyledCard as Card };\n"]}