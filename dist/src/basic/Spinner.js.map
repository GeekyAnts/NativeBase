{"version":3,"sources":["../../../src/basic/Spinner.js"],"names":["Spinner","variables","context","theme","variable","_root","c","props","color","inverse","inverseSpinnerColor","defaultSpinnerColor","size","Component","contextTypes","PropTypes","object","propTypes","ActivityIndicator","string","bool","StyledSpinner","mapPropsToStyleNames"],"mappings":"y1BAAA,4B,2CACA,qC,mDACA,yCACA,iEAEA,qD,iDACA,mE,68BAEMA,Q,mRAIK,iBACP,GAAMC,WAAY,KAAKC,OAAL,CAAaC,KAAb,CACd,KAAKD,OAAL,CAAaC,KAAb,CAAmB,4BAAnB,EAAiDF,SADnC,CAEdG,kBAFJ,CAGA,MACE,+BAAC,8BAAD,WACE,IAAK,sBAAM,QAAKC,KAAL,CAAaC,CAAnB,EADP,EAEM,KAAKC,KAFX,EAGE,MACE,KAAKA,KAAL,CAAWC,KAAX,CACI,KAAKD,KAAL,CAAWC,KADf,CAEI,KAAKD,KAAL,CAAWE,OAAX,CACAR,UAAUS,mBADV,CAEAT,UAAUU,mBARlB,CAUE,KAAM,KAAKJ,KAAL,CAAWK,IAAX,CAAkB,KAAKL,KAAL,CAAWK,IAA7B,CAAoC,OAV5C,kDADF,CAcD,C,qBAtBmBC,gB,EAAhBb,O,CACGc,Y,CAAe,CACpBX,MAAOY,oBAAUC,MADG,C,CAwBxBhB,QAAQiB,SAAR,aACKC,+BAAkBD,SADvB,EAEET,MAAOO,oBAAUI,MAFnB,CAGEV,QAASM,oBAAUK,IAHrB,GAMA,GAAMC,eAAgB,yCACpB,oBADoB,CAEpB,EAFoB,CAGpBC,8BAHoB,EAIpBtB,OAJoB,CAAtB,C,QAM0BA,O,CAAjBqB,a","file":"Spinner.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { ActivityIndicator } from 'react-native';\nimport { connectStyle } from 'native-base-shoutem-theme';\n\nimport variable from '../theme/variables/platform';\nimport mapPropsToStyleNames from '../utils/mapPropsToStyleNames';\n\nclass Spinner extends Component {\n  static contextTypes = {\n    theme: PropTypes.object\n  };\n  render() {\n    const variables = this.context.theme\n      ? this.context.theme['@@shoutem.theme/themeStyle'].variables\n      : variable;\n    return (\n      <ActivityIndicator\n        ref={c => (this._root = c)}\n        {...this.props}\n        color={\n          this.props.color\n            ? this.props.color\n            : this.props.inverse\n            ? variables.inverseSpinnerColor\n            : variables.defaultSpinnerColor\n        }\n        size={this.props.size ? this.props.size : 'large'}\n      />\n    );\n  }\n}\n\nSpinner.propTypes = {\n  ...ActivityIndicator.propTypes,\n  color: PropTypes.string,\n  inverse: PropTypes.bool\n};\n\nconst StyledSpinner = connectStyle(\n  'NativeBase.Spinner',\n  {},\n  mapPropsToStyleNames\n)(Spinner);\n\nexport { StyledSpinner as Spinner };\n"]}