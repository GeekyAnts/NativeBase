{"version":3,"sources":["../../../src/basic/Picker.android.js"],"names":["PickerNB","props","placeholder","placeholderColor","placeholderText","_root","c","children","Component","Item","render","propTypes","Picker","StyledPickerNB","mapPropsToStyleNames"],"mappings":"i2BAEA,4B,2CACA,yCACA,oD,iEACA,mDACA,iEAEA,mE,68BAEqBA,S,qDACnB,kBAAYC,KAAZ,CAAmB,0IACXA,KADW,GAGjB,MAAKC,WAAL,CAAmBD,MAAMC,WAAN,EAAqB,MAAOD,OAAMC,WAAb,GAA6B,QAAlD,CAA6DD,MAAMC,WAAnE,CAAiF,IAApG,CACA,MAAKC,gBAAL,CAAwBF,MAAME,gBAAN,EAA0B,MAAOF,OAAME,gBAAb,GAAkC,QAA5D,CAAuEF,MAAME,gBAA7E,CAAgG,SAAxH,CAJiB,aAKlB,C,4DAEQ,iBACP,GAAMC,iBAAkB,KAAKF,WAA7B,CACA,MACE,+BAAC,cAAD,WAAQ,IAAK,sBAAM,QAAKG,KAAL,CAAaC,CAAnB,EAAb,EAAwC,KAAKL,KAA7C,mDACGG,kBAAoB,IAApB,EAA4B,8BAAC,cAAD,CAAQ,IAAR,EAAa,MAAO,IAApB,CAA0B,MAAOA,eAAjC,CAAkD,MAAO,KAAKD,gBAA9D,iDAD/B,CAEG,KAAKF,KAAL,CAAWM,QAFd,CADF,CAMD,C,sBAhBmCC,gB,kBAAjBR,Q,CAoBrBA,SAASS,IAAT,CAAgB,+BAAiB,oBAC/BC,MAD+B,kBACtB,CACP,MAAO,+BAAC,cAAD,CAAQ,IAAR,aAAiB,KAAKT,KAAtB,mDAAP,CACD,CAH8B,CAAjB,CAAhB,CAMAD,SAASW,SAAT,aACKC,eAAOD,SADZ,EAIA,GAAME,gBAAiB,yCACrB,qBADqB,CAErB,EAFqB,CAGrBC,8BAHqB,EAIrBd,QAJqB,CAAvB,C,QAM2BA,Q,CAAlBa,c","file":"Picker.android.js","sourcesContent":["/* eslint-disable react/prefer-stateless-function */\n/* eslint-disable react/prefer-es6-class */\nimport React, { Component } from 'react';\nimport { StyleSheet } from 'react-native';\nimport createReactClass from 'create-react-class';\nimport { Picker } from '@react-native-picker/picker';\nimport { connectStyle } from 'native-base-shoutem-theme';\n\nimport mapPropsToStyleNames from '../utils/mapPropsToStyleNames';\n\nexport default class PickerNB extends Component {\n  constructor(props) {\n    super(props);\n    // Receives placeholder-related attributes defined by the user, if any.\n    this.placeholder = props.placeholder && typeof props.placeholder === 'string' ? props.placeholder : null;\n    this.placeholderColor = props.placeholderColor && typeof props.placeholderColor === 'string' ? props.placeholderColor : \"#c8c8cb\";\n  }\n\n  render() {\n    const placeholderText = this.placeholder;\n    return (\n      <Picker ref={c => (this._root = c)} {...this.props}>\n        {placeholderText !== null && <Picker.Item value={null} label={placeholderText} color={this.placeholderColor} />}\n        {this.props.children}\n      </Picker>\n    );\n  }\n}\n\n// eslint-disable-next-line react/no-multi-comp\nPickerNB.Item = createReactClass({\n  render() {\n    return <Picker.Item {...this.props} />;\n  }\n});\n\nPickerNB.propTypes = {\n  ...Picker.propTypes\n};\n\nconst StyledPickerNB = connectStyle(\n  'NativeBase.PickerNB',\n  {},\n  mapPropsToStyleNames\n)(PickerNB);\n\nexport { StyledPickerNB as PickerNB };"]}