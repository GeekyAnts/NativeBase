{"version":3,"sources":["../../../src/basic/Radio.js"],"names":["Radio","defaultProps","standardStyle","props","variables","context","theme","variable","_root","c","prepareRootProps","Platform","OS","selected","color","selectedColor","radioColor","lineHeight","height","fontSize","radioBtnSize","undefined","radioSelectedColorAndroid","radioBtnLineHeight","Component","contextTypes","PropTypes","object","propTypes","TouchableOpacity","bool","StyledRadio","mapPropsToStyleNames"],"mappings":"u1BAAA,4B,2CACA,qC,mDACA,yCACA,iEACA,4D,iDAEA,mE,yEACA,qD,iDACA,mD,67BAEMA,M,2RAIe,CACjB,GAAMC,cAAe,CACnBC,cAAe,KADI,CAArB,CAIA,MAAO,2BAAa,KAAKC,KAAlB,CAAyBF,YAAzB,CAAP,CACD,C,uCAEQ,iBACP,GAAMG,WAAY,KAAKC,OAAL,CAAaC,KAAb,CACd,KAAKD,OAAL,CAAaC,KAAb,CAAmB,4BAAnB,EAAiDF,SADnC,CAEdG,kBAFJ,CAIA,MACE,+BAAC,6BAAD,WACE,IAAK,sBAAM,QAAKC,KAAL,CAAaC,CAAnB,EADP,EAEM,KAAKC,gBAAL,EAFN,mDAIGC,sBAASC,EAAT,GAAgB,KAAhB,EAAyB,CAAC,KAAKT,KAAL,CAAWD,aAArC,CACC,KAAKC,KAAL,CAAWU,QAAX,EACE,8BAAC,kBAAD,EACE,MAAO,CACLC,MAAO,KAAKX,KAAL,CAAWY,aAAX,CACH,KAAKZ,KAAL,CAAWY,aADR,CAEHX,UAAUY,UAHT,CAILC,WAAY,EAJP,CAKLC,OAAQ,EALH,CAMLC,SAAUf,UAAUgB,YANf,CADT,CASE,KAAK,eATP,iDAFH,CAeC,8BAAC,kBAAD,EACE,MAAO,CACLN,MACEH,sBAASC,EAAT,GAAgB,KAAhB,CACI,KAAKT,KAAL,CAAWU,QAAX,CACE,KAAKV,KAAL,CAAWY,aAAX,CACE,KAAKZ,KAAL,CAAWY,aADb,CAEEX,UAAUY,UAHd,CAIE,KAAKb,KAAL,CAAWW,KAAX,CACA,KAAKX,KAAL,CAAWW,KADX,CAEAO,SAPN,CAQI,KAAKlB,KAAL,CAAWU,QAAX,CACA,KAAKV,KAAL,CAAWY,aAAX,CACE,KAAKZ,KAAL,CAAWY,aADb,CAEEX,UAAUkB,yBAHZ,CAIA,KAAKnB,KAAL,CAAWW,KAAX,CACA,KAAKX,KAAL,CAAWW,KADX,CAEAO,SAhBD,CAiBLJ,WAAYb,UAAUmB,kBAjBjB,CAkBLJ,SAAUf,UAAUgB,YAlBf,CADT,CAqBE,KACET,sBAASC,EAAT,GAAgB,KAAhB,CACI,KAAKT,KAAL,CAAWU,QAAX,CACE,qBADF,CAEE,sBAHN,CAII,KAAKV,KAAL,CAAWU,QAAX,CACA,oBADA,CAEA,qBA5BR,iDAnBJ,CADF,CAsDD,C,mBAvEiBW,gB,EAAdxB,K,CACGyB,Y,CAAe,CACpBnB,MAAOoB,oBAAUC,MADG,C,CAyExB3B,MAAM4B,SAAN,aACKC,8BAAiBD,SADtB,EAEEf,SAAUa,oBAAUI,IAFtB,CAGE5B,cAAewB,oBAAUI,IAH3B,GAMA,GAAMC,aAAc,yCAAa,kBAAb,CAAiC,EAAjC,CAAqCC,8BAArC,EAClBhC,KADkB,CAApB,C,QAIwBA,K,CAAf+B,W","file":"Radio.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { TouchableOpacity, Platform } from 'react-native';\r\nimport { connectStyle } from 'native-base-shoutem-theme';\r\nimport Icon from 'react-native-vector-icons/Ionicons';\r\n\r\nimport mapPropsToStyleNames from '../utils/mapPropsToStyleNames';\r\nimport variable from '../theme/variables/platform';\r\nimport computeProps from '../utils/computeProps';\r\n\r\nclass Radio extends Component {\r\n  static contextTypes = {\r\n    theme: PropTypes.object\r\n  };\r\n  prepareRootProps() {\r\n    const defaultProps = {\r\n      standardStyle: false\r\n    };\r\n\r\n    return computeProps(this.props, defaultProps);\r\n  }\r\n\r\n  render() {\r\n    const variables = this.context.theme\r\n      ? this.context.theme['@@shoutem.theme/themeStyle'].variables\r\n      : variable;\r\n\r\n    return (\r\n      <TouchableOpacity\r\n        ref={c => (this._root = c)}\r\n        {...this.prepareRootProps()}\r\n      >\r\n        {Platform.OS === 'ios' && !this.props.standardStyle ? (\r\n          this.props.selected && (\r\n            <Icon\r\n              style={{\r\n                color: this.props.selectedColor\r\n                  ? this.props.selectedColor\r\n                  : variables.radioColor,\r\n                lineHeight: 25,\r\n                height: 20,\r\n                fontSize: variables.radioBtnSize\r\n              }}\r\n              name=\"ios-checkmark\"\r\n            />\r\n          )\r\n        ) : (\r\n          <Icon\r\n            style={{\r\n              color:\r\n                Platform.OS === 'ios'\r\n                  ? this.props.selected\r\n                    ? this.props.selectedColor\r\n                      ? this.props.selectedColor\r\n                      : variables.radioColor\r\n                    : this.props.color\r\n                    ? this.props.color\r\n                    : undefined\r\n                  : this.props.selected\r\n                  ? this.props.selectedColor\r\n                    ? this.props.selectedColor\r\n                    : variables.radioSelectedColorAndroid\r\n                  : this.props.color\r\n                  ? this.props.color\r\n                  : undefined,\r\n              lineHeight: variables.radioBtnLineHeight,\r\n              fontSize: variables.radioBtnSize\r\n            }}\r\n            name={\r\n              Platform.OS === 'ios'\r\n                ? this.props.selected\r\n                  ? 'ios-radio-button-on'\r\n                  : 'ios-radio-button-off'\r\n                : this.props.selected\r\n                ? 'md-radio-button-on'\r\n                : 'md-radio-button-off'\r\n            }\r\n          />\r\n        )}\r\n      </TouchableOpacity>\r\n    );\r\n  }\r\n}\r\n\r\nRadio.propTypes = {\r\n  ...TouchableOpacity.propTypes,\r\n  selected: PropTypes.bool,\r\n  standardStyle: PropTypes.bool\r\n};\r\n\r\nconst StyledRadio = connectStyle('NativeBase.Radio', {}, mapPropsToStyleNames)(\r\n  Radio\r\n);\r\n\r\nexport { StyledRadio as Radio };\r\n"]}