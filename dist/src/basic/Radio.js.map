{"version":3,"sources":["../../../src/basic/Radio.js"],"names":["Radio","defaultProps","standardStyle","props","variables","context","theme","variable","_root","c","prepareRootProps","Platform","OS","selected","color","selectedColor","radioColor","lineHeight","height","fontSize","radioBtnSize","undefined","radioSelectedColorAndroid","radioBtnLineHeight","Component","contextTypes","PropTypes","object","propTypes","TouchableOpacity","bool","StyledRadio","mapPropsToStyleNames"],"mappings":"q1BAAA,4B,2CACA,qC,mDACA,yCACA,iEACA,4D,iDAEA,mE,yEACA,qD,iDACA,mD,67BAEMA,M,2RAIe,CACjB,GAAMC,cAAe,CACnBC,cAAe,KADI,CAArB,CAIA,MAAO,2BAAa,KAAKC,KAAlB,CAAyBF,YAAzB,CAAP,CACD,C,uCAEQ,iBACP,GAAMG,WAAY,KAAKC,OAAL,CAAaC,KAAb,CACd,KAAKD,OAAL,CAAaC,KAAb,CAAmB,4BAAnB,EAAiDF,SADnC,CAEdG,kBAFJ,CAIA,MACE,+BAAC,6BAAD,WACE,IAAK,sBAAM,QAAKC,KAAL,CAAaC,CAAnB,EADP,EAEM,KAAKC,gBAAL,EAFN,mDAIGC,sBAASC,EAAT,GAAgB,KAAhB,EAAyB,CAAC,KAAKT,KAAL,CAAWD,aAArC,CACC,KAAKC,KAAL,CAAWU,QAAX,EACE,8BAAC,kBAAD,EACE,MAAO,CACLC,MAAO,KAAKX,KAAL,CAAWY,aAAX,CACH,KAAKZ,KAAL,CAAWY,aADR,CAEHX,UAAUY,UAHT,CAILC,WAAY,EAJP,CAKLC,OAAQ,EALH,CAMLC,SAAUf,UAAUgB,YANf,CADT,CASE,KAAK,eATP,iDAFH,CAeC,8BAAC,kBAAD,EACE,MAAO,CACLN,MACEH,sBAASC,EAAT,GAAgB,KAAhB,CACI,KAAKT,KAAL,CAAWU,QAAX,CACE,KAAKV,KAAL,CAAWY,aAAX,CACE,KAAKZ,KAAL,CAAWY,aADb,CAEEX,UAAUY,UAHd,CAIE,KAAKb,KAAL,CAAWW,KAAX,CACA,KAAKX,KAAL,CAAWW,KADX,CAEAO,SAPN,CAQI,KAAKlB,KAAL,CAAWU,QAAX,CACA,KAAKV,KAAL,CAAWY,aAAX,CACE,KAAKZ,KAAL,CAAWY,aADb,CAEEX,UAAUkB,yBAHZ,CAIA,KAAKnB,KAAL,CAAWW,KAAX,CACA,KAAKX,KAAL,CAAWW,KADX,CAEAO,SAhBD,CAiBLJ,WAAYb,UAAUmB,kBAjBjB,CAkBLJ,SAAUf,UAAUgB,YAlBf,CADT,CAqBE,KACET,sBAASC,EAAT,GAAgB,KAAhB,CACI,KAAKT,KAAL,CAAWU,QAAX,CACE,qBADF,CAEE,sBAHN,CAII,KAAKV,KAAL,CAAWU,QAAX,CACA,oBADA,CAEA,qBA5BR,iDAnBJ,CADF,CAsDD,C,mBAvEiBW,gB,EAAdxB,K,CACGyB,Y,CAAe,CACpBnB,MAAOoB,oBAAUC,MADG,C,CAyExB3B,MAAM4B,SAAN,aACKC,8BAAiBD,SADtB,EAEEf,SAAUa,oBAAUI,IAFtB,CAGE5B,cAAewB,oBAAUI,IAH3B,GAMA,GAAMC,aAAc,yCAAa,kBAAb,CAAiC,EAAjC,CAAqCC,8BAArC,EAClBhC,KADkB,CAApB,C,QAIwBA,K,CAAf+B,W","file":"Radio.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { TouchableOpacity, Platform } from 'react-native';\nimport { connectStyle } from 'native-base-shoutem-theme';\nimport Icon from 'react-native-vector-icons/Ionicons';\n\nimport mapPropsToStyleNames from '../utils/mapPropsToStyleNames';\nimport variable from '../theme/variables/platform';\nimport computeProps from '../utils/computeProps';\n\nclass Radio extends Component {\n  static contextTypes = {\n    theme: PropTypes.object\n  };\n  prepareRootProps() {\n    const defaultProps = {\n      standardStyle: false\n    };\n\n    return computeProps(this.props, defaultProps);\n  }\n\n  render() {\n    const variables = this.context.theme\n      ? this.context.theme['@@shoutem.theme/themeStyle'].variables\n      : variable;\n\n    return (\n      <TouchableOpacity\n        ref={c => (this._root = c)}\n        {...this.prepareRootProps()}\n      >\n        {Platform.OS === 'ios' && !this.props.standardStyle ? (\n          this.props.selected && (\n            <Icon\n              style={{\n                color: this.props.selectedColor\n                  ? this.props.selectedColor\n                  : variables.radioColor,\n                lineHeight: 25,\n                height: 20,\n                fontSize: variables.radioBtnSize\n              }}\n              name=\"ios-checkmark\"\n            />\n          )\n        ) : (\n          <Icon\n            style={{\n              color:\n                Platform.OS === 'ios'\n                  ? this.props.selected\n                    ? this.props.selectedColor\n                      ? this.props.selectedColor\n                      : variables.radioColor\n                    : this.props.color\n                    ? this.props.color\n                    : undefined\n                  : this.props.selected\n                  ? this.props.selectedColor\n                    ? this.props.selectedColor\n                    : variables.radioSelectedColorAndroid\n                  : this.props.color\n                  ? this.props.color\n                  : undefined,\n              lineHeight: variables.radioBtnLineHeight,\n              fontSize: variables.radioBtnSize\n            }}\n            name={\n              Platform.OS === 'ios'\n                ? this.props.selected\n                  ? 'ios-radio-button-on'\n                  : 'ios-radio-button-off'\n                : this.props.selected\n                ? 'md-radio-button-on'\n                : 'md-radio-button-off'\n            }\n          />\n        )}\n      </TouchableOpacity>\n    );\n  }\n}\n\nRadio.propTypes = {\n  ...TouchableOpacity.propTypes,\n  selected: PropTypes.bool,\n  standardStyle: PropTypes.bool\n};\n\nconst StyledRadio = connectStyle('NativeBase.Radio', {}, mapPropsToStyleNames)(\n  Radio\n);\n\nexport { StyledRadio as Radio };\n"]}