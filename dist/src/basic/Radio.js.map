{"version":3,"sources":["../../../src/basic/Radio.js"],"names":["Radio","defaultProps","standardStyle","props","variables","context","theme","variable","platformStyle","platform","_root","c","prepareRootProps","Platform","OS","selected","color","selectedColor","radioColor","lineHeight","height","fontSize","radioBtnSize","undefined","radioSelectedColorAndroid","radioBtnLineHeight","Component","contextTypes","PropTypes","object","propTypes","TouchableOpacity","bool","StyledRadio","mapPropsToStyleNames"],"mappings":"q1BAAA,4B,2CACA,qC,mDACA,yCACA,iEACA,4D,iDACA,mE,yEACA,qD,iDACA,mD,67BAEMA,M,2RAIe,CACjB,GAAMC,cAAe,CACnBC,cAAe,KADI,CAArB,CAIA,MAAO,2BAAa,KAAKC,KAAlB,CAAyBF,YAAzB,CAAP,CACD,C,uCAEQ,iBACP,GAAMG,WAAY,KAAKC,OAAL,CAAaC,KAAb,CACd,KAAKD,OAAL,CAAaC,KAAb,CAAmB,4BAAnB,EAAiDF,SADnC,CAEdG,kBAFJ,CAGA,GAAMC,eAAgBJ,UAAUI,aAAhC,CACA,GAAMC,UAAWL,UAAUK,QAA3B,CAEA,MACE,+BAAC,6BAAD,WACE,IAAK,sBAAM,QAAKC,KAAL,CAAaC,CAAnB,EADP,EAEM,KAAKC,gBAAL,EAFN,mDAIGC,sBAASC,EAAT,GAAgB,KAAhB,EAAyB,CAAC,KAAKX,KAAL,CAAWD,aAArC,CACC,KAAKC,KAAL,CAAWY,QAAX,EACE,8BAAC,kBAAD,EACE,MAAO,CACLC,MAAO,KAAKb,KAAL,CAAWc,aAAX,CACH,KAAKd,KAAL,CAAWc,aADR,CAEHb,UAAUc,UAHT,CAILC,WAAY,EAJP,CAKLC,OAAQ,EALH,CAMLC,SAAUjB,UAAUkB,YANf,CADT,CASE,KAAK,eATP,iDAFH,CAeC,8BAAC,kBAAD,EACE,MAAO,CACLN,MACEH,sBAASC,EAAT,GAAgB,KAAhB,CACI,KAAKX,KAAL,CAAWY,QAAX,CACE,KAAKZ,KAAL,CAAWc,aAAX,CACE,KAAKd,KAAL,CAAWc,aADb,CAEEb,UAAUc,UAHd,CAIE,KAAKf,KAAL,CAAWa,KAAX,CACA,KAAKb,KAAL,CAAWa,KADX,CAEAO,SAPN,CAQI,KAAKpB,KAAL,CAAWY,QAAX,CACA,KAAKZ,KAAL,CAAWc,aAAX,CACE,KAAKd,KAAL,CAAWc,aADb,CAEEb,UAAUoB,yBAHZ,CAIA,KAAKrB,KAAL,CAAWa,KAAX,CACA,KAAKb,KAAL,CAAWa,KADX,CAEAO,SAhBD,CAiBLJ,WAAYf,UAAUqB,kBAjBjB,CAkBLJ,SAAUjB,UAAUkB,YAlBf,CADT,CAqBE,KACET,sBAASC,EAAT,GAAgB,KAAhB,CACI,KAAKX,KAAL,CAAWY,QAAX,CACE,qBADF,CAEE,sBAHN,CAII,KAAKZ,KAAL,CAAWY,QAAX,CACA,oBADA,CAEA,qBA5BR,iDAnBJ,CADF,CAsDD,C,mBAzEiBW,gB,EAAd1B,K,CACG2B,Y,CAAe,CACpBrB,MAAOsB,oBAAUC,MADG,C,CA2ExB7B,MAAM8B,SAAN,aACKC,8BAAiBD,SADtB,EAEEf,SAAUa,oBAAUI,IAFtB,CAGE9B,cAAe0B,oBAAUI,IAH3B,GAMA,GAAMC,aAAc,yCAAa,kBAAb,CAAiC,EAAjC,CAAqCC,8BAArC,EAClBlC,KADkB,CAApB,C,QAIwBA,K,CAAfiC,W","file":"Radio.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { TouchableOpacity, Platform } from \"react-native\";\nimport { connectStyle } from \"native-base-shoutem-theme\";\nimport Icon from \"react-native-vector-icons/Ionicons\";\nimport mapPropsToStyleNames from \"../utils/mapPropsToStyleNames\";\nimport variable from \"../theme/variables/platform\";\nimport computeProps from \"../utils/computeProps\";\n\nclass Radio extends Component {\n  static contextTypes = {\n    theme: PropTypes.object\n  };\n  prepareRootProps() {\n    const defaultProps = {\n      standardStyle: false\n    };\n\n    return computeProps(this.props, defaultProps);\n  }\n\n  render() {\n    const variables = this.context.theme\n      ? this.context.theme[\"@@shoutem.theme/themeStyle\"].variables\n      : variable;\n    const platformStyle = variables.platformStyle;\n    const platform = variables.platform;\n\n    return (\n      <TouchableOpacity\n        ref={c => (this._root = c)}\n        {...this.prepareRootProps()}\n      >\n        {Platform.OS === \"ios\" && !this.props.standardStyle ? (\n          this.props.selected && (\n            <Icon\n              style={{\n                color: this.props.selectedColor\n                  ? this.props.selectedColor\n                  : variables.radioColor,\n                lineHeight: 25,\n                height: 20,\n                fontSize: variables.radioBtnSize\n              }}\n              name=\"ios-checkmark\"\n            />\n          )\n        ) : (\n          <Icon\n            style={{\n              color:\n                Platform.OS === \"ios\"\n                  ? this.props.selected\n                    ? this.props.selectedColor\n                      ? this.props.selectedColor\n                      : variables.radioColor\n                    : this.props.color\n                    ? this.props.color\n                    : undefined\n                  : this.props.selected\n                  ? this.props.selectedColor\n                    ? this.props.selectedColor\n                    : variables.radioSelectedColorAndroid\n                  : this.props.color\n                  ? this.props.color\n                  : undefined,\n              lineHeight: variables.radioBtnLineHeight,\n              fontSize: variables.radioBtnSize\n            }}\n            name={\n              Platform.OS === \"ios\"\n                ? this.props.selected\n                  ? \"ios-radio-button-on\"\n                  : \"ios-radio-button-off\"\n                : this.props.selected\n                ? \"md-radio-button-on\"\n                : \"md-radio-button-off\"\n            }\n          />\n        )}\n      </TouchableOpacity>\n    );\n  }\n}\n\nRadio.propTypes = {\n  ...TouchableOpacity.propTypes,\n  selected: PropTypes.bool,\n  standardStyle: PropTypes.bool\n};\n\nconst StyledRadio = connectStyle(\"NativeBase.Radio\", {}, mapPropsToStyleNames)(\n  Radio\n);\n\nexport { StyledRadio as Radio };\n"]}