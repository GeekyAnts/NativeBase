{"version":3,"sources":["../../../src/basic/Radio.js"],"names":["Radio","defaultProps","standardStyle","props","variables","context","theme","variable","platformStyle","platform","_root","c","prepareRootProps","Platform","OS","selected","color","selectedColor","radioColor","lineHeight","height","fontSize","radioBtnSize","undefined","radioSelectedColorAndroid","radioBtnLineHeight","Component","contextTypes","PropTypes","object","propTypes","TouchableOpacity","bool","StyledRadio","mapPropsToStyleNames"],"mappings":"q1BAAA,4B;AACA,qC;AACA;AACA;AACA,4D;AACA,mE;AACA,qD;AACA,mD;;AAEMA,K;;;;AAIe;AACjB,GAAMC,cAAe;AACnBC,cAAe,KADI,CAArB;;;AAIA,MAAO,2BAAa,KAAKC,KAAlB,CAAyBF,YAAzB,CAAP;AACD,C;;AAEQ;AACP,GAAMG,WAAY,KAAKC,OAAL,CAAaC,KAAb;AACd,KAAKD,OAAL,CAAaC,KAAb,CAAmB,4BAAnB,EAAiDF,SADnC;AAEdG,kBAFJ;AAGA,GAAMC,eAAgBJ,UAAUI,aAAhC;AACA,GAAMC,UAAWL,UAAUK,QAA3B;;AAEA;AACE,8BAAC,6BAAD;AACE,IAAK,sBAAM,QAAKC,KAAL,CAAaC,CAAnB,EADP;AAEM,KAAKC,gBAAL,EAFN;;AAIGC,sBAASC,EAAT,GAAgB,KAAhB,EAAyB,CAAC,KAAKX,KAAL,CAAWD,aAArC;AACC,KAAKC,KAAL,CAAWY,QAAX;AACE,8BAAC,kBAAD;AACE,MAAO;AACLC,MAAO,KAAKb,KAAL,CAAWc,aAAX;AACH,KAAKd,KAAL,CAAWc,aADR;AAEHb,UAAUc,UAHT;AAILC,WAAY,EAJP;AAKLC,OAAQ,EALH;AAMLC,SAAUjB,UAAUkB,YANf,CADT;;AASE,KAAK,eATP,iDAFH;;;;AAeC,8BAAC,kBAAD;AACE,MAAO;AACLN;AACEH,sBAASC,EAAT,GAAgB,KAAhB;AACI,KAAKX,KAAL,CAAWY,QAAX;AACE,KAAKZ,KAAL,CAAWc,aAAX;AACE,KAAKd,KAAL,CAAWc,aADb;AAEEb,UAAUc,UAHd;AAIE,KAAKf,KAAL,CAAWa,KAAX;AACE,KAAKb,KAAL,CAAWa,KADb;AAEEO,SAPR;AAQI,KAAKpB,KAAL,CAAWY,QAAX;AACE,KAAKZ,KAAL,CAAWc,aAAX;AACE,KAAKd,KAAL,CAAWc,aADb;AAEEb,UAAUoB,yBAHd;AAIE,KAAKrB,KAAL,CAAWa,KAAX;AACE,KAAKb,KAAL,CAAWa,KADb;AAEEO,SAhBL;AAiBLJ,WAAYf,UAAUqB,kBAjBjB;AAkBLJ,SAAUjB,UAAUkB,YAlBf,CADT;;AAqBE;AACET,sBAASC,EAAT,GAAgB,KAAhB;AACI,KAAKX,KAAL,CAAWY,QAAX;AACE,qBADF;AAEE,sBAHN;AAII,KAAKZ,KAAL,CAAWY,QAAX;AACE,oBADF;AAEE,qBA5BV,iDAnBJ,CADF;;;;;;AAsDD,C,mBAzEiBW,gB,EAAd1B,K,CACG2B,Y,CAAe,CACpBrB,MAAOsB,oBAAUC,MADG,C;;;AA2ExB7B,MAAM8B,SAAN;AACKC,8BAAiBD,SADtB;AAEEf,SAAUa,oBAAUI,IAFtB;AAGE9B,cAAe0B,oBAAUI,IAH3B;;;AAMA,GAAMC,aAAc,yCAAa,kBAAb,CAAiC,EAAjC,CAAqCC,8BAArC;AAClBlC,KADkB,CAApB,C;;;AAIwBA,K,CAAfiC,W","file":"Radio.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { TouchableOpacity, Platform } from \"react-native\";\nimport { connectStyle } from \"native-base-shoutem-theme\";\nimport Icon from \"react-native-vector-icons/Ionicons\";\nimport mapPropsToStyleNames from \"../utils/mapPropsToStyleNames\";\nimport variable from \"../theme/variables/platform\";\nimport computeProps from \"../utils/computeProps\";\n\nclass Radio extends Component {\n  static contextTypes = {\n    theme: PropTypes.object\n  };\n  prepareRootProps() {\n    const defaultProps = {\n      standardStyle: false\n    };\n\n    return computeProps(this.props, defaultProps);\n  }\n\n  render() {\n    const variables = this.context.theme\n      ? this.context.theme[\"@@shoutem.theme/themeStyle\"].variables\n      : variable;\n    const platformStyle = variables.platformStyle;\n    const platform = variables.platform;\n\n    return (\n      <TouchableOpacity\n        ref={c => (this._root = c)}\n        {...this.prepareRootProps()}\n      >\n        {Platform.OS === \"ios\" && !this.props.standardStyle ? (\n          this.props.selected && (\n            <Icon\n              style={{\n                color: this.props.selectedColor\n                  ? this.props.selectedColor\n                  : variables.radioColor,\n                lineHeight: 25,\n                height: 20,\n                fontSize: variables.radioBtnSize\n              }}\n              name=\"ios-checkmark\"\n            />\n          )\n        ) : (\n          <Icon\n            style={{\n              color:\n                Platform.OS === \"ios\"\n                  ? this.props.selected\n                    ? this.props.selectedColor\n                      ? this.props.selectedColor\n                      : variables.radioColor\n                    : this.props.color\n                      ? this.props.color\n                      : undefined\n                  : this.props.selected\n                    ? this.props.selectedColor\n                      ? this.props.selectedColor\n                      : variables.radioSelectedColorAndroid\n                    : this.props.color\n                      ? this.props.color\n                      : undefined,\n              lineHeight: variables.radioBtnLineHeight,\n              fontSize: variables.radioBtnSize\n            }}\n            name={\n              Platform.OS === \"ios\"\n                ? this.props.selected\n                  ? \"ios-radio-button-on\"\n                  : \"ios-radio-button-off\"\n                : this.props.selected\n                  ? \"md-radio-button-on\"\n                  : \"md-radio-button-off\"\n            }\n          />\n        )}\n      </TouchableOpacity>\n    );\n  }\n}\n\nRadio.propTypes = {\n  ...TouchableOpacity.propTypes,\n  selected: PropTypes.bool,\n  standardStyle: PropTypes.bool\n};\n\nconst StyledRadio = connectStyle(\"NativeBase.Radio\", {}, mapPropsToStyleNames)(\n  Radio\n);\n\nexport { StyledRadio as Radio };\n"]}