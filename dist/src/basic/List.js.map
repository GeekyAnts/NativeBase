{"version":3,"sources":["../../../src/basic/List.js"],"names":["List","props","_rows","openCellId","dataArray","renderRow","rowHasChanged","r1","r2","ds","ListView","DataSource","state","dataSource","cloneWithRows","nextProps","setState","childrenArray","React","Children","map","children","child","enable","_listView","setNativeProps","scrollEnabled","_root","closeRow","id","closeOnRowBeginSwipe","safeCloseOpenRow","secId","rowId","rowMap","cellIdentifier","onRowOpen","closeOnRowPress","e","closeOnScroll","onScroll","ref","listViewRef","rowData","previewRowId","getRowIDForFlatIndex","previewRowIndex","row","rowSwipeGestureBegan","onRowDidOpen","onRowClose","onRowDidClose","onRowPress","setScrollEnabled","leftOpenValue","rightOpenValue","disableLeftSwipe","disableRightSwipe","stopLeftSwipe","stopRightSwipe","recalculateHiddenLayout","swipeRowStyle","previewFirstRow","previewDuration","previewOpenValue","tension","friction","directionalDistanceChangeThreshold","swipeToOpenPercent","renderLeftHiddenRow","renderRightHiddenRow","setRefs","c","renderChildren","Component","defaultProps","StyledList","mapPropsToStyleNames"],"mappings":"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","file":"List.js","sourcesContent":["import React, { Component } from \"react\";\nimport { ListView, View } from \"react-native\";\nimport { connectStyle } from \"native-base-shoutem-theme\";\n\nimport { SwipeRow } from \"./SwipeRow\";\nimport mapPropsToStyleNames from \"../utils/mapPropsToStyleNames\";\n\nclass List extends Component {\n  static defaultProps = {\n    leftOpenValue: 0,\n    rightOpenValue: 0,\n    closeOnRowBeginSwipe: false,\n    closeOnScroll: true,\n    closeOnRowPress: true,\n    disableLeftSwipe: false,\n    disableRightSwipe: false,\n    recalculateHiddenLayout: false,\n    previewFirstRow: false,\n    directionalDistanceChangeThreshold: 2,\n    swipeToOpenPercent: 50\n  };\n  constructor(props) {\n    super(props);\n    this._rows = {};\n    this.openCellId = null;\n    if (props.dataArray && props.renderRow) {\n      let rowHasChanged = props.rowHasChanged || ((r1, r2) => r1 !== r2);\n      const ds = new ListView.DataSource({ rowHasChanged: rowHasChanged });\n      this.state = {\n        dataSource: ds.cloneWithRows(props.dataArray)\n      };\n    } else {\n      this.state = {};\n    }\n  }\n  componentWillReceiveProps(nextProps) {\n    if (this.state.dataSource) {\n      this.setState({\n        dataSource: this.state.dataSource.cloneWithRows(nextProps.dataArray)\n      });\n    }\n  }\n  renderChildren() {\n    const childrenArray = React.Children.map(\n      this.props.children,\n      child => child\n    );\n\n    return childrenArray;\n  }\n  setScrollEnabled(enable) {\n    this._listView.setNativeProps({ scrollEnabled: enable });\n  }\n\n  safeCloseOpenRow() {\n    // if the openCellId is stale due to deleting a row this could be undefined\n    if (this._rows[this.openCellId]._root) {\n      this._rows[this.openCellId]._root.closeRow();\n    }\n  }\n\n  rowSwipeGestureBegan(id) {\n    if (\n      this.props.closeOnRowBeginSwipe &&\n      this.openCellId &&\n      this.openCellId !== id\n    ) {\n      this.safeCloseOpenRow();\n    }\n  }\n\n  onRowOpen(secId, rowId, rowMap) {\n    const cellIdentifier = `${secId}${rowId}`;\n    if (this.openCellId && this.openCellId !== cellIdentifier) {\n      this.safeCloseOpenRow();\n    }\n    this.openCellId = cellIdentifier;\n    this.props.onRowOpen && this.props.onRowOpen(secId, rowId, rowMap);\n  }\n\n  onRowPress(id) {\n    if (this.openCellId) {\n      if (this.props.closeOnRowPress) {\n        this.safeCloseOpenRow();\n        this.openCellId = null;\n      }\n    }\n  }\n  closeRow(id) {\n    if (this.openCellId) {\n      if (this.props.closeOnRowPress) {\n        this.safeCloseOpenRow();\n        this.openCellId = null;\n      }\n    }\n  }\n\n  onScroll(e) {\n    if (this.openCellId) {\n      if (this.props.closeOnScroll) {\n        this.safeCloseOpenRow();\n        this.openCellId = null;\n      }\n    }\n    this.props.onScroll && this.props.onScroll(e);\n  }\n\n  setRefs(ref) {\n    this._listView = ref;\n    this.props.listViewRef && this.props.listViewRef(ref);\n  }\n\n  renderRow(rowData, secId, rowId, rowMap) {\n    const previewRowId =\n      this.props.dataSource &&\n      this.props.dataSource.getRowIDForFlatIndex(\n        this.props.previewRowIndex || 0\n      );\n    return (\n      <SwipeRow\n        list={true}\n        ref={row => (this._rows[`${secId}${rowId}`] = row)}\n        swipeGestureBegan={_ => this.rowSwipeGestureBegan(`${secId}${rowId}`)}\n        onRowOpen={_ => this.onRowOpen(secId, rowId, this._rows)}\n        onRowDidOpen={_ =>\n          this.props.onRowDidOpen &&\n          this.props.onRowDidOpen(secId, rowId, this._rows)\n        }\n        onRowClose={_ =>\n          this.props.onRowClose &&\n          this.props.onRowClose(secId, rowId, this._rows)\n        }\n        onRowDidClose={_ =>\n          this.props.onRowDidClose &&\n          this.props.onRowDidClose(secId, rowId, this._rows)\n        }\n        onRowPress={_ => this.onRowPress(`${secId}${rowId}`)}\n        closeRow={_ => this.closeRow(`${secId}${rowId}`)}\n        setScrollEnabled={enable => this.setScrollEnabled(enable)}\n        leftOpenValue={this.props.leftOpenValue}\n        rightOpenValue={this.props.rightOpenValue}\n        closeOnRowPress={this.props.closeOnRowPress}\n        disableLeftSwipe={this.props.disableLeftSwipe}\n        disableRightSwipe={this.props.disableRightSwipe}\n        stopLeftSwipe={this.props.stopLeftSwipe}\n        stopRightSwipe={this.props.stopRightSwipe}\n        recalculateHiddenLayout={this.props.recalculateHiddenLayout}\n        style={this.props.swipeRowStyle}\n        preview={\n          (this.props.previewFirstRow || this.props.previewRowIndex) &&\n          rowId === previewRowId\n        }\n        previewDuration={this.props.previewDuration}\n        previewOpenValue={this.props.previewOpenValue}\n        tension={this.props.tension}\n        friction={this.props.friction}\n        directionalDistanceChangeThreshold={\n          this.props.directionalDistanceChangeThreshold\n        }\n        swipeToOpenPercent={this.props.swipeToOpenPercent}\n        left={\n          this.props.renderLeftHiddenRow &&\n          this.props.renderLeftHiddenRow(rowData, secId, rowId, this._rows)\n        }\n        right={\n          this.props.renderRightHiddenRow &&\n          this.props.renderRightHiddenRow(rowData, secId, rowId, this._rows)\n        }\n        body={\n          this.props.renderRow &&\n          this.props.renderRow(rowData, secId, rowId, this._rows)\n        }\n      />\n    );\n  }\n  render() {\n    if (this.props.renderLeftHiddenRow || this.props.renderRightHiddenRow) {\n      return (\n        <ListView\n          {...this.props}\n          ref={ref => {\n            this.setRefs(ref);\n            this._root = ref;\n          }}\n          enableEmptySections\n          onScroll={e => this.onScroll(e)}\n          renderRow={(rowData, secId, rowId) =>\n            this.renderRow(rowData, secId, rowId, this._rows)\n          }\n        />\n      );\n    } else if (this.state.dataSource) {\n      return (\n        <ListView\n          {...this.props}\n          ref={ref => (this._root = ref)}\n          enableEmptySections\n          dataSource={this.state.dataSource}\n          renderRow={this.props.renderRow}\n        />\n      );\n    }\n    return (\n      <View ref={c => (this._root = c)} {...this.props}>\n        {this.renderChildren()}\n      </View>\n    );\n  }\n}\nconst StyledList = connectStyle(\"NativeBase.List\", {}, mapPropsToStyleNames)(\n  List\n);\n\nexport { StyledList as List };"]}