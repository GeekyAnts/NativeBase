{"version":3,"sources":["../../../src/basic/Badge.js"],"names":["Badge","props","children","newChildren","push","paddingHorizontal","color","badgeColor","fontSize","fontSizeBase","lineHeight","textStyle","_root","c","renderChildren","childrenType","propName","component","error","prop","Children","forEach","child","console","log","type","displayName","Error","propTypes","style","PropTypes","object","StyledBadge"],"mappings":"+yBAAA,4B;AACA;;AAEA;AACA,qD;AACA,mE;;AAEMA,K;;;AAGa;AACf,GAAI,MAAO,MAAKC,KAAL,CAAWC,QAAlB,GAA+B,QAAnC,CAA6C;AAC3C,MAAO,MAAKD,KAAL,CAAWC,QAAlB;AACD,CAFD,IAEO;AACL,GAAMC,aAAc,EAApB;AACAA,YAAYC,IAAZ,CAAiB,iDAAM,IAAI,OAAV,CAAkB,MAAO,CAAC,CAAEC,kBAAmB,CAArB,CAAuBC,MAAO,mBAAUC,UAAxC,CAAoDC,SAAU,mBAAUC,YAAxE,CAAsFC,WAAY,mBAAUA,UAAV,CAAuB,CAAzH,CAAD,CAA6H,KAAKT,KAAL,CAAWU,SAAxI,CAAzB,EAA8K,KAAKV,KAAL,CAAWC,QAAzL,CAAjB;AACA,MAAOC,YAAP;AACD;AACF,C;;AAEQ;AACP;AACE,0DAAM,IAAK,sBAAK,QAAKS,KAAL,CAAaC,CAAlB,EAAX,EAAoC,KAAKZ,KAAzC;AACG,KAAKa,cAAL,EADH,CADF;;;AAKD,C;;;;AAIH,GAAMC,cAAe,QAASA,aAAT,CAAsBd,KAAtB,CAA6Be,QAA7B,CAAuCC,SAAvC,CAAkD;AACrE,GAAIC,aAAJ;AACA,GAAMC,MAAOlB,MAAMe,QAAN,CAAb;AACA,gBAAMI,QAAN,CAAeC,OAAf,CAAuBF,IAAvB,CAA6B,SAACG,KAAD,CAAW;AACtCC,QAAQC,GAAR,CAAYF,KAAZ;AACA,GAAK,MAAOA,MAAP,GAAiB,QAAlB,EAAgCA,MAAMG,IAAN,CAAWC,WAAX,GAA2B,cAA3D,EAA+EJ,MAAMG,IAAN,CAAWC,WAAX,GAA2B,cAA1G,EAA8HJ,MAAMG,IAAN,CAAWC,WAAX,GAA2B,2BAA7J,CAA2L;AACzLR,MAAQ,GAAIS,MAAJ,CAAaV,SAAb,0CAAR;AACD;AACF,CALD;AAMA,MAAOC,MAAP;AACD,CAVD;AAWAlB,MAAM4B,SAAN;AACK,kBAAKA,SADV;;AAGEC,MAAO,gBAAMC,SAAN,CAAgBC,MAHzB;;;AAMA,GAAMC,aAAc,wBAAa,kBAAb,CAAiC,EAAjC,iCAA2DhC,KAA3D,CAApB,C;;;AAGiBA,K,CAAfgC,W","file":"Badge.js","sourcesContent":["import React, { Component } from 'react';\nimport { View, Text } from 'react-native';\n\nimport { connectStyle } from '@shoutem/theme';\nimport variables from '../theme/variables/platform';\nimport mapPropsToStyleNames from '../Utils/mapPropsToStyleNames';\n\nclass Badge extends Component {\n\n\n  renderChildren() {\n    if (typeof this.props.children !== 'string') {\n      return this.props.children;\n    } else {\n      const newChildren = [];\n      newChildren.push(<Text key=\"label\" style={[{ paddingHorizontal: 3,color: variables.badgeColor, fontSize: variables.fontSizeBase, lineHeight: variables.lineHeight - 1},this.props.textStyle]}>{this.props.children}</Text>);\n      return newChildren;\n    }\n  }\n\n  render() {\n    return (\n      <View ref={c => this._root = c} {...this.props}>\n        {this.renderChildren()}\n      </View>\n    );\n  }\n\n  }\n\nconst childrenType = function childrenType(props, propName, component) {\n  let error;\n  const prop = props[propName];\n  React.Children.forEach(prop, (child) => {\n    console.log(child);\n    if ((typeof child !== 'string') && (child.type.displayName !== 'Styled(Icon)') && (child.type.displayName !== 'Styled(Text)') && (child.type.displayName !== 'Styled(AnimatedComponent)')) {\n      error = new Error(`${component} can have only Text or Icon components`);\n    }\n  });\n  return error;\n};\nBadge.propTypes = {\n  ...View.propTypes,\n//   children: childrenType,\n  style: React.PropTypes.object,\n};\n\nconst StyledBadge = connectStyle('NativeBase.Badge', {}, mapPropsToStyleNames)(Badge);\n\nexport {\n  StyledBadge as Badge,\n};\n"]}