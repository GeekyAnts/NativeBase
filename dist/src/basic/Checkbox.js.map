{"version":3,"sources":["../../../src/basic/Checkbox.js"],"names":["CheckBox","variables","checkStyle","borderColor","props","color","checkboxBgColor","backgroundColor","checked","defaultProps","style","getInitialStyle","context","theme","variable","platformStyle","platform","_root","c","prepareRootProps","checkboxTickColor","fontSize","CheckboxFontSize","lineHeight","CheckboxIconSize","marginTop","CheckboxIconMarginTop","textShadowRadius","Component","contextTypes","PropTypes","object","propTypes","TouchableOpacity","oneOfType","number","array","bool","onPress","func","StyledCheckBox","mapPropsToStyleNames"],"mappings":"21BAAA,4B,2CACA,qC,mDACA,yCACA,4D,iDACA,iEACA,mE,yEACA,qD,iDACA,8B,6CACA,mD,67BAEMA,S,0SAKYC,S,CAAW,CACzB,MAAO,CACLC,WAAY,CACVC,YAAa,KAAKC,KAAL,CAAWC,KAAX,CACT,KAAKD,KAAL,CAAWC,KADF,CAETJ,UAAUK,eAHJ,CAIVC,gBACE,KAAKH,KAAL,CAAWI,OAAX,GAAuB,IAAvB,CACI,KAAKJ,KAAL,CAAWC,KAAX,CACE,KAAKD,KAAL,CAAWC,KADb,CAEEJ,UAAUK,eAHhB,CAII,aATI,CADP,CAAP,CAaD,C,0DAEgBL,S,CAAW,CAC1B,GAAMQ,cAAe,CACnBC,MAAO,KAAKC,eAAL,CAAqBV,SAArB,EAAgCC,UADpB,CAArB,CAIA,MAAO,2BAAa,KAAKE,KAAlB,CAAyBK,YAAzB,CAAP,CACD,C,uCACQ,iBACP,GAAMR,WAAY,KAAKW,OAAL,CAAaC,KAAb,CACd,KAAKD,OAAL,CAAaC,KAAb,CAAmB,4BAAnB,EAAiDZ,SADnC,CAEda,kBAFJ,CAGA,GAAMC,eAAgBd,UAAUc,aAAhC,CACA,GAAMC,UAAWf,UAAUe,QAA3B,CACA,MACE,+BAAC,6BAAD,WACE,IAAK,sBAAM,QAAKC,KAAL,CAAaC,CAAnB,EADP,EAEM,KAAKC,gBAAL,CAAsBlB,SAAtB,CAFN,mDAIE,8BAAC,kBAAD,EACE,MAAO,CACLI,MACE,KAAKD,KAAL,CAAWI,OAAX,GAAuB,IAAvB,CACIP,UAAUmB,iBADd,CAEI,aAJD,CAKLC,SAAUpB,UAAUqB,gBALf,CAMLC,WAAYtB,UAAUuB,gBANjB,CAOLC,UAAWxB,UAAUyB,qBAPhB,CAQLC,iBAAkB,CARb,CADT,CAWE,KACEX,WAAa,KAAb,EAAsBD,gBAAkB,UAAxC,CACI,eADJ,CAEI,cAdR,iDAJF,CADF,CAwBD,C,sBA1DoBa,gB,EAAjB5B,Q,CACG6B,Y,CAAe,CACpBhB,MAAOiB,oBAAUC,MADG,C,CA4DxB/B,SAASgC,SAAT,aACKC,8BAAiBD,SADtB,EAEEtB,MAAOoB,oBAAUI,SAAV,CAAoB,CACzBJ,oBAAUC,MADe,CAEzBD,oBAAUK,MAFe,CAGzBL,oBAAUM,KAHe,CAApB,CAFT,CAOE5B,QAASsB,oBAAUO,IAPrB,CAQEC,QAASR,oBAAUS,IARrB,GAWA,GAAMC,gBAAiB,yCACrB,qBADqB,CAErB,EAFqB,CAGrBC,8BAHqB,EAIrBzC,QAJqB,CAAvB,C,QAM2BA,Q,CAAlBwC,c","file":"Checkbox.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { TouchableOpacity, Platform } from \"react-native\";\nimport IconNB from \"react-native-vector-icons/Ionicons\";\nimport { connectStyle } from \"native-base-shoutem-theme\";\nimport mapPropsToStyleNames from \"../utils/mapPropsToStyleNames\";\nimport variable from \"../theme/variables/platform\";\nimport _ from \"lodash\";\nimport computeProps from \"../utils/computeProps\";\n\nclass CheckBox extends Component {\n  static contextTypes = {\n    theme: PropTypes.object\n  };\n\n  getInitialStyle(variables) {\n    return {\n      checkStyle: {\n        borderColor: this.props.color\n          ? this.props.color\n          : variables.checkboxBgColor,\n        backgroundColor:\n          this.props.checked === true\n            ? this.props.color\n              ? this.props.color\n              : variables.checkboxBgColor\n            : \"transparent\"\n      }\n    };\n  }\n\n  prepareRootProps(variables) {\n    const defaultProps = {\n      style: this.getInitialStyle(variables).checkStyle\n    };\n\n    return computeProps(this.props, defaultProps);\n  }\n  render() {\n    const variables = this.context.theme\n      ? this.context.theme[\"@@shoutem.theme/themeStyle\"].variables\n      : variable;\n    const platformStyle = variables.platformStyle;\n    const platform = variables.platform;\n    return (\n      <TouchableOpacity\n        ref={c => (this._root = c)}\n        {...this.prepareRootProps(variables)}\n      >\n        <IconNB\n          style={{\n            color:\n              this.props.checked === true\n                ? variables.checkboxTickColor\n                : \"transparent\",\n            fontSize: variables.CheckboxFontSize,\n            lineHeight: variables.CheckboxIconSize,\n            marginTop: variables.CheckboxIconMarginTop,\n            textShadowRadius: 0\n          }}\n          name={\n            platform === \"ios\" && platformStyle !== \"material\"\n              ? \"ios-checkmark\"\n              : \"md-checkmark\"\n          }\n        />\n      </TouchableOpacity>\n    );\n  }\n}\n\nCheckBox.propTypes = {\n  ...TouchableOpacity.propTypes,\n  style: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number,\n    PropTypes.array\n  ]),\n  checked: PropTypes.bool,\n  onPress: PropTypes.func\n};\n\nconst StyledCheckBox = connectStyle(\n  \"NativeBase.CheckBox\",\n  {},\n  mapPropsToStyleNames\n)(CheckBox);\n\nexport { StyledCheckBox as CheckBox };\n"]}