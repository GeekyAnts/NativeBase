{"version":3,"sources":["../../../src/basic/Checkbox.js"],"names":["CheckBox","variables","props","color","checked","checkStyle","borderColor","checkboxBgColor","backgroundColor","checkboxDefaultColor","defaultProps","style","getInitialStyle","context","theme","variable","platformStyle","platform","_root","c","prepareRootProps","checkboxTickColor","fontSize","CheckboxFontSize","lineHeight","CheckboxIconSize","marginTop","CheckboxIconMarginTop","textShadowRadius","checkboxTextShadowRadius","PLATFORM","IOS","MATERIAL","Component","contextTypes","PropTypes","object","propTypes","TouchableOpacity","oneOfType","number","array","bool","onPress","func","StyledCheckBox","mapPropsToStyleNames"],"mappings":"21BAAA,4B,2CACA,qC,mDACA,yCACA,4D,iDACA,iEAEA,mE,yEACA,qD,iDACA,2DACA,mD,67BAEMA,S,0SAKYC,S,CAAW,YACE,KAAKC,KADP,CACjBC,KADiB,QACjBA,KADiB,CACVC,OADU,QACVA,OADU,CAEzB,MAAO,CACLC,WAAY,CACVC,YAAaH,OAASF,UAAUM,eADtB,CAEVC,gBACEJ,UAAY,IAAZ,CACID,OAASF,UAAUM,eADvB,CAEIN,UAAUQ,oBALN,CADP,CAAP,CASD,C,0DAEgBR,S,CAAW,CAC1B,GAAMS,cAAe,CACnBC,MAAO,KAAKC,eAAL,CAAqBX,SAArB,EAAgCI,UADpB,CAArB,CAIA,MAAO,2BAAa,KAAKH,KAAlB,CAAyBQ,YAAzB,CAAP,CACD,C,uCACQ,oBACCN,QADD,CACa,KAAKF,KADlB,CACCE,OADD,CAEP,GAAMH,WAAY,KAAKY,OAAL,CAAaC,KAAb,CACd,KAAKD,OAAL,CAAaC,KAAb,CAAmB,4BAAnB,EAAiDb,SADnC,CAEdc,kBAFJ,CAGA,GAAMC,eAAgBf,UAAUe,aAAhC,CACA,GAAMC,UAAWhB,UAAUgB,QAA3B,CACA,MACE,+BAAC,6BAAD,WACE,IAAK,sBAAM,QAAKC,KAAL,CAAaC,CAAnB,EADP,EAEM,KAAKC,gBAAL,CAAsBnB,SAAtB,CAFN,mDAIE,8BAAC,kBAAD,EACE,MAAO,CACLE,MACEC,UAAY,IAAZ,CACIH,UAAUoB,iBADd,CAEIpB,UAAUQ,oBAJX,CAKLa,SAAUrB,UAAUsB,gBALf,CAMLC,WAAYvB,UAAUwB,gBANjB,CAOLC,UAAWzB,UAAU0B,qBAPhB,CAQLC,iBAAkB3B,UAAU4B,wBARvB,CADT,CAWE,KACEZ,WAAaa,sBAASC,GAAtB,EAA6Bf,gBAAkBc,sBAASE,QAAxD,CACI,eADJ,CAEI,cAdR,iDAJF,CADF,CAwBD,C,sBAxDoBC,gB,EAAjBjC,Q,CACGkC,Y,CAAe,CACpBpB,MAAOqB,oBAAUC,MADG,C,CA0DxBpC,SAASqC,SAAT,aACKC,8BAAiBD,SADtB,EAEE1B,MAAOwB,oBAAUI,SAAV,CAAoB,CACzBJ,oBAAUC,MADe,CAEzBD,oBAAUK,MAFe,CAGzBL,oBAAUM,KAHe,CAApB,CAFT,CAOErC,QAAS+B,oBAAUO,IAPrB,CAQEC,QAASR,oBAAUS,IARrB,GAWA,GAAMC,gBAAiB,yCACrB,qBADqB,CAErB,EAFqB,CAGrBC,8BAHqB,EAIrB9C,QAJqB,CAAvB,C,QAM2BA,Q,CAAlB6C,c","file":"Checkbox.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { TouchableOpacity } from 'react-native';\nimport IconNB from 'react-native-vector-icons/Ionicons';\nimport { connectStyle } from 'native-base-shoutem-theme';\n\nimport mapPropsToStyleNames from '../utils/mapPropsToStyleNames';\nimport variable from '../theme/variables/platform';\nimport { PLATFORM } from '../theme/variables/commonColor';\nimport computeProps from '../utils/computeProps';\n\nclass CheckBox extends Component {\n  static contextTypes = {\n    theme: PropTypes.object\n  };\n\n  getInitialStyle(variables) {\n    const { color, checked } = this.props;\n    return {\n      checkStyle: {\n        borderColor: color || variables.checkboxBgColor,\n        backgroundColor:\n          checked === true\n            ? color || variables.checkboxBgColor\n            : variables.checkboxDefaultColor\n      }\n    };\n  }\n\n  prepareRootProps(variables) {\n    const defaultProps = {\n      style: this.getInitialStyle(variables).checkStyle\n    };\n\n    return computeProps(this.props, defaultProps);\n  }\n  render() {\n    const { checked } = this.props;\n    const variables = this.context.theme\n      ? this.context.theme['@@shoutem.theme/themeStyle'].variables\n      : variable;\n    const platformStyle = variables.platformStyle;\n    const platform = variables.platform;\n    return (\n      <TouchableOpacity\n        ref={c => (this._root = c)}\n        {...this.prepareRootProps(variables)}\n      >\n        <IconNB\n          style={{\n            color:\n              checked === true\n                ? variables.checkboxTickColor\n                : variables.checkboxDefaultColor,\n            fontSize: variables.CheckboxFontSize,\n            lineHeight: variables.CheckboxIconSize,\n            marginTop: variables.CheckboxIconMarginTop,\n            textShadowRadius: variables.checkboxTextShadowRadius\n          }}\n          name={\n            platform === PLATFORM.IOS && platformStyle !== PLATFORM.MATERIAL\n              ? 'ios-checkmark'\n              : 'md-checkmark'\n          }\n        />\n      </TouchableOpacity>\n    );\n  }\n}\n\nCheckBox.propTypes = {\n  ...TouchableOpacity.propTypes,\n  style: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number,\n    PropTypes.array\n  ]),\n  checked: PropTypes.bool,\n  onPress: PropTypes.func\n};\n\nconst StyledCheckBox = connectStyle(\n  'NativeBase.CheckBox',\n  {},\n  mapPropsToStyleNames\n)(CheckBox);\n\nexport { StyledCheckBox as CheckBox };\n"]}