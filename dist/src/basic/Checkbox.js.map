{"version":3,"sources":["../../../src/basic/Checkbox.js"],"names":["CheckBox","variables","checkStyle","borderColor","props","color","checkboxBgColor","backgroundColor","checked","defaultProps","style","getInitialStyle","context","theme","platformStyle","platform","_root","c","prepareRootProps","checkboxTickColor","fontSize","CheckboxFontSize","lineHeight","CheckboxIconSize","contextTypes","object","propTypes","oneOfType","number","array","bool","onPress","func","StyledCheckBox"],"mappings":"61BAAA,4B;AACA,qC;AACA;AACA,4D;AACA;AACA,mE;AACA,qD;AACA,8B;AACA,mD;;AAEMA,Q;;;;;AAKWC,S,CAAW;AAC1B,MAAO;AACNC,WAAY;AACXC,YAAa,KAAKC,KAAL,CAAWC,KAAX,CAAmB,KAAKD,KAAL,CAAWC,KAA9B,CAAsCJ,UAAUK,eADlD;AAEXC;AACC,KAAKH,KAAL,CAAWI,OAAX,GAAuB,IAAvB;AACG,KAAKJ,KAAL,CAAWC,KAAX,CAAmB,KAAKD,KAAL,CAAWC,KAA9B,CAAsCJ,UAAUK,eADnD;AAEG,aALO,CADN,CAAP;;;AASA,C;;AAEgBL,S,CAAW;AAC3B,GAAMQ,cAAe;AACpBC,MAAO,KAAKC,eAAL,CAAqBV,SAArB,EAAgCC,UADnB,CAArB;;;AAIA,MAAO,2BAAa,KAAKE,KAAlB,CAAyBK,YAAzB,CAAP;AACA,C;AACQ;AACR,GAAMR,WAAY,KAAKW,OAAL,CAAaC,KAAb,CAAqB,KAAKD,OAAL,CAAaC,KAAb,CAAmB,4BAAnB,EAAiDZ,SAAtE,mBAAlB;AACA,GAAMa,eAAgBb,UAAUa,aAAhC;AACA,GAAMC,UAAWd,UAAUc,QAA3B;AACA;AACC,sEAAkB,IAAK,sBAAM,QAAKC,KAAL,CAAaC,CAAnB,EAAvB,EAAkD,KAAKC,gBAAL,CAAsBjB,SAAtB,CAAlD;AACC;AACC,MAAO;AACNI,MAAO,KAAKD,KAAL,CAAWI,OAAX,GAAuB,IAAvB,CAA8BP,UAAUkB,iBAAxC,CAA4D,aAD7D;AAENC,SAAUnB,UAAUoB,gBAFd;AAGNC,WAAYrB,UAAUsB,gBAHhB,CADR;;AAMC,KAAMR,WAAa,KAAb,EAAsBD,gBAAkB,UAAxC,CAAqD,uBAArD,CAA+E,cANtF,iDADD,CADD;;;;AAYA,C,wCAxCId,Q,CACEwB,Y,CAAe,CACrBX,MAAO,oBAAUY,MADI,C;;;AA0CvBzB,SAAS0B,SAAT;AACI,8BAAiBA,SADrB;AAEChB,MAAO,oBAAUiB,SAAV,CAAoB,CAAC,oBAAUF,MAAX,CAAmB,oBAAUG,MAA7B,CAAqC,oBAAUC,KAA/C,CAApB,CAFR;AAGCrB,QAAS,oBAAUsB,IAHpB;AAICC,QAAS,oBAAUC,IAJpB;;;AAOA,GAAMC,gBAAiB,yCAAa,qBAAb,CAAoC,EAApC,iCAA8DjC,QAA9D,CAAvB,C;;AAE2BA,Q,CAAlBiC,c","file":"Checkbox.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { TouchableOpacity, Platform } from \"react-native\";\r\nimport IconNB from \"react-native-vector-icons/Ionicons\";\r\nimport { connectStyle } from \"native-base-shoutem-theme\";\r\nimport mapPropsToStyleNames from \"../Utils/mapPropsToStyleNames\";\r\nimport variable from \"../theme/variables/platform\";\r\nimport _ from \"lodash\";\r\nimport computeProps from \"../Utils/computeProps\";\r\n\r\nclass CheckBox extends Component {\r\n\tstatic contextTypes = {\r\n\t\ttheme: PropTypes.object,\r\n\t};\r\n\r\n\tgetInitialStyle(variables) {\r\n\t\treturn {\r\n\t\t\tcheckStyle: {\r\n\t\t\t\tborderColor: this.props.color ? this.props.color : variables.checkboxBgColor,\r\n\t\t\t\tbackgroundColor:\r\n\t\t\t\t\tthis.props.checked === true\r\n\t\t\t\t\t\t? this.props.color ? this.props.color : variables.checkboxBgColor\r\n\t\t\t\t\t\t: \"transparent\",\r\n\t\t\t},\r\n\t\t};\r\n\t}\r\n\r\n\tprepareRootProps(variables) {\r\n\t\tconst defaultProps = {\r\n\t\t\tstyle: this.getInitialStyle(variables).checkStyle,\r\n\t\t};\r\n\r\n\t\treturn computeProps(this.props, defaultProps);\r\n\t}\r\n\trender() {\r\n\t\tconst variables = this.context.theme ? this.context.theme[\"@@shoutem.theme/themeStyle\"].variables : variable;\r\n\t\tconst platformStyle = variables.platformStyle;\r\n\t\tconst platform = variables.platform;\r\n\t\treturn (\r\n\t\t\t<TouchableOpacity ref={c => (this._root = c)} {...this.prepareRootProps(variables)}>\r\n\t\t\t\t<IconNB\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tcolor: this.props.checked === true ? variables.checkboxTickColor : \"transparent\",\r\n\t\t\t\t\t\tfontSize: variables.CheckboxFontSize,\r\n\t\t\t\t\t\tlineHeight: variables.CheckboxIconSize,\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tname={platform === \"ios\" && platformStyle !== \"material\" ? \"ios-checkmark-outline\" : \"md-checkmark\"}\r\n\t\t\t\t/>\r\n\t\t\t</TouchableOpacity>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nCheckBox.propTypes = {\r\n\t...TouchableOpacity.propTypes,\r\n\tstyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\r\n\tchecked: PropTypes.bool,\r\n\tonPress: PropTypes.func,\r\n};\r\n\r\nconst StyledCheckBox = connectStyle(\"NativeBase.CheckBox\", {}, mapPropsToStyleNames)(CheckBox);\r\n\r\nexport { StyledCheckBox as CheckBox };\r\n"]}