{"version":3,"sources":["../../../src/basic/Checkbox.js"],"names":["CheckBox","variables","checkStyle","borderColor","props","color","checkboxBgColor","backgroundColor","checked","defaultProps","style","getInitialStyle","context","theme","variable","platformStyle","platform","_root","c","prepareRootProps","checkboxTickColor","fontSize","CheckboxFontSize","lineHeight","CheckboxIconSize","marginTop","CheckboxIconMarginTop","textShadowRadius","Component","contextTypes","PropTypes","object","propTypes","TouchableOpacity","oneOfType","number","array","bool","onPress","func","StyledCheckBox","mapPropsToStyleNames"],"mappings":"21BAAA,4B,2CACA,qC,mDACA,yCACA,4D,iDACA,iEACA,mE,yEACA,qD,iDACA,8B,6CACA,mD,67BAEMA,S,0SAKWC,S,CAAW,CAC1B,MAAO,CACNC,WAAY,CACXC,YAAa,KAAKC,KAAL,CAAWC,KAAX,CAAmB,KAAKD,KAAL,CAAWC,KAA9B,CAAsCJ,UAAUK,eADlD,CAEXC,gBACC,KAAKH,KAAL,CAAWI,OAAX,GAAuB,IAAvB,CACG,KAAKJ,KAAL,CAAWC,KAAX,CAAmB,KAAKD,KAAL,CAAWC,KAA9B,CAAsCJ,UAAUK,eADnD,CAEG,aALO,CADN,CAAP,CASA,C,0DAEgBL,S,CAAW,CAC3B,GAAMQ,cAAe,CACpBC,MAAO,KAAKC,eAAL,CAAqBV,SAArB,EAAgCC,UADnB,CAArB,CAIA,MAAO,2BAAa,KAAKE,KAAlB,CAAyBK,YAAzB,CAAP,CACA,C,uCACQ,iBACR,GAAMR,WAAY,KAAKW,OAAL,CAAaC,KAAb,CAAqB,KAAKD,OAAL,CAAaC,KAAb,CAAmB,4BAAnB,EAAiDZ,SAAtE,CAAkFa,kBAApG,CACA,GAAMC,eAAgBd,UAAUc,aAAhC,CACA,GAAMC,UAAWf,UAAUe,QAA3B,CACA,MACC,+BAAC,6BAAD,WAAkB,IAAK,sBAAM,QAAKC,KAAL,CAAaC,CAAnB,EAAvB,EAAkD,KAAKC,gBAAL,CAAsBlB,SAAtB,CAAlD,mDACC,8BAAC,kBAAD,EACC,MAAO,CACNI,MAAO,KAAKD,KAAL,CAAWI,OAAX,GAAuB,IAAvB,CAA8BP,UAAUmB,iBAAxC,CAA4D,aAD7D,CAENC,SAAUpB,UAAUqB,gBAFd,CAGNC,WAAYtB,UAAUuB,gBAHhB,CAINC,UAAWxB,UAAUyB,qBAJf,CAKNC,iBAAkB,CALZ,CADR,CAQC,KAAMX,WAAa,KAAb,EAAsBD,gBAAkB,UAAxC,CAAqD,uBAArD,CAA+E,cARtF,iDADD,CADD,CAcA,C,sBA1CqBa,gB,EAAjB5B,Q,CACE6B,Y,CAAe,CACrBhB,MAAOiB,oBAAUC,MADI,C,CA4CvB/B,SAASgC,SAAT,aACIC,8BAAiBD,SADrB,EAECtB,MAAOoB,oBAAUI,SAAV,CAAoB,CAACJ,oBAAUC,MAAX,CAAmBD,oBAAUK,MAA7B,CAAqCL,oBAAUM,KAA/C,CAApB,CAFR,CAGC5B,QAASsB,oBAAUO,IAHpB,CAICC,QAASR,oBAAUS,IAJpB,GAOA,GAAMC,gBAAiB,yCAAa,qBAAb,CAAoC,EAApC,CAAwCC,8BAAxC,EAA8DzC,QAA9D,CAAvB,C,QAE2BA,Q,CAAlBwC,c","file":"Checkbox.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { TouchableOpacity, Platform } from \"react-native\";\nimport IconNB from \"react-native-vector-icons/Ionicons\";\nimport { connectStyle } from \"native-base-shoutem-theme\";\nimport mapPropsToStyleNames from \"../utils/mapPropsToStyleNames\";\nimport variable from \"../theme/variables/platform\";\nimport _ from \"lodash\";\nimport computeProps from \"../utils/computeProps\";\n\nclass CheckBox extends Component {\n\tstatic contextTypes = {\n\t\ttheme: PropTypes.object,\n\t};\n\n\tgetInitialStyle(variables) {\n\t\treturn {\n\t\t\tcheckStyle: {\n\t\t\t\tborderColor: this.props.color ? this.props.color : variables.checkboxBgColor,\n\t\t\t\tbackgroundColor:\n\t\t\t\t\tthis.props.checked === true\n\t\t\t\t\t\t? this.props.color ? this.props.color : variables.checkboxBgColor\n\t\t\t\t\t\t: \"transparent\",\n\t\t\t},\n\t\t};\n\t}\n\n\tprepareRootProps(variables) {\n\t\tconst defaultProps = {\n\t\t\tstyle: this.getInitialStyle(variables).checkStyle,\n\t\t};\n\n\t\treturn computeProps(this.props, defaultProps);\n\t}\n\trender() {\n\t\tconst variables = this.context.theme ? this.context.theme[\"@@shoutem.theme/themeStyle\"].variables : variable;\n\t\tconst platformStyle = variables.platformStyle;\n\t\tconst platform = variables.platform;\n\t\treturn (\n\t\t\t<TouchableOpacity ref={c => (this._root = c)} {...this.prepareRootProps(variables)}>\n\t\t\t\t<IconNB\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tcolor: this.props.checked === true ? variables.checkboxTickColor : \"transparent\",\n\t\t\t\t\t\tfontSize: variables.CheckboxFontSize,\n\t\t\t\t\t\tlineHeight: variables.CheckboxIconSize,\n\t\t\t\t\t\tmarginTop: variables.CheckboxIconMarginTop,\n\t\t\t\t\t\ttextShadowRadius: 0\n\t\t\t\t\t}}\n\t\t\t\t\tname={platform === \"ios\" && platformStyle !== \"material\" ? \"ios-checkmark-outline\" : \"md-checkmark\"}\n\t\t\t\t/>\n\t\t\t</TouchableOpacity>\n\t\t);\n\t}\n}\n\nCheckBox.propTypes = {\n\t...TouchableOpacity.propTypes,\n\tstyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\n\tchecked: PropTypes.bool,\n\tonPress: PropTypes.func,\n};\n\nconst StyledCheckBox = connectStyle(\"NativeBase.CheckBox\", {}, mapPropsToStyleNames)(CheckBox);\n\nexport { StyledCheckBox as CheckBox };\n"]}