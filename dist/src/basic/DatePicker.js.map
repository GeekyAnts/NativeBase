{"version":3,"sources":["../../../src/basic/DatePicker.js"],"names":["DatePicker","props","componentDidMount","setState","defaultDate","Date","state","modalVisible","chosenDate","undefined","date","onDateChange","Platform","OS","openAndroidDatePicker","DatePickerAndroid","open","minDate","minimumDate","maxDate","maximumDate","mode","androidMode","newDate","action","year","month","day","selectedDate","code","message","console","warn","variables","context","theme","variable","showDatePicker","bind","padding","color","datePickerTextColor","textStyle","placeHolderTextStyle","getDate","getMonth","getFullYear","placeHolderText","animationType","modalTransparent","backgroundColor","datePickerBg","flex","setDate","locale","timeZoneOffsetInMinutes","React","Component"],"mappings":"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","file":"DatePicker.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Modal,\r\n  View,\r\n  Platform,\r\n  DatePickerIOS,\r\n  DatePickerAndroid\r\n} from \"react-native\";\r\nimport { Text } from \"native-base\";\r\nimport variable from \"../theme/variables/platform\";\r\n\r\nexport class DatePicker extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      modalVisible: false,\r\n      defaultDate: new Date(),\r\n      chosenDate: undefined\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.setState({\r\n      defaultDate: this.props.defaultDate ? this.props.defaultDate : new Date()\r\n    });\r\n  };\r\n\r\n  setDate(date) {\r\n    this.setState({ chosenDate: new Date(date) });\r\n    if (this.props.onDateChange) {\r\n      this.props.onDateChange(date);\r\n    }\r\n  }\r\n\r\n  showDatePicker() {\r\n    if (Platform.OS === \"android\") {\r\n      this.openAndroidDatePicker();\r\n    } else {\r\n      this.setState({ modalVisible: true });\r\n    }\r\n  }\r\n\r\n  async openAndroidDatePicker() {\r\n    try {\r\n      const newDate = await DatePickerAndroid.open({\r\n        date: this.state.chosenDate\r\n          ? this.state.chosenDate\r\n          : this.state.defaultDate,\r\n        minDate: this.props.minimumDate,\r\n        maxDate: this.props.maximumDate,\r\n        mode: this.props.androidMode\r\n      });\r\n      const { action, year, month, day } = newDate;\r\n      if (action === \"dateSetAction\") {\r\n        let selectedDate = new Date(year, month, day);\r\n        this.setState({ chosenDate: selectedDate });\r\n        this.props.onDateChange(selectedDate);\r\n      }\r\n    } catch ({ code, message }) {\r\n      console.warn(\"Cannot open date picker\", message);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const variables = this.context.theme\r\n      ? this.context.theme[\"@@shoutem.theme/themeStyle\"].variables\r\n      : variable;\r\n    return (\r\n      <View>\r\n        <View>\r\n          <Text\r\n            onPress={this.showDatePicker.bind(this)}\r\n            style={[\r\n              { padding: 10, color: variables.datePickerTextColor },\r\n              this.state.chosenDate ? this.props.textStyle : this.props.placeHolderTextStyle\r\n            ]}\r\n          >\r\n            {this.state.chosenDate\r\n              ? this.state.chosenDate.getDate() +\r\n                \"/\" +\r\n                (this.state.chosenDate.getMonth() + 1) +\r\n                \"/\" +\r\n                +this.state.chosenDate.getFullYear()\r\n                : this.props.placeHolderText\r\n                  ? this.props.placeHolderText\r\n                  : \"Select Date\"}\r\n          </Text>\r\n          <View>\r\n            <Modal\r\n              animationType={this.props.animationType}\r\n              transparent={this.props.modalTransparent} //from api\r\n              visible={this.state.modalVisible}\r\n              onRequestClose={() => {}}\r\n            >\r\n              <Text\r\n                onPress={() => this.setState({ modalVisible: false })}\r\n                style={{ backgroundColor: variables.datePickerBg, flex: 1 }}\r\n              />\r\n              <DatePickerIOS\r\n                date={\r\n                  this.state.chosenDate\r\n                    ? this.state.chosenDate\r\n                    : this.state.defaultDate\r\n                }\r\n                onDateChange={this.setDate.bind(this)}\r\n                minimumDate={this.props.minimumDate}\r\n                maximumDate={this.props.maximumDate}\r\n                mode=\"date\"\r\n                locale={this.props.locale}\r\n                timeZoneOffsetInMinutes={this.props.timeZoneOffsetInMinutes}\r\n              />\r\n            </Modal>\r\n          </View>\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n"]}