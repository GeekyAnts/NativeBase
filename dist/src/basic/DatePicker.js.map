{"version":3,"sources":["../../../src/basic/DatePicker.js"],"names":["DatePicker","props","showDatePicker","Platform","OS","PLATFORM","ANDROID","openAndroidDatePicker","setState","modalVisible","state","defaultDate","Date","chosenDate","placeHolderText","undefined","date","onDateChange","DatePickerAndroid","open","minDate","minimumDate","maxDate","maximumDate","mode","androidMode","newDate","action","year","month","day","selectedDate","code","message","console","warn","formatChosenDate","getDate","getMonth","getFullYear","join","animationType","disabled","locale","modalTransparent","placeHolderTextStyle","textStyle","timeZoneOffsetInMinutes","variables","context","theme","variable","padding","datePickerPadding","color","datePickerTextColor","backgroundColor","datePickerBg","flex","datePickerFlex","setDate","React","Component","defaultProps"],"mappings":"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","file":"DatePicker.js","sourcesContent":["import React from 'react';\r\nimport {\r\n  Modal,\r\n  View,\r\n  Platform,\r\n  DatePickerIOS,\r\n  DatePickerAndroid\r\n} from 'react-native';\r\n\r\nimport variable from '../theme/variables/platform';\r\nimport { PLATFORM } from '../theme/variables/commonColor';\r\n\r\nimport { Text } from './Text';\r\n\r\nexport class DatePicker extends React.Component {\r\n  static defaultProps = {\r\n    disabled: false\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      modalVisible: false,\r\n      defaultDate: props.defaultDate ? props.defaultDate : new Date(),\r\n      chosenDate:\r\n        !props.placeHolderText && props.defaultDate\r\n          ? props.defaultDate\r\n          : undefined\r\n    };\r\n  }\r\n\r\n  setDate(date) {\r\n    this.setState({ chosenDate: new Date(date) });\r\n    if (this.props.onDateChange) {\r\n      this.props.onDateChange(date);\r\n    }\r\n  }\r\n\r\n  showDatePicker = () => {\r\n    if (Platform.OS === PLATFORM.ANDROID) {\r\n      this.openAndroidDatePicker();\r\n    } else {\r\n      this.setState({ modalVisible: true });\r\n    }\r\n  };\r\n\r\n  async openAndroidDatePicker() {\r\n    try {\r\n      const newDate = await DatePickerAndroid.open({\r\n        date: this.state.chosenDate\r\n          ? this.state.chosenDate\r\n          : this.state.defaultDate,\r\n        minDate: this.props.minimumDate,\r\n        maxDate: this.props.maximumDate,\r\n        mode: this.props.androidMode\r\n      });\r\n      const { action, year, month, day } = newDate;\r\n      if (action === 'dateSetAction') {\r\n        const selectedDate = new Date(year, month, day);\r\n        this.setState({ chosenDate: selectedDate });\r\n        this.props.onDateChange(selectedDate);\r\n      }\r\n    } catch ({ code, message }) {\r\n      console.warn('Cannot open date picker', message);\r\n    }\r\n  }\r\n\r\n  formatChosenDate(date) {\r\n    if (this.props.formatChosenDate) {\r\n      return this.props.formatChosenDate(date);\r\n    }\r\n    return [date.getDate(), date.getMonth() + 1, date.getFullYear()].join('/');\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      animationType,\r\n      disabled,\r\n      locale,\r\n      maximumDate,\r\n      minimumDate,\r\n      modalTransparent,\r\n      placeHolderText,\r\n      placeHolderTextStyle,\r\n      textStyle,\r\n      timeZoneOffsetInMinutes\r\n    } = this.props;\r\n\r\n    const variables = this.context.theme\r\n      ? this.context.theme['@@shoutem.theme/themeStyle'].variables\r\n      : variable;\r\n\r\n    return (\r\n      <View>\r\n        <View>\r\n          <Text\r\n            onPress={() => (!disabled ? this.showDatePicker() : undefined)}\r\n            style={[\r\n              {\r\n                padding: variables.datePickerPadding,\r\n                color: variables.datePickerTextColor\r\n              },\r\n              this.state.chosenDate ? textStyle : placeHolderTextStyle\r\n            ]}\r\n          >\r\n            {this.state.chosenDate\r\n              ? this.formatChosenDate(this.state.chosenDate)\r\n              : placeHolderText || 'Select Date'}\r\n          </Text>\r\n          <View>\r\n            <Modal\r\n              supportedOrientations={['portrait', 'landscape']}\r\n              animationType={animationType}\r\n              transparent={modalTransparent} // from api\r\n              visible={this.state.modalVisible}\r\n              onRequestClose={() => {}}\r\n            >\r\n              <Text\r\n                onPress={() => this.setState({ modalVisible: false })}\r\n                style={{\r\n                  backgroundColor: variables.datePickerBg,\r\n                  flex: variables.datePickerFlex\r\n                }}\r\n              />\r\n              <DatePickerIOS\r\n                date={\r\n                  this.state.chosenDate\r\n                    ? this.state.chosenDate\r\n                    : this.state.defaultDate\r\n                }\r\n                onDateChange={date => this.setDate(date)}\r\n                minimumDate={minimumDate}\r\n                maximumDate={maximumDate}\r\n                mode=\"date\"\r\n                locale={locale}\r\n                timeZoneOffsetInMinutes={timeZoneOffsetInMinutes}\r\n              />\r\n            </Modal>\r\n          </View>\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n"]}