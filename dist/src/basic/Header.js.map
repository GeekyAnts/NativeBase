{"version":3,"sources":["../../../src/basic/Header.js"],"names":["Header","props","state","orientation","val","maxComp","Math","max","variable","deviceWidth","deviceHeight","width","setState","mode","inSet","inset","undefined","Inset","InsetValues","portrait","landscape","oldHeight","style","height","topInset","topPadder","StyleSheet","flatten","padding","paddingTop","variables","context","theme","platformStyle","layoutChange","e","nativeEvent","layout","androidStatusBarColor","statusBarColor","iosBarStyle","iosStatusbar","transparent","translucent","isIphoneX","_root","c","calculateHeight","calculatePadder","Component","contextTypes","PropTypes","object","propTypes","ViewPropTypes","oneOfType","number","array","searchBar","bool","rounded","StyledHeader","mapPropsToStyleNames"],"mappings":"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","file":"Header.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { View, StatusBar, ViewPropTypes, StyleSheet } from \"react-native\";\r\nimport { connectStyle } from \"native-base-shoutem-theme\";\r\nimport mapPropsToStyleNames from \"../utils/mapPropsToStyleNames\";\r\nimport variable from \"../theme/variables/platform\";\r\nimport _ from \"lodash\";\r\nclass Header extends Component {\r\n  static contextTypes = {\r\n    theme: PropTypes.object\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      orientation: \"portrait\"\r\n    };\r\n  }\r\n  layoutChange(val) {\r\n    let maxComp = Math.max(variable.deviceWidth, variable.deviceHeight);\r\n    if (val.width >= maxComp) this.setState({ orientation: \"landscape\" });\r\n    else {\r\n      this.setState({ orientation: \"portrait\" });\r\n    }\r\n  }\r\n  calculateHeight(mode, inSet) {\r\n    let inset = null;\r\n    if (inSet != undefined) {\r\n      inset = inSet;\r\n    } else {\r\n      inset = variable.Inset;\r\n    }\r\n    const InsetValues = mode === \"portrait\" ? inset.portrait : inset.landscape;\r\n    let oldHeight = null;\r\n    if (this.props.style.height != undefined) {\r\n      oldHeight = this.props.style.height;\r\n    } else if (this.props.style[1].height) {\r\n      oldHeight = this.props.style[1].height;\r\n    } else {\r\n      oldHeight = this.props.style[0].height;\r\n    }\r\n    let height = oldHeight + InsetValues.topInset;\r\n    return height;\r\n  }\r\n  calculatePadder(mode, inSet) {\r\n    let inset = null;\r\n    if (inSet != undefined) {\r\n      inset = inSet;\r\n    } else {\r\n      inset = variable.Inset;\r\n    }\r\n    const InsetValues = mode === \"portrait\" ? inset.portrait : inset.landscape;\r\n    let topPadder = null;\r\n    let style = StyleSheet.flatten(this.props.style);\r\n    if (style.padding !== undefined && style.paddingTop !== undefined) {\r\n      topPadder = (style.paddingTop ? style.paddingTop : style.padding) + InsetValues.topInset;\r\n    } else {\r\n      topPadder = InsetValues.topInset;\r\n    }\r\n    return topPadder;\r\n  }\r\n  render() {\r\n    const variables = this.context.theme\r\n      ? this.context.theme[\"@@shoutem.theme/themeStyle\"].variables\r\n      : variable;\r\n    const platformStyle = variables.platformStyle;\r\n    return (\r\n      <View onLayout={e => this.layoutChange(e.nativeEvent.layout)}>\r\n        <StatusBar\r\n          backgroundColor={\r\n            this.props.androidStatusBarColor\r\n              ? this.props.androidStatusBarColor\r\n              : variables.statusBarColor\r\n          }\r\n          barStyle={\r\n            this.props.iosBarStyle\r\n              ? this.props.iosBarStyle\r\n              : platformStyle === \"material\"\r\n                ? \"light-content\"\r\n                : variables.iosStatusbar\r\n          }\r\n          translucent={this.props.transparent ? true : this.props.translucent}\r\n        />\r\n        {variable.isIphoneX ? (\r\n          <View\r\n            ref={c => (this._root = c)}\r\n            {...this.props}\r\n            style={[\r\n              this.props.style,\r\n              {\r\n                height: this.calculateHeight(\r\n                  this.state.orientation,\r\n                  variables.Inset\r\n                ),\r\n                paddingTop: this.calculatePadder(\r\n                  this.state.orientation,\r\n                  variables.Inset\r\n                )\r\n              }\r\n            ]}\r\n          />\r\n        ) : (\r\n            <View ref={c => (this._root = c)} {...this.props} />\r\n          )}\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nHeader.propTypes = {\r\n  ...ViewPropTypes,\r\n  style: PropTypes.oneOfType([\r\n    PropTypes.object,\r\n    PropTypes.number,\r\n    PropTypes.array\r\n  ]),\r\n  searchBar: PropTypes.bool,\r\n  rounded: PropTypes.bool\r\n};\r\n\r\nconst StyledHeader = connectStyle(\r\n  \"NativeBase.Header\",\r\n  {},\r\n  mapPropsToStyleNames\r\n)(Header);\r\nexport { StyledHeader as Header };"]}