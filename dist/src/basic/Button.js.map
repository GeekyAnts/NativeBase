{"version":3,"sources":["../../../src/basic/Button.js"],"names":["Button","borderedBtn","borderWidth","props","bordered","undefined","borderRadius","rounded","variable","borderRadiusLarge","defaultProps","style","getInitialStyle","variables","context","theme","children","Platform","OS","React","Children","map","child","type","Text","cloneElement","uppercase","btnUppercaseAndroidText","androidRipple","prepareRootProps","_root","c","activeOpacity","buttonStyle","buttonFlex","full","block","flex","maxHeight","height","paddingTop","paddingBottom","androidRippleColor","TouchableNativeFeedback","Ripple","styles","childContainer","flexGrow","onPress","Component","contextTypes","PropTypes","object","propTypes","TouchableOpacity","oneOfType","number","array","bool","primary","transparent","success","danger","warning","info","disabled","large","small","active","StyleSheet","create","flexShrink","flexDirection","justifyContent","alignItems","StyledButton","mapPropsToStyleNames"],"mappings":"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","file":"Button.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  TouchableOpacity,\r\n  Platform,\r\n  View,\r\n  TouchableNativeFeedback,\r\n  StyleSheet\r\n} from \"react-native\";\r\nimport { connectStyle } from \"native-base-shoutem-theme\";\r\nimport variable from \"./../theme/variables/platform\";\r\nimport { Text } from \"./Text\";\r\nimport computeProps from \"../utils/computeProps\";\r\n\r\nimport mapPropsToStyleNames from \"../utils/mapPropsToStyleNames\";\r\n\r\nclass Button extends Component {\r\n  static contextTypes = {\r\n    theme: PropTypes.object\r\n  };\r\n\r\n  getInitialStyle() {\r\n    return {\r\n      borderedBtn: {\r\n        borderWidth: this.props.bordered ? 1 : undefined,\r\n        borderRadius:\r\n          this.props.rounded && this.props.bordered\r\n            ? variable.borderRadiusLarge\r\n            : 2\r\n      }\r\n    };\r\n  }\r\n\r\n  _root: React$Element<TouchableOpacity | TouchableNativeFeedback>;\r\n\r\n  prepareRootProps() {\r\n    const defaultProps = {\r\n      style: this.getInitialStyle().borderedBtn\r\n    };\r\n\r\n    return computeProps(this.props, defaultProps);\r\n  }\r\n  render() {\r\n    const variables = this.context.theme\r\n      ? this.context.theme[\"@@shoutem.theme/themeStyle\"].variables\r\n      : variable;\r\n    const children =\r\n      Platform.OS === \"ios\"\r\n        ? this.props.children\r\n        : React.Children.map(\r\n            this.props.children,\r\n            child =>\r\n              child && child.type === Text\r\n                ? React.cloneElement(child, {\r\n                    uppercase: variables.btnUppercaseAndroidText,\r\n                    ...child.props\r\n                  })\r\n                : child\r\n          );\r\n    if (\r\n      Platform.OS === \"ios\" ||\r\n      Platform.OS === \"web\" ||\r\n      variables.androidRipple === false ||\r\n      Platform[\"Version\"] < 21\r\n    ) {\r\n      return (\r\n        <TouchableOpacity\r\n          {...this.prepareRootProps()}\r\n          ref={c => (this._root = c)}\r\n          activeOpacity={\r\n            this.props.activeOpacity > 0 ? this.props.activeOpacity : 0.5\r\n          }\r\n        >\r\n          {children}\r\n        </TouchableOpacity>\r\n      );\r\n    } else {\r\n        if(this.props.rounded){\r\n            let buttonStyle = { ...this.prepareRootProps().style };\r\n            let buttonFlex = (this.props.full || this.props.block) ? 1 : buttonStyle.flex;\r\n            return (\r\n              <View style={[{ maxHeight:buttonStyle.height }, buttonStyle, { paddingTop: undefined, paddingBottom: undefined }]} >\r\n                <TouchableNativeFeedback\r\n                  ref={c => (this._root = c)}\r\n                  background={\r\n                    this.props.androidRippleColor\r\n                      ? TouchableNativeFeedback.Ripple(this.props.androidRippleColor, true)\r\n                      : TouchableNativeFeedback.Ripple(variables.androidRippleColor, true)\r\n                  }\r\n                  { ...this.prepareRootProps() }\r\n                >\r\n                  <View style={[styles.childContainer, { paddingTop: buttonStyle.paddingTop, paddingBottom: buttonStyle.paddingBottom, height: buttonStyle.height,flexGrow:buttonFlex }]}>\r\n                    {children}\r\n                  </View>\r\n                </TouchableNativeFeedback>\r\n              </View >\r\n            );  \r\n        } else {\r\n            return (\r\n              <TouchableNativeFeedback\r\n                ref={c => (this._root = c)}\r\n                onPress={this.props.onPress}\r\n                {...this.prepareRootProps()}\r\n              >\r\n                <View {...this.prepareRootProps()}>{children}</View>\r\n              </TouchableNativeFeedback>\r\n            );\r\n        }\r\n    }\r\n  }\r\n}\r\n\r\nButton.propTypes = {\r\n  ...TouchableOpacity.propTypes,\r\n  style: PropTypes.oneOfType([\r\n    PropTypes.object,\r\n    PropTypes.number,\r\n    PropTypes.array\r\n  ]),\r\n  block: PropTypes.bool,\r\n  primary: PropTypes.bool,\r\n  transparent: PropTypes.bool,\r\n  success: PropTypes.bool,\r\n  danger: PropTypes.bool,\r\n  warning: PropTypes.bool,\r\n  info: PropTypes.bool,\r\n  bordered: PropTypes.bool,\r\n  disabled: PropTypes.bool,\r\n  rounded: PropTypes.bool,\r\n  large: PropTypes.bool,\r\n  small: PropTypes.bool,\r\n  active: PropTypes.bool\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n\tchildContainer: {\r\n\t\tflexShrink: 1,\r\n\t\tflexDirection: 'row',\r\n\t\tjustifyContent: 'center',\r\n\t\talignItems: 'center'\r\n\t},\r\n});\r\n\r\nconst StyledButton = connectStyle(\r\n  \"NativeBase.Button\",\r\n  {},\r\n  mapPropsToStyleNames\r\n)(Button);\r\nexport { StyledButton as Button };\r\n"]}