{"version":3,"sources":["../../../src/basic/Button.js"],"names":["Button","borderedBtn","borderWidth","props","bordered","undefined","borderRadius","rounded","variable","borderRadiusLarge","defaultProps","style","getInitialStyle","Array","isArray","flattenedStyle","reduce","accumulator","currentValue","concat","variables","context","theme","children","Platform","OS","androidRipple","prepareRootProps","_root","c","activeOpacity","buttonStyle","buttonFlex","full","block","flex","maxHeight","height","paddingTop","paddingBottom","androidRippleColor","TouchableNativeFeedback","Ripple","styles","childContainer","flexGrow","onPress","transparent","Component","contextTypes","PropTypes","object","propTypes","TouchableOpacity","oneOfType","number","array","bool","primary","success","danger","warning","info","disabled","large","small","active","StyleSheet","create","flexShrink","flexDirection","justifyContent","alignItems","StyledButton","mapPropsToStyleNames"],"mappings":"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","file":"Button.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  TouchableOpacity,\n  Platform,\n  View,\n  TouchableNativeFeedback,\n  StyleSheet\n} from \"react-native\";\nimport { connectStyle } from \"native-base-shoutem-theme\";\nimport variable from \"./../theme/variables/platform\";\nimport { Text } from \"./Text\";\nimport computeProps from \"../utils/computeProps\";\n\nimport mapPropsToStyleNames from \"../utils/mapPropsToStyleNames\";\n\nclass Button extends Component {\n  static contextTypes = {\n    theme: PropTypes.object\n  };\n\n  getInitialStyle() {\n    return {\n      borderedBtn: {\n        borderWidth: this.props.bordered ? 1 : undefined,\n        borderRadius:\n          this.props.rounded && this.props.bordered\n            ? variable.borderRadiusLarge\n            : 2\n      }\n    };\n  }\n\n  _root: React$Element<TouchableOpacity | TouchableNativeFeedback>;\n\n  prepareRootProps() {\n    const defaultProps = {\n      style: this.getInitialStyle().borderedBtn\n    };\n\n    if(Array.isArray(this.props.style)){\n      const flattenedStyle = this.props.style.reduce(( accumulator, currentValue ) => accumulator.concat(currentValue), []);\n      return computeProps({...this.props, style: flattenedStyle}, defaultProps);\n    }\n\n\n    return computeProps(this.props, defaultProps);\n  }\n  render() {\n    const variables = this.context.theme\n      ? this.context.theme[\"@@shoutem.theme/themeStyle\"].variables\n      : variable;\n    const children = this.props.children;\n    if (\n      Platform.OS === \"ios\" ||\n      Platform.OS === \"web\" ||\n      variables.androidRipple === false ||\n      Platform[\"Version\"] < 21\n    ) {\n      return (\n        <TouchableOpacity\n          {...this.prepareRootProps()}\n          ref={c => (this._root = c)}\n          activeOpacity={\n            this.props.activeOpacity > 0 ? this.props.activeOpacity : 0.5\n          }\n        >\n          {children}\n        </TouchableOpacity>\n      );\n    } else {\n      if (this.props.rounded) {\n        let buttonStyle = { ...this.prepareRootProps().style };\n        let buttonFlex = (this.props.full || this.props.block) ? 1 : buttonStyle.flex;\n        return (\n          <View style={[{ maxHeight: buttonStyle.height }, buttonStyle, { paddingTop: undefined, paddingBottom: undefined }]} >\n            <TouchableNativeFeedback\n              ref={c => (this._root = c)}\n              background={\n                this.props.androidRippleColor\n                  ? TouchableNativeFeedback.Ripple(this.props.androidRippleColor, true)\n                  : TouchableNativeFeedback.Ripple(variables.androidRippleColor, true)\n              }\n              {...this.prepareRootProps()}\n            >\n              <View style={[styles.childContainer, { paddingTop: buttonStyle.paddingTop, paddingBottom: buttonStyle.paddingBottom, height: buttonStyle.height, flexGrow: buttonFlex }]}>\n                {children}\n              </View>\n            </TouchableNativeFeedback>\n          </View >\n        );\n      } else {\n        return (\n          <TouchableNativeFeedback\n            ref={c => (this._root = c)}\n            onPress={this.props.onPress}\n            background={this.props.transparent ? TouchableNativeFeedback.Ripple('transparent') : TouchableNativeFeedback.Ripple(variables.androidRippleColor, false)}\n            {...this.prepareRootProps()}\n          >\n            <View {...this.prepareRootProps()}>{children}</View>\n          </TouchableNativeFeedback>\n        );\n      }\n    }\n  }\n}\n\nButton.propTypes = {\n  ...TouchableOpacity.propTypes,\n  style: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number,\n    PropTypes.array\n  ]),\n  block: PropTypes.bool,\n  primary: PropTypes.bool,\n  transparent: PropTypes.bool,\n  success: PropTypes.bool,\n  danger: PropTypes.bool,\n  warning: PropTypes.bool,\n  info: PropTypes.bool,\n  bordered: PropTypes.bool,\n  disabled: PropTypes.bool,\n  rounded: PropTypes.bool,\n  large: PropTypes.bool,\n  small: PropTypes.bool,\n  active: PropTypes.bool\n};\n\nconst styles = StyleSheet.create({\n  childContainer: {\n    flexShrink: 1,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n});\n\nconst StyledButton = connectStyle(\n  \"NativeBase.Button\",\n  {},\n  mapPropsToStyleNames\n)(Button);\nexport { StyledButton as Button };\n"]}