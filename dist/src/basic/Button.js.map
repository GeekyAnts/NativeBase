{"version":3,"sources":["../../../src/basic/Button.js"],"names":["Button","borderedBtn","borderWidth","props","bordered","undefined","borderRadius","rounded","borderRadiusLarge","defaultProps","style","getInitialStyle","isArray","children","type","displayName","capitalize","toUpperCase","newChildren","childrenArray","toArray","iconArray","remove","child","iconRight","push","OS","androidRipple","prepareRootProps","_root","c","activeOpacity","alignSelf","zIndex","badgeValue","backgroundColor","badgeColor","badgeValueStyle","onPress","androidRippleColor","Ripple","renderChildren","propTypes","PropTypes","object","block","bool","primary","transparent","success","danger","warning","info","disabled","large","small","active","string","StyledButton"],"mappings":"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","file":"Button.js","sourcesContent":["/* @flow */\n\n\nimport React, { Component } from 'react';\nimport _ from 'lodash';\nimport { TouchableOpacity, Platform, View, TouchableNativeFeedback } from 'react-native';\nimport { connectStyle } from '@shoutem/theme';\nimport variables from './../theme/variables/platform';\nimport { Badge } from './Badge';\nimport { Text } from './Text';\nimport computeProps from '../Utils/computeProps';\n\nimport mapPropsToStyleNames from '../Utils/mapPropsToStyleNames';\n\nclass Button extends Component {\n\n  getInitialStyle() {\n    return {\n      borderedBtn: {\n        borderWidth: (this.props.bordered) ? 1 : undefined,\n        borderRadius: (this.props.rounded && this.props.bordered) ? variables.borderRadiusLarge : 2,\n      },\n    };\n  }\n\n  prepareRootProps() {\n    const defaultProps = {\n      style: this.getInitialStyle().borderedBtn,\n    };\n\n    return computeProps(this.props, defaultProps);\n  }\n  renderChildren() {\n    const isArray = _.isArray(this.props.children);\n    if (!isArray) {\n      if (this.props.children.type.displayName===\"Styled(Text)\") {\n        return <Text {...this.props.children.props}>{(!this.props.capitalize) ? this.props.children.props.children : this.props.children.props.children.toUpperCase()}</Text>\n      }\n      else return this.props.children;\n    }\n    else {\n      const newChildren = [];\n      const childrenArray = _.toArray(this.props.children);\n      const iconArray = _.remove(childrenArray, (child)=> child.type.displayName===\"Styled(Icon)\");\n      if (this.props.iconRight) {\n        newChildren.push(<Text key={5}>{(!this.props.capitalize) ? childrenArray[0].props.children : childrenArray[0].props.children.toUpperCase()}</Text>);\n        newChildren.push(iconArray);\n      } else {\n        newChildren.push(iconArray);\n        newChildren.push(<Text key={5}>{(!this.props.capitalize) ? childrenArray[0].props.children : childrenArray[0].props.children.toUpperCase()}</Text>);\n      }\n      return newChildren;\n    }\n  }\n  render() {\n    if (Platform.OS==='ios' || variables.androidRipple===false || Platform['Version'] <= 21) {\n      return (\n        <TouchableOpacity\n          {...this.prepareRootProps()}\n          ref={c => this._root = c}\n          activeOpacity={(this.props.activeOpacity) ? this.props.activeOpacity : 0.5}\n        >\n          <View style={(Platform.OS === 'ios') ? { alignSelf: 'center', zIndex: 999 } : { alignSelf: 'center' }}>{(this.props.badgeValue) ? <Badge style={{ backgroundColor: (this.props.badgeColor) ? this.props.badgeColor : undefined }}><Text style={this.props.badgeValueStyle}>{this.props.badgeValue}</Text></Badge> : null}</View>\n          {this.props.children}\n        </TouchableOpacity>\n      );\n    }\n    else {\n      return(\n          <TouchableNativeFeedback ref={c => this._root = c}\n              onPress={this.props.onPress}\n              background={(this.props.androidRippleColor) ? TouchableNativeFeedback.Ripple(this.props.androidRippleColor) : TouchableNativeFeedback.Ripple(variables.androidRippleColor)}\n               {...this.prepareRootProps()}>\n              <View {...this.prepareRootProps()}>\n                <View style={{ alignSelf: 'center' }}>{(this.props.badgeValue) ? <Badge style={{ backgroundColor: (this.props.badgeColor) ? this.props.badgeColor : undefined }}><Text style={this.props.badgeValueStyle}>{this.props.badgeValue}</Text></Badge> : null}</View>\n                  {this.renderChildren()}\n              </View>\n          </TouchableNativeFeedback>\n      );\n    }\n  }\n}\n\nButton.propTypes = {\n  ...TouchableOpacity.propTypes,\n  style: React.PropTypes.object,\n  block: React.PropTypes.bool,\n  primary: React.PropTypes.bool,\n  transparent: React.PropTypes.bool,\n  success: React.PropTypes.bool,\n  danger: React.PropTypes.bool,\n  warning: React.PropTypes.bool,\n  info: React.PropTypes.bool,\n  bordered: React.PropTypes.bool,\n  capitalize: React.PropTypes.bool,\n  disabled: React.PropTypes.bool,\n  rounded: React.PropTypes.bool,\n  large: React.PropTypes.bool,\n  small: React.PropTypes.bool,\n  active: React.PropTypes.bool,\n  badgeColor: React.PropTypes.string,\n  badgeValueStyle: React.PropTypes.object,\n};\n\nButton.defaultProps = {\n  capitalize: true\n}\n\nconst StyledButton = connectStyle('NativeBase.Button', {}, mapPropsToStyleNames)(Button);\nexport {\n  StyledButton as Button,\n};\n"]}