{"version":3,"sources":["../../../src/basic/IconNB.js"],"names":["IconNB","props","ref","iconRef","theme","StyleProviderContext","iconType","variables","iconFamily","type","Icon","AntDesign","Entypo","EvilIcons","Feather","FontAwesome","FontAwesome5","Foundation","Ionicons","MaterialCommunityIcons","MaterialIcons","Octicons","SimpleLineIcons","Zocial","_root","current","propTypes","PropTypes","oneOf","StyledIconNB","mapPropsToStyleNames"],"mappings":"yVAAA,iEACA,qC,mDACA,4B,2CACA,8D,mDACA,wD,6CACA,8D,mDACA,0D,+CACA,kE,uDACA,oE,wDACA,gE,qDACA,4D,iDACA,wF,6EACA,sE,2DACA,4D,iDACA,0E,+DACA,wD,6CAEA,6DACA,mE,4JAEA,GAAMA,QAAS,gBAAK,sBAAW,SAACC,KAAD,CAAQC,GAAR,CAAgB,CAC7C,GAAMC,SAAU,mBAAhB,CACA,GAAMC,OAAQ,sBAAWC,0CAAX,CAAd,CAEA,GAAMC,UAAW,mBAAQ,UAAM,CAC7B,GAAIF,KAAJ,CAAW,CACT,MAAOA,OAAMG,SAAN,CAAgBC,UAAvB,CACD,CAED,MAAOP,OAAMQ,IAAb,CACD,CANgB,CAMd,CAACR,MAAMQ,IAAP,CAAaL,KAAb,CANc,CAAjB,CAQA,GAAMM,MAAO,mBAAQ,UAAM,CACzB,OAAQJ,QAAR,EACE,IAAK,WAAL,CACE,MAAOK,oBAAP,CACF,IAAK,QAAL,CACE,MAAOC,iBAAP,CACF,IAAK,WAAL,CACE,MAAOC,oBAAP,CACF,IAAK,SAAL,CACE,MAAOC,kBAAP,CACF,IAAK,aAAL,CACE,MAAOC,sBAAP,CACF,IAAK,cAAL,CACE,MAAOC,sBAAP,CACF,IAAK,YAAL,CACE,MAAOC,qBAAP,CACF,IAAK,UAAL,CACE,MAAOC,mBAAP,CACF,IAAK,wBAAL,CACE,MAAOC,iCAAP,CACF,IAAK,eAAL,CACE,MAAOC,wBAAP,CACF,IAAK,UAAL,CACE,MAAOC,mBAAP,CACF,IAAK,iBAAL,CACE,MAAOC,0BAAP,CACF,IAAK,QAAL,CACE,MAAOC,iBAAP,CACF,QACE,MAAOL,mBAAP,CA5BJ,CA8BD,CA/BY,CA+BV,CAACZ,QAAD,CA/BU,CAAb,CAiCA,+BAAoBJ,GAApB,CAAyB,iBAAO,CAC9BsB,MAAOrB,QAAQsB,OADe,CAAP,EAAzB,CAEI,CAACtB,OAAD,CAFJ,EAIA,MACE,+BAAC,IAAD,WAAM,IAAKA,OAAX,EAAwBF,KAAxB,mDADF,CAGD,CApDmB,CAAL,CAAf,CAsDAD,OAAO0B,SAAP,CAAmB,CACjBjB,KAAMkB,oBAAUC,KAAV,CAAgB,CACpB,WADoB,CAEpB,QAFoB,CAGpB,WAHoB,CAIpB,SAJoB,CAKpB,aALoB,CAMpB,cANoB,CAOpB,YAPoB,CAQpB,UARoB,CASpB,wBAToB,CAUpB,eAVoB,CAWpB,UAXoB,CAYpB,iBAZoB,CAapB,QAboB,CAAhB,CADW,CAAnB,CAkBA,GAAMC,cAAe,yCACnB,mBADmB,CAEnB,EAFmB,CAGnBC,8BAHmB,EAInB9B,MAJmB,CAArB,C,QAMyBA,M,CAAhB6B,Y","file":"IconNB.js","sourcesContent":["import { connectStyle } from 'native-base-shoutem-theme';\nimport PropTypes from 'prop-types';\nimport React, { forwardRef, memo, useContext, useImperativeHandle, useMemo, useRef } from 'react';\nimport AntDesign from 'react-native-vector-icons/AntDesign';\nimport Entypo from 'react-native-vector-icons/Entypo';\nimport EvilIcons from 'react-native-vector-icons/EvilIcons';\nimport Feather from 'react-native-vector-icons/Feather';\nimport FontAwesome from 'react-native-vector-icons/FontAwesome';\nimport FontAwesome5 from 'react-native-vector-icons/FontAwesome5';\nimport Foundation from 'react-native-vector-icons/Foundation';\nimport Ionicons from 'react-native-vector-icons/Ionicons';\nimport MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';\nimport MaterialIcons from 'react-native-vector-icons/MaterialIcons';\nimport Octicons from 'react-native-vector-icons/Octicons';\nimport SimpleLineIcons from 'react-native-vector-icons/SimpleLineIcons';\nimport Zocial from 'react-native-vector-icons/Zocial';\n\nimport { StyleProviderContext } from '../StyleProviderContext';\nimport mapPropsToStyleNames from '../utils/mapPropsToStyleNames';\n\nconst IconNB = memo(forwardRef((props, ref) => {\n  const iconRef = useRef();\n  const theme = useContext(StyleProviderContext);\n\n  const iconType = useMemo(() => {\n    if (theme) {\n      return theme.variables.iconFamily\n    }\n\n    return props.type;\n  }, [props.type, theme]);\n\n  const Icon = useMemo(() => {\n    switch (iconType) {\n      case 'AntDesign':\n        return AntDesign;\n      case 'Entypo':\n        return Entypo;\n      case 'EvilIcons':\n        return EvilIcons;\n      case 'Feather':\n        return Feather;\n      case 'FontAwesome':\n        return FontAwesome;\n      case 'FontAwesome5':\n        return FontAwesome5;\n      case 'Foundation':\n        return Foundation;\n      case 'Ionicons':\n        return Ionicons;\n      case 'MaterialCommunityIcons':\n        return MaterialCommunityIcons;\n      case 'MaterialIcons':\n        return MaterialIcons;\n      case 'Octicons':\n        return Octicons;\n      case 'SimpleLineIcons':\n        return SimpleLineIcons;\n      case 'Zocial':\n        return Zocial;\n      default:\n        return Ionicons;\n    }\n  }, [iconType]);\n\n  useImperativeHandle(ref, () => ({\n    _root: iconRef.current\n  }), [iconRef]);\n\n  return (\n    <Icon ref={iconRef} {...props} />\n  )\n}));\n\nIconNB.propTypes = {\n  type: PropTypes.oneOf([\n    'AntDesign',\n    'Entypo',\n    'EvilIcons',\n    'Feather',\n    'FontAwesome',\n    'FontAwesome5',\n    'Foundation',\n    'Ionicons',\n    'MaterialCommunityIcons',\n    'MaterialIcons',\n    'Octicons',\n    'SimpleLineIcons',\n    'Zocial'\n  ])\n};\n\nconst StyledIconNB = connectStyle(\n  'NativeBase.IconNB',\n  {},\n  mapPropsToStyleNames\n)(IconNB);\n\nexport { StyledIconNB as IconNB };\n"]}