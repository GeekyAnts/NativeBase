{"version":3,"sources":["../../../src/basic/ToastContainer.js"],"names":["ToastContainer","props","state","modalVisible","fadeAnim","Animated","Value","position","opacity","width","elevation","paddingHorizontal","Platform","OS","top","getTop","undefined","bottom","buttonText","trim","length","config","setState","text","getButtonText","type","supportedOrientations","style","buttonTextStyle","buttonStyle","textStyle","onClose","closeTimeout","clearTimeout","duration","setTimeout","closeToast","bind","timing","toValue","start","reason","closeModal","getToastStyle","toastInstance","_root","showToast","getModalState","Component","propTypes","ViewPropTypes","PropTypes","oneOfType","object","number","array","StyledToastContainer","mapPropsToStyleNames"],"mappings":"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","file":"ToastContainer.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { View, Modal, Platform, Animated, ViewPropTypes } from \"react-native\";\nimport { connectStyle } from \"native-base-shoutem-theme\";\nimport { Text } from \"./Text\";\nimport { Button } from \"./Button\";\nimport { ViewNB } from \"./View\";\nimport { Toast } from \"./Toast\";\nimport mapPropsToStyleNames from \"../utils/mapPropsToStyleNames\";\n\nclass ToastContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modalVisible: false,\n      fadeAnim: new Animated.Value(0)\n    };\n  }\n  static toastInstance;\n  static show({ ...config }) {\n    this.toastInstance._root.showToast({ config });\n  }\n  static hide() {\n    if (this.toastInstance._root.getModalState()) {\n      this.toastInstance._root.closeToast(\"functionCall\");\n    }\n  }\n  getToastStyle() {\n    return {\n      position: \"absolute\",\n      opacity: this.state.fadeAnim,\n      width: \"100%\",\n      elevation: 9,\n      paddingHorizontal: Platform.OS === \"ios\" ? 20 : 0,\n      top: this.state.position === \"top\" ? this.getTop() : undefined,\n      bottom: this.state.position === \"bottom\" ? this.getTop() : undefined\n    };\n  }\n  getTop() {\n    if (Platform.OS === \"ios\") {\n      return 30;\n    } else {\n      return 0;\n    }\n  }\n  getButtonText(buttonText) {\n    if (buttonText) {\n      if (buttonText.trim().length === 0) {\n        return undefined;\n      } else return buttonText;\n    }\n    return undefined;\n  }\n  getModalState() {\n    return this.state.modalVisible;\n  }\n  showToast({ config }) {\n    this.setState({\n      modalVisible: true,\n      text: config.text,\n      buttonText: this.getButtonText(config.buttonText),\n      type: config.type,\n      position: config.position ? config.position : \"bottom\",\n      supportedOrientations: config.supportedOrientations,\n      style: config.style,\n      buttonTextStyle: config.buttonTextStyle,\n      buttonStyle: config.buttonStyle,\n      textStyle: config.textStyle,\n      onClose: config.onClose\n    });\n    // If we have a toast already open, cut off its close timeout so that it won't affect *this* toast.\n    if (this.closeTimeout) {\n      clearTimeout(this.closeTimeout);\n    }\n    // Set the toast to close after the duration.\n    if (config.duration !== 0) {\n      const duration = config.duration > 0 ? config.duration : 1500;\n      this.closeTimeout = setTimeout(\n        this.closeToast.bind(this, \"timeout\"),\n        duration\n      );\n    }\n    // Fade the toast in now.\n    Animated.timing(this.state.fadeAnim, {\n      toValue: 1,\n      duration: 200\n    }).start();\n  }\n  closeModal(reason) {\n    this.setState({\n      modalVisible: false\n    });\n    const { onClose } = this.state;\n    if (onClose && typeof onClose === \"function\") {\n      onClose(reason);\n    }\n  }\n  closeToast(reason) {\n    clearTimeout(this.closeTimeout);\n    Animated.timing(this.state.fadeAnim, {\n      toValue: 0,\n      duration: 200\n    }).start(this.closeModal.bind(this, reason));\n  }\n  render() {\n    if (this.state.modalVisible) {\n      return (\n        <Animated.View style={this.getToastStyle()}>\n          <Toast\n            style={this.state.style}\n            danger={this.state.type == \"danger\" ? true : false}\n            success={this.state.type == \"success\" ? true : false}\n            warning={this.state.type == \"warning\" ? true : false}\n          >\n            <Text style={this.state.textStyle}>{this.state.text}</Text>\n            {this.state.buttonText && (\n              <Button\n                style={this.state.buttonStyle}\n                onPress={() => this.closeToast(\"user\")}\n              >\n                <Text style={this.state.buttonTextStyle}>\n                  {this.state.buttonText}\n                </Text>\n              </Button>\n            )}\n          </Toast>\n        </Animated.View>\n      );\n    } else return null;\n  }\n}\n\nToastContainer.propTypes = {\n  ...ViewPropTypes,\n  style: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number,\n    PropTypes.array\n  ])\n};\n\nconst StyledToastContainer = connectStyle(\n  \"NativeBase.ToastContainer\",\n  {},\n  mapPropsToStyleNames\n)(ToastContainer);\n\nexport { StyledToastContainer as ToastContainer };\n"]}