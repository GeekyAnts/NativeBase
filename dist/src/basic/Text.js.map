{"version":3,"sources":["../../../src/basic/Text.js"],"names":["Text","props","uppercase","children","text","React","Children","map","_","isString","child","toUpper","_root","c","Component","propTypes","RNText","PropTypes","bool","style","oneOfType","object","number","array","defaultProps","StyledText","mapPropsToStyleNames"],"mappings":"q1BAAA,4B,2CACA,qC,mDACA,yCACA,8B,6CACA,iEAEA,mE,68BAEMA,K,iQACK,4BACyB,KAAKC,KAD9B,CACCC,SADD,QACCA,SADD,CACYC,QADZ,QACYA,QADZ,CAGP,GAAIC,YAAJ,CACA,GAAIF,SAAJ,CAAe,CACbE,KAAOC,gBAAMC,QAAN,CAAeC,GAAf,CAAmBJ,QAAnB,CAA6B,eAAS,CAC3C,GAAIK,iBAAEC,QAAF,CAAWC,KAAX,CAAJ,CAAuB,CACrB,MAAOF,kBAAEG,OAAF,CAAUD,KAAV,CAAP,CACD,CACD,MAAOA,MAAP,CACD,CALM,CAAP,CAMD,CAPD,IAOO,CACLN,KAAOD,QAAP,CACD,CAED,MACE,+BAAC,iBAAD,WAAQ,IAAK,sBAAM,QAAKS,KAAL,CAAaC,CAAnB,EAAb,EAAwC,KAAKZ,KAA7C,mDACGG,IADH,CADF,CAKD,C,kBArBgBU,gB,EAwBnBd,KAAKe,SAAL,aACKC,kBAAOD,SADZ,EAEEb,UAAWe,oBAAUC,IAFvB,CAGEC,MAAOF,oBAAUG,SAAV,CAAoB,CACzBH,oBAAUI,MADe,CAEzBJ,oBAAUK,MAFe,CAGzBL,oBAAUM,KAHe,CAApB,CAHT,GAUAvB,KAAKwB,YAAL,CAAoB,CAClBtB,UAAW,KADO,CAApB,CAIA,GAAMuB,YAAa,yCAAa,iBAAb,CAAgC,EAAhC,CAAoCC,8BAApC,EACjB1B,IADiB,CAAnB,C,QAIuBA,I,CAAdyB,U","file":"Text.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Text as RNText } from 'react-native';\r\nimport _ from 'lodash';\r\nimport { connectStyle } from 'native-base-shoutem-theme';\r\n\r\nimport mapPropsToStyleNames from '../utils/mapPropsToStyleNames';\r\n\r\nclass Text extends Component {\r\n  render() {\r\n    const { uppercase, children } = this.props;\r\n\r\n    let text;\r\n    if (uppercase) {\r\n      text = React.Children.map(children, child => {\r\n        if (_.isString(child)) {\r\n          return _.toUpper(child);\r\n        }\r\n        return child;\r\n      });\r\n    } else {\r\n      text = children;\r\n    }\r\n\r\n    return (\r\n      <RNText ref={c => (this._root = c)} {...this.props}>\r\n        {text}\r\n      </RNText>\r\n    );\r\n  }\r\n}\r\n\r\nText.propTypes = {\r\n  ...RNText.propTypes,\r\n  uppercase: PropTypes.bool,\r\n  style: PropTypes.oneOfType([\r\n    PropTypes.object,\r\n    PropTypes.number,\r\n    PropTypes.array\r\n  ])\r\n};\r\n\r\nText.defaultProps = {\r\n  uppercase: false\r\n};\r\n\r\nconst StyledText = connectStyle('NativeBase.Text', {}, mapPropsToStyleNames)(\r\n  Text\r\n);\r\n\r\nexport { StyledText as Text };\r\n"]}