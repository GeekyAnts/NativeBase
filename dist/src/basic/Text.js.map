{"version":3,"sources":["../../../src/basic/Text.js"],"names":["Text","props","uppercase","children","text","Children","map","isString","child","toUpper","_root","c","propTypes","bool","style","oneOfType","object","number","array","defaultProps","StyledText"],"mappings":"q1BAAA,4B;AACA,qC;AACA;AACA,8B;;AAEA;AACA,mE;;AAEMA,I;AACI;;;;AAIF,KAAKC,KAJH,CAEJC,SAFI,QAEJA,SAFI,CAGJC,QAHI,QAGJA,QAHI;;AAMN,GAAIC,YAAJ;AACA,GAAIF,SAAJ,CAAe;AACbE,KAAO,gBAAMC,QAAN,CAAeC,GAAf,CAAmBH,QAAnB,CAA6B,eAAS;AAC3C,GAAI,iBAAEI,QAAF,CAAWC,KAAX,CAAJ,CAAuB;AACrB,MAAO,kBAAEC,OAAF,CAAUD,KAAV,CAAP;AACD,CAFD,IAEO;AACL,MAAOA,MAAP;AACD;AACF,CANM,CAAP;AAOD,CARD,IAQO;AACLJ,KAAOD,QAAP;AACD;;AAEH;AACC,0DAAQ,IAAK,sBAAM,QAAKO,KAAL,CAAaC,CAAnB,EAAb,EAAwC,KAAKV,KAA7C;AACEG,IADF,CADD;;;AAKA,C;;;AAGFJ,KAAKY,SAAL;AACI,kBAAOA,SADX;AAECV,UAAW,oBAAUW,IAFtB;AAGCC,MAAO,oBAAUC,SAAV,CAAoB,CAAC,oBAAUC,MAAX,CAAmB,oBAAUC,MAA7B,CAAqC,oBAAUC,KAA/C,CAApB,CAHR;;;AAMAlB,KAAKmB,YAAL,CAAoB;AACnBjB,UAAW,KADQ,CAApB;;;AAIA,GAAMkB,YAAa,yCAAa,iBAAb,CAAgC,EAAhC,iCAA0DpB,IAA1D,CAAnB,C;;AAEuBA,I,CAAdoB,U","file":"Text.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Text as RNText } from \"react-native\";\r\nimport _ from \"lodash\";\r\n\r\nimport { connectStyle } from \"native-base-shoutem-theme\";\r\nimport mapPropsToStyleNames from \"../Utils/mapPropsToStyleNames\";\r\n\r\nclass Text extends Component {\r\n\trender() {\r\n    const {\r\n      uppercase,\r\n      children,\r\n    } = this.props;\r\n\r\n    let text;\r\n    if (uppercase) {\r\n      text = React.Children.map(children, child => {\r\n        if (_.isString(child)) {\r\n          return _.toUpper(child);\r\n        } else {\r\n          return child;\r\n        }\r\n      })\r\n    } else {\r\n      text = children;\r\n    }\r\n\r\n\t\treturn (\r\n\t\t\t<RNText ref={c => (this._root = c)} {...this.props}>\r\n\t\t\t\t{text}\r\n\t\t\t</RNText>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nText.propTypes = {\r\n\t...RNText.propTypes,\r\n\tuppercase: PropTypes.bool,\r\n\tstyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\r\n};\r\n\r\nText.defaultProps = {\r\n\tuppercase: false,\r\n};\r\n\r\nconst StyledText = connectStyle(\"NativeBase.Text\", {}, mapPropsToStyleNames)(Text);\r\n\r\nexport { StyledText as Text };\r\n"]}