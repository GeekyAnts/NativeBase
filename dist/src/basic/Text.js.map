{"version":3,"sources":["../../../src/basic/Text.js"],"names":["Text","props","uppercase","children","text","React","Children","map","_","isString","child","toUpper","_root","c","Component","propTypes","RNText","PropTypes","bool","style","oneOfType","object","number","array","defaultProps","StyledText","mapPropsToStyleNames"],"mappings":"8yBAAA,4B,2CACA,qC,mDACA,yCACA,8B,6CAEA,iEACA,mE,68BAEMA,K,iQACI,4BAIF,KAAKC,KAJH,CAEJC,SAFI,QAEJA,SAFI,CAGJC,QAHI,QAGJA,QAHI,CAMN,GAAIC,YAAJ,CACA,GAAIF,SAAJ,CAAe,CACbE,KAAOC,gBAAMC,QAAN,CAAeC,GAAf,CAAmBJ,QAAnB,CAA6B,eAAS,CAC3C,GAAIK,iBAAEC,QAAF,CAAWC,KAAX,CAAJ,CAAuB,CACrB,MAAOF,kBAAEG,OAAF,CAAUD,KAAV,CAAP,CACD,CAFD,IAEO,CACL,MAAOA,MAAP,CACD,CACF,CANM,CAAP,CAOD,CARD,IAQO,CACLN,KAAOD,QAAP,CACD,CAEH,MACC,+BAAC,iBAAD,WAAQ,IAAK,sBAAM,QAAKS,KAAL,CAAaC,CAAnB,EAAb,EAAwC,KAAKZ,KAA7C,EACEG,IADF,CADD,CAKA,C,kBAzBiBU,gB,EA4BnBd,KAAKe,SAAL,aACIC,kBAAOD,SADX,EAECb,UAAWe,oBAAUC,IAFtB,CAGCC,MAAOF,oBAAUG,SAAV,CAAoB,CAACH,oBAAUI,MAAX,CAAmBJ,oBAAUK,MAA7B,CAAqCL,oBAAUM,KAA/C,CAApB,CAHR,GAMAvB,KAAKwB,YAAL,CAAoB,CACnBtB,UAAW,KADQ,CAApB,CAIA,GAAMuB,YAAa,yCAAa,iBAAb,CAAgC,EAAhC,CAAoCC,8BAApC,EAA0D1B,IAA1D,CAAnB,C,QAEuBA,I,CAAdyB,U","file":"Text.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Text as RNText } from \"react-native\";\nimport _ from \"lodash\";\n\nimport { connectStyle } from \"native-base-shoutem-theme\";\nimport mapPropsToStyleNames from \"../utils/mapPropsToStyleNames\";\n\nclass Text extends Component {\n\trender() {\n    const {\n      uppercase,\n      children,\n    } = this.props;\n\n    let text;\n    if (uppercase) {\n      text = React.Children.map(children, child => {\n        if (_.isString(child)) {\n          return _.toUpper(child);\n        } else {\n          return child;\n        }\n      })\n    } else {\n      text = children;\n    }\n\n\t\treturn (\n\t\t\t<RNText ref={c => (this._root = c)} {...this.props}>\n\t\t\t\t{text}\n\t\t\t</RNText>\n\t\t);\n\t}\n}\n\nText.propTypes = {\n\t...RNText.propTypes,\n\tuppercase: PropTypes.bool,\n\tstyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\n};\n\nText.defaultProps = {\n\tuppercase: false,\n};\n\nconst StyledText = connectStyle(\"NativeBase.Text\", {}, mapPropsToStyleNames)(Text);\n\nexport { StyledText as Text };\n"]}