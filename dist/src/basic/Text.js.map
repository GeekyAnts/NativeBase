{"version":3,"sources":["../../../src/basic/Text.js"],"names":["Text","props","uppercase","children","rest","text","React","Children","map","_","isString","child","toUpper","_root","c","Component","propTypes","RNText","PropTypes","bool","style","oneOfType","object","number","array","defaultProps","StyledText","mapPropsToStyleNames"],"mappings":"m1BAAA,4B,2CACA,qC,mDACA,yCACA,8B,6CACA,iEAEA,mE,kpCAEMA,K,iQACK,4BACkC,KAAKC,KADvC,CACCC,SADD,QACCA,SADD,CACYC,QADZ,QACYA,QADZ,CACyBC,IADzB,2DAGP,GAAIC,YAAJ,CACA,GAAIH,SAAJ,CAAe,CACbG,KAAOC,gBAAMC,QAAN,CAAeC,GAAf,CAAmBL,QAAnB,CAA6B,eAAS,CAC3C,GAAIM,iBAAEC,QAAF,CAAWC,KAAX,CAAJ,CAAuB,CACrB,MAAOF,kBAAEG,OAAF,CAAUD,KAAV,CAAP,CACD,CACD,MAAOA,MAAP,CACD,CALM,CAAP,CAMD,CAPD,IAOO,CACLN,KAAOF,QAAP,CACD,CAED,MACE,+BAAC,iBAAD,WAAQ,IAAK,sBAAM,QAAKU,KAAL,CAAaC,CAAnB,EAAb,EAAwCV,IAAxC,mDACGC,IADH,CADF,CAKD,C,kBArBgBU,gB,EAwBnBf,KAAKgB,SAAL,aACKC,kBAAOD,SADZ,EAEEd,UAAWgB,oBAAUC,IAFvB,CAGEC,MAAOF,oBAAUG,SAAV,CAAoB,CACzBH,oBAAUI,MADe,CAEzBJ,oBAAUK,MAFe,CAGzBL,oBAAUM,KAHe,CAApB,CAHT,GAUAxB,KAAKyB,YAAL,CAAoB,CAClBvB,UAAW,KADO,CAApB,CAIA,GAAMwB,YAAa,yCAAa,iBAAb,CAAgC,EAAhC,CAAoCC,8BAApC,EACjB3B,IADiB,CAAnB,C,QAIuBA,I,CAAd0B,U","file":"Text.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Text as RNText } from 'react-native';\nimport _ from 'lodash';\nimport { connectStyle } from 'native-base-shoutem-theme';\n\nimport mapPropsToStyleNames from '../utils/mapPropsToStyleNames';\n\nclass Text extends Component {\n  render() {\n    const { uppercase, children, ...rest } = this.props;\n\n    let text;\n    if (uppercase) {\n      text = React.Children.map(children, child => {\n        if (_.isString(child)) {\n          return _.toUpper(child);\n        }\n        return child;\n      });\n    } else {\n      text = children;\n    }\n\n    return (\n      <RNText ref={c => (this._root = c)} {...rest}>\n        {text}\n      </RNText>\n    );\n  }\n}\n\nText.propTypes = {\n  ...RNText.propTypes,\n  uppercase: PropTypes.bool,\n  style: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.number,\n    PropTypes.array\n  ])\n};\n\nText.defaultProps = {\n  uppercase: false\n};\n\nconst StyledText = connectStyle('NativeBase.Text', {}, mapPropsToStyleNames)(\n  Text\n);\n\nexport { StyledText as Text };\n"]}