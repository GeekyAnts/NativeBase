{"version":3,"sources":["../../../src/basic/Picker.ios.js"],"names":["PickerNB","props","state","modalVisible","currentLabel","getLabel","dataSource","children","nextProps","nextLabel","currentDS","nextDS","setState","picker","pickerItem","visible","defaultProps","style","getInitialStyle","itemStyle","item","find","child","value","selectedValue","get","childrenArray","Children","toArray","headerComponent","newChildren","forEach","type","push","cloneElement","onPress","_setModalVisible","iosIcon","fontSize","lineHeight","color","text","defaultLabel","renderButton","note","textStyle","undefined","renderIcon","modifyHeader","shadowOffset","shadowColor","shadowRadius","shadowOpacity","iosHeader","_root","c","supportedOrientations","renderHeader","onValueChange","current","label","itemTextStyle","Item","createClass","render","propTypes","StyledPickerNB"],"mappings":"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","file":"Picker.ios.js","sourcesContent":["/* @flow */\n\nimport React, { Component } from 'react';\nimport { Picker, Modal, View, ListView } from 'react-native';\nimport _ from 'lodash';\nimport { Text } from './Text';\nimport { List } from './List';\nimport { IconNB as Icon } from './IconNB';\nimport { Radio } from './Radio';\nimport { Container } from './Container';\nimport { Content } from './Content';\nimport { ListItem } from './ListItem';\nimport { Button } from './Button';\nimport { Header } from './Header';\nimport { Title } from './Title';\nimport { Left } from './Left';\nimport { Right } from './Right';\nimport { Body } from './Body';\nimport { connectStyle } from 'native-base-shoutem-theme';\nimport computeProps from '../Utils/computeProps';\n\nimport mapPropsToStyleNames from '../Utils/mapPropsToStyleNames';\n\nclass PickerNB extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      modalVisible: false,\n      currentLabel: this.getLabel(props),\n      dataSource: props.children\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const currentLabel = this.state.currentLabel;\n    const nextLabel = this.getLabel(nextProps);\n    const currentDS = this.state.dataSource;\n    const nextDS = nextProps.children\n\n    if (currentLabel !== nextLabel) {\n      this.setState({\n        currentLabel: nextLabel,\n      });\n    }\n    if (currentDS !== nextDS) {\n      this.setState({\n        dataSource: nextDS,\n      });\n    }\n  }\n\n  getInitialStyle() {\n    return {\n      picker: {\n                // alignItems: 'flex-end'\n      },\n      pickerItem: {\n\n      },\n    };\n  }\n  _setModalVisible(visible) {\n    this.setState({ modalVisible: visible });\n  }\n\n  prepareRootProps() {\n    const defaultProps = {\n      style: this.getInitialStyle().picker,\n      itemStyle: this.getInitialStyle().pickerItem,\n    };\n\n    return computeProps(this.props, defaultProps);\n  }\n\n  getLabel(props) {\n    const item = _.find(props.children, child => child.props.value === props.selectedValue);\n    return _.get(item, 'props.label');\n  }\n\n  modifyHeader() {\n    const childrenArray = React.Children.toArray(this.props.headerComponent.props.children);\n    const newChildren = [];\n    childrenArray.forEach((child) => {\n      if (child.type === Button) {\n        newChildren.push(React.cloneElement(child,\n          { onPress: () => { this._setModalVisible(false); } }));\n      } else {\n        newChildren.push(child);\n      }\n    });\n    return <Header {...this.props.headerComponent.props} >{newChildren}</Header>;\n  }\n\n  renderIcon() {\n    return React.cloneElement(this.props.iosIcon, { style: { fontSize: 22, lineHeight: 26, color: '#7a7a7a' } });\n  }\n\n  renderButton() {\n    const onPress = () => { this._setModalVisible(true); };\n    const text = this.state.currentLabel ? this.state.currentLabel : this.props.defaultLabel;\n    if (this.props.renderButton) {\n      return this.props.renderButton(onPress, text, this);\n    }\n    return <Button\n      style={this.props.style}\n      dark\n      picker\n      transparent\n      onPress={onPress}\n    >\n      <Text note={(this.props.note)} style={this.props.textStyle}>{text}</Text>\n      {(this.props.iosIcon === undefined) ? null : this.renderIcon()}\n    </Button>;\n  }\n\n  renderHeader() {\n    return (this.props.headerComponent) ? this.modifyHeader() : (<Header >\n      <Left><Button\n        style={{ shadowOffset: null, shadowColor: null, shadowRadius: null, shadowOpacity: null }}\n        transparent onPress={() => { this._setModalVisible(false); }}\n      ><Text>Back</Text></Button></Left>\n    <Body><Title>{(this.props.iosHeader) ? this.props.iosHeader : 'Select One'}</Title></Body>\n      <Right />\n    </Header>);\n  }\n\n  render() {\n    return (\n      <View ref={c => this._root = c}>\n        {this.renderButton()}\n        <Modal\n          animationType=\"slide\"\n          supportedOrientations={this.props.supportedOrientations ||Â null}\n          transparent={false}\n          visible={this.state.modalVisible}\n          onRequestClose={() => { this._setModalVisible(false); }}\n        >\n          <Container>\n            {this.renderHeader()}\n            <Content>\n              <List\n                dataArray={this.state.dataSource}\n                renderRow={child =>\n                  <ListItem\n                    selected={(child.props.value === this.props.selectedValue) ? true : false}\n                    button\n                    style={this.props.itemStyle}\n                    onPress={() => {\n                      this._setModalVisible(false); this.props.onValueChange(child.props.value);\n                      this.setState({ current: child.props.label });\n                    }}\n                  >\n                    <Text style={this.props.itemTextStyle} >{child.props.label}</Text>\n                    <Right>\n                      {(child.props.value === this.props.selectedValue) ?\n                                        (<Radio selected={true} />)\n                                        :\n                                        (<Radio selected={false} />)\n                                    }\n                    </Right>\n                  </ListItem>\n                            }\n              />\n            </Content>\n          </Container>\n        </Modal>\n      </View>\n    );\n  }\n\n}\n\nPickerNB.Item = React.createClass({\n\n  render() {\n    return (\n      <Picker.Item {...this.props()} />\n    );\n  },\n});\n\nPickerNB.propTypes = {\n  ...View.propTypes,\n};\n\nconst StyledPickerNB = connectStyle('NativeBase.PickerNB', {}, mapPropsToStyleNames)(PickerNB);\n\nexport {\n  StyledPickerNB as PickerNB,\n};\n"]}