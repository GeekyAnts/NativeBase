{"version":3,"sources":["../../../__tests__/basic/Header.ios.js"],"names":["jest","mock","Platform","require","requireActual","OS","it","tree","create","toJSON","expect","toMatchSnapshot"],"mappings":"mDAAA;AACA,4B;AACA,sD;AACA;AACA;AACA;AACA;AACA,+D;;;;AAIAA,KAAKC,IAAL,CAAU,UAAV,CAAsB,UAAM;AACxB,GAAMC,UAAWC,QAAQC,aAAR,CAAsB,UAAtB,CAAjB;AACAF,SAASG,EAAT,CAAc,KAAd;AACA,MAAOH,SAAP;AACH,CAJD;AAKAF,KAAKC,IAAL,CAAU,YAAV,CAAwB,iBAAM,YAAN,EAAxB;;AAEAK,GAAG,mBAAH,CAAwB,UAAM;AAC1B,GAAMC,MAAO,4BAASC,MAAT;AACT,8FADS;AAEXC,MAFW,EAAb;AAGAC,OAAOH,IAAP,EAAaI,eAAb;AACH,CALD;;AAOAL,GAAG,6BAAH,CAAkC,UAAM;AACpC,GAAMC,MAAO,4BAASC,MAAT;AACT;AACI,8CAAQ,gBAAR;AACI,0CAAM,KAAK,gBAAX,iDADJ,CADJ;;;AAKI,qGALJ;;AAOI,8CAAQ,gBAAR;AACI,0CAAM,KAAK,UAAX,iDADJ,CAPJ,CADS;;;AAYXC,MAZW,EAAb;AAaAC,OAAOH,IAAP,EAAaI,eAAb;AACH,CAfD;;AAiBAL,GAAG,mCAAH,CAAwC,UAAM;AAC1C,GAAMC,MAAO,4BAASC,MAAT;AACT;AACK,IADL;AAEI,qGAFJ,CADS;;AAKXC,MALW,EAAb;AAMAC,OAAOH,IAAP,EAAaI,eAAb;AACH,CARD;;AAUAL,GAAG,0CAAH,CAA+C,UAAM;AACjD,GAAMC,MAAO,4BAASC,MAAT;AACT;AACI,8CAAQ,gBAAR;AACI,0CAAM,KAAK,gBAAX,iDADJ,CADJ;;;AAKI,qGALJ;AAMI,6GANJ;;AAQI,8CAAQ,gBAAR;AACI,0CAAM,KAAK,UAAX,iDADJ,CARJ,CADS;;;AAaXC,MAbW,EAAb;AAcAC,OAAOH,IAAP,EAAaI,eAAb;AACH,CAhBD;;AAkBAL,GAAG,qCAAH,CAA0C,UAAM;AAC5C,GAAMC,MAAO,4BAASC,MAAT;AACT;AACI,8CAAQ,gBAAR;AACI,0CAAM,KAAK,gBAAX,iDADJ,CADJ;;;AAKI,qGALJ,CADS;;AAQXC,MARW,EAAb;AASAC,OAAOH,IAAP,EAAaI,eAAb;AACH,CAXD;;AAaAL,GAAG,kDAAH,CAAuD,UAAM;AACzD,GAAMC,MAAO,4BAASC,MAAT;AACT;AACI,8CAAQ,gBAAR;AACI,0CAAM,KAAK,gBAAX,iDADJ,CADJ;;;AAKI,qGALJ;AAMI,6GANJ,CADS;;AASXC,MATW,EAAb;AAUAC,OAAOH,IAAP,EAAaI,eAAb;AACH,CAZD;;AAcAL,GAAG,mDAAH,CAAwD,UAAM;AAC1D,GAAMC,MAAO,4BAASC,MAAT;AACT,8CAAQ,cAAR;AACI,8CAAQ,gBAAR;AACI,0CAAM,KAAK,gBAAX,kDADJ,CADJ;;;AAKI,sGALJ,CADS;;AAQXC,MARW,EAAb;AASAC,OAAOH,IAAP,EAAaI,eAAb;AACH,CAXD;;AAaAL,GAAG,+DAAH,CAAoE,UAAM;AACtE,GAAMC,MAAO,4BAASC,MAAT;AACT,8CAAQ,cAAR;AACI,8CAAQ,gBAAR;AACI,0CAAM,KAAK,gBAAX,kDADJ,CADJ;;;AAKI,sGALJ;AAMI,8GANJ,CADS;;AASXC,MATW,EAAb;AAUAC,OAAOH,IAAP,EAAaI,eAAb;AACH,CAZD","file":"Header.ios.js","sourcesContent":["import 'react-native';\r\nimport React from 'react';\r\nimport renderer from 'react-test-renderer';\r\nimport { Header } from './../../src/basic/Header';\r\nimport { Button } from './../../src/basic/Button';\r\nimport { Icon } from './../../src/basic/Icon';\r\nimport { Title } from './../../src/basic/Title';\r\nimport Subtitle from './../../src/backward/Widgets/Subtitle';\r\n\r\n// Note: test renderer must be required after react-native.\r\n\r\njest.mock('Platform', () => {\r\n    const Platform = require.requireActual('Platform');\r\n    Platform.OS = 'ios';\r\n    return Platform;\r\n});\r\njest.mock('ScrollView', () => 'ScrollView');\r\n\r\nit('renders correctly', () => {\r\n    const tree = renderer.create(\r\n        <Header />\r\n    ).toJSON();\r\n    expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit('renders header with buttons', () => {\r\n    const tree = renderer.create(\r\n        <Header>\r\n            <Button transparent>\r\n                <Icon name='ios-arrow-back' />\r\n            </Button>\r\n\r\n            <Title>Header</Title>\r\n\r\n            <Button transparent>\r\n                <Icon name='ios-menu' />\r\n            </Button>\r\n        </Header>\r\n    ).toJSON();\r\n    expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit('renders header with a null button', () => {\r\n    const tree = renderer.create(\r\n        <Header>\r\n            {null}\r\n            <Title>Header</Title>\r\n        </Header>\r\n    ).toJSON();\r\n    expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit('renders header with buttons and subtitle', () => {\r\n    const tree = renderer.create(\r\n        <Header>\r\n            <Button transparent>\r\n                <Icon name='ios-arrow-back' />\r\n            </Button>\r\n\r\n            <Title>Header</Title>\r\n            <Subtitle>Subtitle</Subtitle>\r\n\r\n            <Button transparent>\r\n                <Icon name='ios-menu' />\r\n            </Button>\r\n        </Header>\r\n    ).toJSON();\r\n    expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit('renders header with just one button', () => {\r\n    const tree = renderer.create(\r\n        <Header>\r\n            <Button transparent>\r\n                <Icon name='ios-arrow-back' />\r\n            </Button>\r\n\r\n            <Title>Header</Title>\r\n        </Header>\r\n    ).toJSON();\r\n    expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit('renders header with just one button and subtitle', () => {\r\n    const tree = renderer.create(\r\n        <Header>\r\n            <Button transparent>\r\n                <Icon name='ios-arrow-back' />\r\n            </Button>\r\n\r\n            <Title>Header</Title>\r\n            <Subtitle>Subtitle</Subtitle>\r\n        </Header>\r\n    ).toJSON();\r\n    expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit('renders header with just one button and iconRight', () => {\r\n    const tree = renderer.create(\r\n        <Header iconRight>\r\n            <Button transparent>\r\n                <Icon name='ios-arrow-back' />\r\n            </Button>\r\n\r\n            <Title>Header</Title>\r\n        </Header>\r\n    ).toJSON();\r\n    expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit('renders header with just one button, iconRight and a subtitle', () => {\r\n    const tree = renderer.create(\r\n        <Header iconRight>\r\n            <Button transparent>\r\n                <Icon name='ios-arrow-back' />\r\n            </Button>\r\n\r\n            <Title>Header</Title>\r\n            <Subtitle>SubTitle</Subtitle>\r\n        </Header>\r\n    ).toJSON();\r\n    expect(tree).toMatchSnapshot();\r\n});\r\n\r\n// jest-react-native doesn't work yet with that and mocking didn't work either.\r\n/*\r\nit('renders header with searchbar', () => {\r\n    const tree = renderer.create(\r\n        <Header searchBar rounded>\r\n            <InputGroup>\r\n                <Icon name='ios-search' />\r\n                <Input placeholder='Search' />\r\n                <Icon name='ios-people' />\r\n            </InputGroup>\r\n            <Button transparent>\r\n                Search\r\n            </Button>\r\n        </Header>\r\n    ).toJSON();\r\n    expect(tree).toMatchSnapshot();\r\n});\r\n*/"]}