{"version":3,"sources":["../../../__tests__/basic/Header.ios.js"],"names":["jest","mock","Platform","require","requireActual","OS","it","tree","renderer","create","toJSON","expect","toMatchSnapshot"],"mappings":"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","file":"Header.ios.js","sourcesContent":["import 'react-native';\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport { Header } from './../../src/basic/Header';\nimport { Button } from './../../src/basic/Button';\nimport { Icon } from './../../src/basic/Icon';\nimport { Title } from './../../src/basic/Title';\nimport Subtitle from './../../src/backward/Widgets/Subtitle';\n\n// Note: test renderer must be required after react-native.\n\njest.mock('Platform', () => {\n    const Platform = require.requireActual('Platform');\n    Platform.OS = 'ios';\n    return Platform;\n});\njest.mock('ScrollView', () => 'ScrollView');\n\nit('renders correctly', () => {\n    const tree = renderer.create(\n        <Header />\n    ).toJSON();\n    expect(tree).toMatchSnapshot();\n});\n\nit('renders header with buttons', () => {\n    const tree = renderer.create(\n        <Header>\n            <Button transparent>\n                <Icon name='ios-arrow-back' />\n            </Button>\n\n            <Title>Header</Title>\n\n            <Button transparent>\n                <Icon name='ios-menu' />\n            </Button>\n        </Header>\n    ).toJSON();\n    expect(tree).toMatchSnapshot();\n});\n\nit('renders header with a null button', () => {\n    const tree = renderer.create(\n        <Header>\n            {null}\n            <Title>Header</Title>\n        </Header>\n    ).toJSON();\n    expect(tree).toMatchSnapshot();\n});\n\nit('renders header with buttons and subtitle', () => {\n    const tree = renderer.create(\n        <Header>\n            <Button transparent>\n                <Icon name='ios-arrow-back' />\n            </Button>\n\n            <Title>Header</Title>\n            <Subtitle>Subtitle</Subtitle>\n\n            <Button transparent>\n                <Icon name='ios-menu' />\n            </Button>\n        </Header>\n    ).toJSON();\n    expect(tree).toMatchSnapshot();\n});\n\nit('renders header with just one button', () => {\n    const tree = renderer.create(\n        <Header>\n            <Button transparent>\n                <Icon name='ios-arrow-back' />\n            </Button>\n\n            <Title>Header</Title>\n        </Header>\n    ).toJSON();\n    expect(tree).toMatchSnapshot();\n});\n\nit('renders header with just one button and subtitle', () => {\n    const tree = renderer.create(\n        <Header>\n            <Button transparent>\n                <Icon name='ios-arrow-back' />\n            </Button>\n\n            <Title>Header</Title>\n            <Subtitle>Subtitle</Subtitle>\n        </Header>\n    ).toJSON();\n    expect(tree).toMatchSnapshot();\n});\n\nit('renders header with just one button and iconRight', () => {\n    const tree = renderer.create(\n        <Header iconRight>\n            <Button transparent>\n                <Icon name='ios-arrow-back' />\n            </Button>\n\n            <Title>Header</Title>\n        </Header>\n    ).toJSON();\n    expect(tree).toMatchSnapshot();\n});\n\nit('renders header with just one button, iconRight and a subtitle', () => {\n    const tree = renderer.create(\n        <Header iconRight>\n            <Button transparent>\n                <Icon name='ios-arrow-back' />\n            </Button>\n\n            <Title>Header</Title>\n            <Subtitle>SubTitle</Subtitle>\n        </Header>\n    ).toJSON();\n    expect(tree).toMatchSnapshot();\n});\n\n// jest-react-native doesn't work yet with that and mocking didn't work either.\n/*\nit('renders header with searchbar', () => {\n    const tree = renderer.create(\n        <Header searchBar rounded>\n            <InputGroup>\n                <Icon name='ios-search' />\n                <Input placeholder='Search' />\n                <Icon name='ios-people' />\n            </InputGroup>\n            <Button transparent>\n                Search\n            </Button>\n        </Header>\n    ).toJSON();\n    expect(tree).toMatchSnapshot();\n});\n*/"]}