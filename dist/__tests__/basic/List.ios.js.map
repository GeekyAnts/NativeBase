{"version":3,"sources":["../../../__tests__/basic/List.ios.js"],"names":["pratik","require","sanket","jest","mock","Platform","requireActual","OS","it","datas","tree","renderer","create","data","toJSON","expect","toMatchSnapshot","backgroundColor","img","text","note"],"mappings":"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","file":"List.ios.js","sourcesContent":["import \"react-native\";\r\nimport React from \"react\";\r\nimport renderer from \"react-test-renderer\";\r\nimport { List } from \"./../../src/basic/List\";\r\nimport { ListItem } from \"./../../src/basic/ListItem\";\r\nimport { Left } from \"./../../src/basic/Left\";\r\nimport { Body } from \"./../../src/basic/Body\";\r\nimport { Right } from \"./../../src/basic/Right\";\r\nimport { Icon } from \"./../../src/basic/Icon\";\r\nimport { Text } from \"./../../src/basic/Text\";\r\nimport { Button } from \"./../../src/basic/Button\";\r\nimport { Switch } from \"./../../src/basic/Switch\";\r\nimport { Radio } from \"./../../src/basic/Radio\";\r\nimport { Badge } from \"./../../src/basic/Badge\";\r\nimport { Thumbnail } from \"./../../src/basic/Thumbnail\";\r\nimport { Separator } from \"./../../src/basic/Separator\";\r\n\r\n// Note: test renderer must be required after react-native.\r\n\r\nconst pratik = require(\"../assets/pratik.png\");\r\nconst sanket = require(\"../assets/sanket.png\");\r\n\r\njest.mock(\"Platform\", () => {\r\n  const Platform = require.requireActual(\"Platform\");\r\n  Platform.OS = \"ios\";\r\n  return Platform;\r\n});\r\n\r\nit(\"renders Basic List\", () => {\r\n  const datas = [\r\n    \"Simon Mignolet\",\r\n    \"Nathaniel Clyne\",\r\n    \"Dejan Lovren\",\r\n    \"Mama Sakho\",\r\n    \"Alberto Moreno\",\r\n    \"Emre Can\",\r\n    \"Joe Allen\",\r\n    \"Phil Coutinho\"\r\n  ];\r\n  const tree = renderer\r\n    .create(\r\n      <List\r\n        dataArray={datas}\r\n        renderRow={data => (\r\n          <ListItem>\r\n            <Left>\r\n              <Text>{data}</Text>\r\n            </Left>\r\n            <Right>\r\n              <Icon name=\"arrow-forward\" />\r\n            </Right>\r\n          </ListItem>\r\n        )}\r\n      />\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders ListItem selected\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <List>\r\n        <ListItem selected>\r\n          <Text>Caroline Aaron</Text>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Text>Urbino Cendre</Text>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Text>Lee Allen</Text>\r\n        </ListItem>\r\n      </List>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders ListItem itemDivider\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <List>\r\n        <ListItem itemDivider>\r\n          <Text>A</Text>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Text>Aaron Bennet</Text>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Text>Ali Connors</Text>\r\n        </ListItem>\r\n        <ListItem last>\r\n          <Text>Angana Ghosh</Text>\r\n        </ListItem>\r\n\r\n        <ListItem itemDivider>\r\n          <Text>B</Text>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Text>Bradley Horowitz</Text>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Text>Brian Swetland</Text>\r\n        </ListItem>\r\n        <ListItem last>\r\n          <Text>Brittany Kelso</Text>\r\n        </ListItem>\r\n      </List>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders ListItem itemHeader\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <List>\r\n        <ListItem itemHeader first>\r\n          <Text>COMEDY</Text>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Text>Hangover</Text>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Text>Horrible Bosses</Text>\r\n        </ListItem>\r\n        <ListItem last>\r\n          <Text>Cop Out</Text>\r\n        </ListItem>\r\n\r\n        <ListItem itemHeader>\r\n          <Text>HORROR</Text>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Text>The Evil Dead</Text>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Text>Residential Evil</Text>\r\n        </ListItem>\r\n        <ListItem last>\r\n          <Text>Conjuring</Text>\r\n        </ListItem>\r\n      </List>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders ListItem icon\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <List>\r\n        <ListItem icon>\r\n          <Left>\r\n            <Button style={{ backgroundColor: \"#FF9501\" }}>\r\n              <Icon active name=\"plane\" />\r\n            </Button>\r\n          </Left>\r\n          <Body>\r\n            <Text>Airplane Mode</Text>\r\n          </Body>\r\n          <Right>\r\n            <Switch value={false} onTintColor=\"#50B948\" />\r\n          </Right>\r\n        </ListItem>\r\n        <ListItem icon>\r\n          <Left>\r\n            <Button style={{ backgroundColor: \"#007AFF\" }}>\r\n              <Icon active name=\"bluetooth\" />\r\n            </Button>\r\n          </Left>\r\n          <Body>\r\n            <Text>Bluetooth</Text>\r\n          </Body>\r\n          <Right>\r\n            <Text>On</Text>\r\n            <Icon active name=\"arrow-forward\" />\r\n          </Right>\r\n        </ListItem>\r\n        <ListItem icon>\r\n          <Left>\r\n            <Button style={{ backgroundColor: \"#4CDA64\" }}>\r\n              <Icon active name=\"phone-portrait\" />\r\n            </Button>\r\n          </Left>\r\n          <Body>\r\n            <Text>Mobile Data</Text>\r\n          </Body>\r\n          <Right>\r\n            <Radio selected />\r\n          </Right>\r\n        </ListItem>\r\n        <ListItem icon>\r\n          <Left>\r\n            <Button style={{ backgroundColor: \"#FD3C2D\" }}>\r\n              <Icon active name=\"notifications\" />\r\n            </Button>\r\n          </Left>\r\n          <Body>\r\n            <Text>Notifications</Text>\r\n          </Body>\r\n          <Right>\r\n            <Icon active name=\"arrow-forward\" />\r\n          </Right>\r\n        </ListItem>\r\n        <ListItem icon last>\r\n          <Left>\r\n            <Button style={{ backgroundColor: \"#5855D6\" }}>\r\n              <Icon active name=\"moon\" />\r\n            </Button>\r\n          </Left>\r\n          <Body>\r\n            <Text>Do Not Disturb</Text>\r\n          </Body>\r\n          <Right>\r\n            <Text>Yes</Text>\r\n          </Right>\r\n        </ListItem>\r\n        <ListItem last icon>\r\n          <Left>\r\n            <Button style={{ backgroundColor: \"#8F8E93\" }}>\r\n              <Icon active name=\"cog\" />\r\n            </Button>\r\n          </Left>\r\n          <Body>\r\n            <Text>Software Update</Text>\r\n          </Body>\r\n          <Right>\r\n            <Badge style={{ backgroundColor: \"#FD3C2D\" }}>\r\n              <Text>2</Text>\r\n            </Badge>\r\n          </Right>\r\n        </ListItem>\r\n      </List>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders ListItem avatar\", () => {\r\n  const datas = [\r\n    {\r\n      img: pratik,\r\n      text: \"Kumar Pratik\",\r\n      note: \"Its time to build a difference . .\"\r\n    },\r\n    {\r\n      img: sanket,\r\n      text: \"Kumar Sanket\",\r\n      note: \"One needs courage to be happy and smiling all time . . \"\r\n    }\r\n  ];\r\n  const tree = renderer\r\n    .create(\r\n      <List\r\n        dataArray={datas}\r\n        renderRow={data => (\r\n          <ListItem thumbnail>\r\n            <Left>\r\n              <Thumbnail square size={55} source={data.img} />\r\n            </Left>\r\n            <Body>\r\n              <Text>{data.text}</Text>\r\n              <Text numberOfLines={1} note>\r\n                {data.note}\r\n              </Text>\r\n            </Body>\r\n            <Right>\r\n              <Button transparent>\r\n                <Text>View</Text>\r\n              </Button>\r\n            </Right>\r\n          </ListItem>\r\n        )}\r\n      />\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders ListItem thumbnail\", () => {\r\n  const datas = [\r\n    {\r\n      img: pratik,\r\n      text: \"Kumar Pratik\",\r\n      note: \"Its time to build a difference . .\"\r\n    },\r\n    {\r\n      img: sanket,\r\n      text: \"Kumar Sanket\",\r\n      note: \"One needs courage to be happy and smiling all time . . \"\r\n    }\r\n  ];\r\n  const tree = renderer\r\n    .create(\r\n      <List\r\n        dataArray={datas}\r\n        renderRow={data => (\r\n          <ListItem thumbnail>\r\n            <Left>\r\n              <Thumbnail square size={55} source={data.img} />\r\n            </Left>\r\n            <Body>\r\n              <Text>{data.text}</Text>\r\n              <Text numberOfLines={1} note>\r\n                {data.note}\r\n              </Text>\r\n            </Body>\r\n            <Right>\r\n              <Button transparent>\r\n                <Text>View</Text>\r\n              </Button>\r\n            </Right>\r\n          </ListItem>\r\n        )}\r\n      />\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders ListItem separator\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <List>\r\n        <Separator bordered>\r\n          <Text>MIDFIELD</Text>\r\n        </Separator>\r\n        <ListItem>\r\n          <Text>Caroline Aaron</Text>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Text>Urbino Cendre</Text>\r\n        </ListItem>\r\n        <ListItem last>\r\n          <Text>Lee Allen</Text>\r\n        </ListItem>\r\n\r\n        <Separator bordered>\r\n          <Text>MIDFIELD</Text>\r\n        </Separator>\r\n        <ListItem>\r\n          <Text>Caroline Aaron</Text>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Text>Urbino Cendre</Text>\r\n        </ListItem>\r\n        <ListItem last>\r\n          <Text>Lee Allen</Text>\r\n        </ListItem>\r\n      </List>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders ListItem noIndent\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <List>\r\n        <ListItem\r\n          noIndent\r\n          style={{\r\n            backgroundColor: \"#cde1f9\"\r\n          }}\r\n        >\r\n          <Text>Caroline Aaron</Text>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Text>Urbino Cendre</Text>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Text>Lee Allen</Text>\r\n        </ListItem>\r\n      </List>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n"]}