{"version":3,"sources":["../../../__tests__/basic/Toast.ios.js"],"names":["cover","require","jest","mock","Platform","requireActual","OS","it","tree","renderer","create","Toast","show","text","buttonText","toJSON","expect","toMatchSnapshot","buttonTextStyle","color","buttonStyle","backgroundColor","duration","position","textStyle","type"],"mappings":"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","file":"Toast.ios.js","sourcesContent":["import \"react-native\";\nimport React from \"react\";\nimport renderer from \"react-test-renderer\";\nimport { Content } from \"./../../src/basic/Content\";\nimport { Button } from \"./../../src/basic/Button\";\nimport { Toast } from \"./../../src/basic/Toast\";\nimport { Text } from \"./../../src/basic/Text\";\n\n// Note: test renderer must be required after react-native.\nconst cover = require(\"../assets/drawer-cover.png\");\n\njest.mock(\"Platform\", () => {\n  const Platform = require.requireActual(\"Platform\");\n  Platform.OS = \"ios\";\n  return Platform;\n});\n\nit(\"renders default Toast\", () => {\n  const tree = renderer\n    .create(\n      <Button\n        onPress={() =>\n          Toast.show({\n            text: \"Wrong password!\",\n            buttonText: \"Okay\"\n          })\n        }\n      >\n        <Text>Toast</Text>\n      </Button>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Toast button style\", () => {\n  const tree = renderer\n    .create(\n      <Button\n        onPress={() =>\n          Toast.show({\n            text: \"Wrong password!\",\n            buttonText: \"Okay\",\n            buttonTextStyle: { color: \"#008000\" },\n            buttonStyle: { backgroundColor: \"#5cb85c\" }\n          })\n        }\n      >\n        <Text>Toast</Text>\n      </Button>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Toast with duration\", () => {\n  const tree = renderer\n    .create(\n      <Button\n        onPress={() =>\n          Toast.show({\n            text: \"Wrong password!\",\n            buttonText: \"Okay\",\n            duration: 3000\n          })\n        }\n      >\n        <Text>Toast</Text>\n      </Button>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Toast position\", () => {\n  const tree = renderer\n    .create(\n      <Content padder>\n        <Button\n          onPress={() =>\n            Toast.show({\n              text: \"Wrong password!\",\n              buttonText: \"Okay\",\n              position: \"top\"\n            })\n          }\n        >\n          <Text>Top Toast</Text>\n        </Button>\n        <Button\n          onPress={() =>\n            Toast.show({\n              text: \"Wrong password!\",\n              buttonText: \"Okay\",\n              position: \"bottom\"\n            })\n          }\n        >\n          <Text>Bottom Toast</Text>\n        </Button>\n      </Content>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Toast Text style\", () => {\n  const tree = renderer\n    .create(\n      <Button\n        onPress={() =>\n          Toast.show({\n            text: \"Wrong password!\",\n            textStyle: { color: \"yellow\" },\n            buttonText: \"Okay\"\n          })\n        }\n      >\n        <Text>Toast</Text>\n      </Button>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Toast Type\", () => {\n  const tree = renderer\n    .create(\n      <Content padder>\n        <Button\n          onPress={() =>\n            Toast.show({\n              text: \"Wrong password!\",\n              buttonText: \"Okay\"\n            })\n          }\n        >\n          <Text>Default Toast</Text>\n        </Button>\n        <Button\n          success\n          onPress={() =>\n            Toast.show({\n              text: \"Wrong password!\",\n              buttonText: \"Okay\",\n              type: \"success\"\n            })\n          }\n        >\n          <Text>Success Toast</Text>\n        </Button>\n        <Button\n          warning\n          onPress={() =>\n            Toast.show({\n              text: \"Wrong password!\",\n              buttonText: \"Okay\",\n              type: \"warning\"\n            })\n          }\n        >\n          <Text>Warning Toast</Text>\n        </Button>\n        <Button\n          danger\n          onPress={() =>\n            Toast.show({\n              text: \"Wrong password!\",\n              buttonText: \"Okay\",\n              type: \"danger\"\n            })\n          }\n        >\n          <Text>Danger Toast</Text>\n        </Button>\n      </Content>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n"]}