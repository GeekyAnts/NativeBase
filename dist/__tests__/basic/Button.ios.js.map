{"version":3,"sources":["../../../__tests__/basic/Button.ios.js"],"names":["jest","mock","Platform","require","requireActual","OS","it","tree","renderer","create","toJSON","expect","toMatchSnapshot"],"mappings":"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","file":"Button.ios.js","sourcesContent":["import { View } from \"react-native\";\nimport React from \"react\";\nimport renderer from \"react-test-renderer\";\nimport { Content } from \"./../../src/basic/Content\";\n// import { View } from \"./../../src/basic/View\";\nimport { Button } from \"./../../src/basic/Button\";\nimport { Text } from \"./../../src/basic/Text\";\nimport { Icon } from \"./../../src/basic/Icon\";\n\n// Note: test renderer must be required after react-native.\n\njest.mock(\"Platform\", () => {\n  const Platform = require.requireActual(\"Platform\");\n  Platform.OS = \"ios\";\n  return Platform;\n});\n\nit(\"renders regular button\", () => {\n  const tree = renderer\n    .create(\n      <Content>\n        <Button light>\n          <Text>Light</Text>\n        </Button>\n        <Button info>\n          <Text>Info</Text>\n        </Button>\n        <Button primary>\n          <Text>Primary</Text>\n        </Button>\n        <Button success>\n          <Text>Success</Text>\n        </Button>\n        <Button warning>\n          <Text>Warning</Text>\n        </Button>\n        <Button danger>\n          <Text>Danger</Text>\n        </Button>\n        <Button dark>\n          <Text>Dark</Text>\n        </Button>\n      </Content>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders outline button\", () => {\n  const tree = renderer\n    .create(\n      <Content>\n        <Button bordered light>\n          <Text>Light</Text>\n        </Button>\n        <Button bordered info>\n          <Text>Info</Text>\n        </Button>\n        <Button bordered primary>\n          <Text>Primary</Text>\n        </Button>\n        <Button bordered success>\n          <Text>Success</Text>\n        </Button>\n        <Button bordered warning>\n          <Text>Warning</Text>\n        </Button>\n        <Button bordered danger>\n          <Text>Danger</Text>\n        </Button>\n        <Button bordered dark>\n          <Text>Dark</Text>\n        </Button>\n      </Content>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders rounded button\", () => {\n  const tree = renderer\n    .create(\n      <Content>\n        <Button rounded light>\n          <Text>Light</Text>\n        </Button>\n        <Button rounded info>\n          <Text>Info</Text>\n        </Button>\n        <Button rounded primary>\n          <Text>Primary</Text>\n        </Button>\n        <Button rounded success>\n          <Text>Success</Text>\n        </Button>\n        <Button rounded warning>\n          <Text>Warning</Text>\n        </Button>\n        <Button rounded danger>\n          <Text>Danger</Text>\n        </Button>\n        <Button rounded dark>\n          <Text>Dark</Text>\n        </Button>\n      </Content>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders block button\", () => {\n  const tree = renderer\n    .create(\n      <Content>\n        <Button block light>\n          <Text>Light</Text>\n        </Button>\n        <Button block info>\n          <Text>Info</Text>\n        </Button>\n        <Button block primary>\n          <Text>Primary</Text>\n        </Button>\n        <Button block success>\n          <Text>Success</Text>\n        </Button>\n        <Button block warning>\n          <Text>Warning</Text>\n        </Button>\n        <Button block danger>\n          <Text>Danger</Text>\n        </Button>\n        <Button block dark>\n          <Text>Dark</Text>\n        </Button>\n      </Content>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders full button\", () => {\n  const tree = renderer\n    .create(\n      <View>\n        <Button full light>\n          <Text>Light</Text>\n        </Button>\n        <Button full info>\n          <Text>Info</Text>\n        </Button>\n        <Button full primary>\n          <Text>Primary</Text>\n        </Button>\n        <Button full success>\n          <Text>Success</Text>\n        </Button>\n        <Button full warning>\n          <Text>Warning</Text>\n        </Button>\n        <Button full danger>\n          <Text>Danger</Text>\n        </Button>\n        <Button full dark>\n          <Text>Dark</Text>\n        </Button>\n      </View>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders custom size button\", () => {\n  const tree = renderer\n    .create(\n      <View>\n        <Button small>\n          <Text>Default Small</Text>\n        </Button>\n        <Button success>\n          <Text>Success Default</Text>\n        </Button>\n\n        <Button large dark>\n          <Text>Dark large</Text>\n        </Button>\n      </View>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders transparent button\", () => {\n  const tree = renderer\n    .create(\n      <Content>\n        <Button transparent light>\n          <Text>Light</Text>\n        </Button>\n        <Button transparent info>\n          <Text>Info</Text>\n        </Button>\n        <Button transparent primary>\n          <Text>Primary</Text>\n        </Button>\n        <Button transparent success>\n          <Text>Success</Text>\n        </Button>\n        <Button transparent warning>\n          <Text>Warning</Text>\n        </Button>\n        <Button transparent danger>\n          <Text>Danger</Text>\n        </Button>\n        <Button transparent dark>\n          <Text>Dark</Text>\n        </Button>\n      </Content>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders icon button\", () => {\n  const tree = renderer\n    .create(\n      <Content>\n        <Button iconLeft light>\n          <Icon active name=\"arrow-back\" />\n          <Text>Back</Text>\n        </Button>\n        <Button light iconRight>\n          <Text>Next</Text>\n          <Icon active name=\"arrow-forward\" />\n        </Button>\n        <Button light>\n          <Icon active name=\"arrow-down\" />\n        </Button>\n        <Button light>\n          <Icon active name=\"arrow-up\" />\n        </Button>\n        <Button iconLeft>\n          <Icon active name=\"home\" />\n          <Text>Home</Text>\n        </Button>\n        <Button iconLeft bordered>\n          <Icon active name=\"briefcase\" />\n          <Text>Work</Text>\n        </Button>\n        <Button iconLeft success>\n          <Icon active name=\"people\" />\n          <Text>People</Text>\n        </Button>\n        <Button iconLeft success bordered>\n          <Icon active name=\"paw\" />\n          <Text>Animals</Text>\n        </Button>\n        <Button iconLeft danger>\n          <Icon active name=\"close\" />\n          <Text>Trash</Text>\n        </Button>\n        <Button danger bordered>\n          <Icon active name=\"trash\" />\n        </Button>\n        <Button danger transparent>\n          <Icon active name=\"trash\" />\n        </Button>\n        <Button iconLeft warning>\n          <Icon active name=\"warning\" />\n          <Text>Dont</Text>\n        </Button>\n        <Button warning bordered>\n          <Icon active name=\"warning\" />\n        </Button>\n        <Button iconLeft info>\n          <Icon name=\"alert\" />\n          <Text>Help</Text>\n        </Button>\n        <Button info>\n          <Icon name=\"alert\" />\n        </Button>\n        <Button iconLeft dark>\n          <Icon active name=\"cog\" />\n          <Text>Settings</Text>\n        </Button>\n        <Button dark transparent>\n          <Icon active name=\"cog\" />\n        </Button>\n        <Button iconLeft transparent>\n          <Icon active name=\"beer\" />\n          <Text>Pub</Text>\n        </Button>\n      </Content>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders disabled button\", () => {\n  const tree = renderer\n    .create(\n      <Content>\n        <Button disabled>\n          <Text>Default</Text>\n        </Button>\n        <Button disabled bordered>\n          <Text>Outline</Text>\n        </Button>\n        <Button disabled rounded>\n          <Text>Rounded</Text>\n        </Button>\n        <Button disabled large>\n          <Text>Custom</Text>\n        </Button>\n        <Button disabled iconRight>\n          <Text>Icon Button</Text>\n          <Icon name=\"home\" />\n        </Button>\n        <Button disabled block>\n          <Text>Block</Text>\n        </Button>\n\n        <Button disabled full>\n          <Text>Full</Text>\n        </Button>\n      </Content>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n"]}