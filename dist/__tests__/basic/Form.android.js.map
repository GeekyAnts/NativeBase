{"version":3,"sources":["../../../__tests__/basic/Form.android.js"],"names":["jest","mock","Platform","require","requireActual","OS","it","tree","renderer","create","toJSON","expect","toMatchSnapshot"],"mappings":"mDAAA,wBACA,4B,2CACA,sD,mEACA,4CACA,4CACA,8CACA,8CACA,4CACA,oD,mFAIAA,KAAKC,IAAL,CAAU,UAAV,CAAsB,UAAM,CAC1B,GAAMC,UAAWC,QAAQC,aAAR,CAAsB,UAAtB,CAAjB,CACAF,SAASG,EAAT,CAAc,SAAd,CACA,MAAOH,SAAP,CACD,CAJD,EAMAI,GAAG,2BAAH,CAAgC,UAAM,CACpC,GAAMC,MAAOC,4BACVC,MADU,CAET,8BAAC,UAAD,kDACE,8BAAC,UAAD,EAAM,eAAN,iDACE,8BAAC,YAAD,6DADF,CAEE,8BAAC,YAAD,kDAFF,CADF,CAKE,8BAAC,UAAD,EAAM,eAAN,CAAiB,SAAjB,iDACE,8BAAC,YAAD,6DADF,CAEE,8BAAC,YAAD,EAAO,oBAAP,iDAFF,CALF,CAFS,EAaVC,MAbU,EAAb,CAcAC,OAAOJ,IAAP,EAAaK,eAAb,GACD,CAhBD,EAkBAN,GAAG,4BAAH,CAAiC,UAAM,CACrC,GAAMC,MAAOC,4BACVC,MADU,CAET,8BAAC,UAAD,kDACE,8BAAC,UAAD,EAAM,gBAAN,iDACE,8BAAC,YAAD,6DADF,CAEE,8BAAC,YAAD,kDAFF,CADF,CAKE,8BAAC,UAAD,EAAM,gBAAN,CAAkB,SAAlB,iDACE,8BAAC,YAAD,6DADF,CAEE,8BAAC,YAAD,EAAO,oBAAP,iDAFF,CALF,CAFS,EAaVC,MAbU,EAAb,CAcAC,OAAOJ,IAAP,EAAaK,eAAb,GACD,CAhBD,EAkBAN,GAAG,8BAAH,CAAmC,UAAM,CACvC,GAAMC,MAAOC,4BACVC,MADU,CAET,8BAAC,UAAD,kDACE,8BAAC,UAAD,EAAM,kBAAN,iDACE,8BAAC,YAAD,6DADF,CAEE,8BAAC,YAAD,kDAFF,CADF,CAKE,8BAAC,UAAD,EAAM,kBAAN,CAAoB,SAApB,iDACE,8BAAC,YAAD,6DADF,CAEE,8BAAC,YAAD,EAAO,oBAAP,iDAFF,CALF,CAFS,EAaVC,MAbU,EAAb,CAcAC,OAAOJ,IAAP,EAAaK,eAAb,GACD,CAhBD,EAkBAN,GAAG,iCAAH,CAAsC,UAAM,CAC1C,GAAMC,MAAOC,4BACVC,MADU,CAET,8BAAC,UAAD,kDACE,8BAAC,UAAD,kDACE,8BAAC,YAAD,EAAO,YAAY,UAAnB,iDADF,CADF,CAIE,8BAAC,UAAD,EAAM,SAAN,iDACE,8BAAC,YAAD,EAAO,YAAY,UAAnB,CAA8B,oBAA9B,iDADF,CAJF,CAFS,EAWVC,MAXU,EAAb,CAYAC,OAAOJ,IAAP,EAAaK,eAAb,GACD,CAdD,EAgBAN,GAAG,6BAAH,CAAkC,UAAM,CACtC,GAAMC,MAAOC,4BACVC,MADU,CAET,8BAAC,UAAD,kDACE,8BAAC,UAAD,EAAM,iBAAN,iDACE,8BAAC,YAAD,6DADF,CAEE,8BAAC,YAAD,kDAFF,CADF,CAKE,8BAAC,UAAD,EAAM,iBAAN,CAAmB,SAAnB,iDACE,8BAAC,YAAD,6DADF,CAEE,8BAAC,YAAD,EAAO,oBAAP,iDAFF,CALF,CAFS,EAaVC,MAbU,EAAb,CAcAC,OAAOJ,IAAP,EAAaK,eAAb,GACD,CAhBD,EAkBAN,GAAG,uBAAH,CAA4B,UAAM,CAChC,GAAMC,MAAOC,4BACVC,MADU,CAET,8BAAC,UAAD,mDACE,8BAAC,UAAD,EAAM,YAAN,kDACE,8BAAC,YAAD,EAAO,YAAY,iBAAnB,kDADF,CADF,CAFS,EAQVC,MARU,EAAb,CASAC,OAAOJ,IAAP,EAAaK,eAAb,GACD,CAXD,EAaAN,GAAG,yBAAH,CAA8B,UAAM,CAClC,GAAMC,MAAOC,4BACVC,MADU,CAET,8BAAC,UAAD,mDACE,8BAAC,UAAD,mDACE,8BAAC,YAAD,EAAO,YAAY,mBAAnB,kDADF,CADF,CAFS,EAQVC,MARU,EAAb,CASAC,OAAOJ,IAAP,EAAaK,eAAb,GACD,CAXD,EAaAN,GAAG,uBAAH,CAA4B,UAAM,CAChC,GAAMC,MAAOC,4BACVC,MADU,CAET,8BAAC,UAAD,mDACE,8BAAC,UAAD,EAAM,YAAN,kDACE,8BAAC,YAAD,EAAO,YAAY,iBAAnB,kDADF,CADF,CAFS,EAQVC,MARU,EAAb,CASAC,OAAOJ,IAAP,EAAaK,eAAb,GACD,CAXD,EAaAN,GAAG,oBAAH,CAAyB,UAAM,CAC7B,GAAMC,MAAOC,4BACVC,MADU,CAET,8BAAC,UAAD,mDACE,8BAAC,UAAD,mDACE,8BAAC,UAAD,EAAM,WAAN,CAAa,KAAK,MAAlB,kDADF,CAEE,8BAAC,YAAD,EAAO,YAAY,cAAnB,kDAFF,CADF,CAKE,8BAAC,UAAD,mDACE,8BAAC,YAAD,EAAO,YAAY,2BAAnB,kDADF,CAEE,8BAAC,UAAD,EAAM,WAAN,CAAa,KAAK,MAAlB,kDAFF,CALF,CAFS,EAaVC,MAbU,EAAb,CAcAC,OAAOJ,IAAP,EAAaK,eAAb,GACD,CAhBD,EAkBAN,GAAG,uBAAH,CAA4B,UAAM,CAChC,GAAMC,MAAOC,4BACVC,MADU,CAET,8BAAC,UAAD,mDACE,8BAAC,UAAD,EAAM,YAAN,kDACE,8BAAC,YAAD,EAAO,YAAY,4BAAnB,kDADF,CAEE,8BAAC,UAAD,EAAM,KAAK,sBAAX,kDAFF,CADF,CAFS,EASVC,MATU,EAAb,CAUAC,OAAOJ,IAAP,EAAaK,eAAb,GACD,CAZD,EAcAN,GAAG,qBAAH,CAA0B,UAAM,CAC9B,GAAMC,MAAOC,4BACVC,MADU,CAET,8BAAC,UAAD,mDACE,8BAAC,UAAD,EAAM,UAAN,kDACE,8BAAC,YAAD,EAAO,YAAY,0BAAnB,kDADF,CAEE,8BAAC,UAAD,EAAM,KAAK,kBAAX,kDAFF,CADF,CAFS,EASVC,MATU,EAAb,CAUAC,OAAOJ,IAAP,EAAaK,eAAb,GACD,CAZD,EAcAN,GAAG,wBAAH,CAA6B,UAAM,CACjC,GAAMC,MAAOC,4BACVC,MADU,CAET,8BAAC,UAAD,mDACE,8BAAC,UAAD,EAAM,aAAN,kDACE,8BAAC,YAAD,EAAO,aAAP,CAAgB,YAAY,kBAA5B,kDADF,CAEE,8BAAC,UAAD,EAAM,KAAK,wBAAX,kDAFF,CADF,CAFS,EASVC,MATU,EAAb,CAUAC,OAAOJ,IAAP,EAAaK,eAAb,GACD,CAZD,EAcAN,GAAG,wBAAH,CAA6B,UAAM,CACjC,GAAMC,MAAOC,4BACVC,MADU,CAET,8BAAC,UAAD,mDACE,8BAAC,kBAAD,EAAU,QAAS,CAAnB,CAAsB,aAAtB,CAA+B,YAAY,UAA3C,kDADF,CAFS,EAMVC,MANU,EAAb,CAOAC,OAAOJ,IAAP,EAAaK,eAAb,GACD,CATD","file":"Form.android.js","sourcesContent":["import \"react-native\";\nimport React from \"react\";\nimport renderer from \"react-test-renderer\";\nimport { Form } from \"./../../src/basic/Form\";\nimport { Item } from \"./../../src/basic/Item\";\nimport { Label } from \"./../../src/basic/Label\";\nimport { Input } from \"./../../src/basic/Input\";\nimport { Icon } from \"./../../src/basic/Icon\";\nimport { Textarea } from \"./../../src/basic/Textarea\";\n\n// Note: test renderer must be required after react-native.\n\njest.mock(\"Platform\", () => {\n  const Platform = require.requireActual(\"Platform\");\n  Platform.OS = \"android\";\n  return Platform;\n});\n\nit(\"renders Fixed Label Input\", () => {\n  const tree = renderer\n    .create(\n      <Form>\n        <Item fixedLabel>\n          <Label>Username</Label>\n          <Input />\n        </Item>\n        <Item fixedLabel last>\n          <Label>Password</Label>\n          <Input secureTextEntry />\n        </Item>\n      </Form>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Inline Label Input\", () => {\n  const tree = renderer\n    .create(\n      <Form>\n        <Item inlineLabel>\n          <Label>Username</Label>\n          <Input />\n        </Item>\n        <Item inlineLabel last>\n          <Label>Password</Label>\n          <Input secureTextEntry />\n        </Item>\n      </Form>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Floating Label Input\", () => {\n  const tree = renderer\n    .create(\n      <Form>\n        <Item floatingLabel>\n          <Label>Username</Label>\n          <Input />\n        </Item>\n        <Item floatingLabel last>\n          <Label>Password</Label>\n          <Input secureTextEntry />\n        </Item>\n      </Form>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Placeholder Label Input\", () => {\n  const tree = renderer\n    .create(\n      <Form>\n        <Item>\n          <Input placeholder=\"Username\" />\n        </Item>\n        <Item last>\n          <Input placeholder=\"Password\" secureTextEntry />\n        </Item>\n      </Form>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Stacked Label Input\", () => {\n  const tree = renderer\n    .create(\n      <Form>\n        <Item stackedLabel>\n          <Label>Username</Label>\n          <Input />\n        </Item>\n        <Item stackedLabel last>\n          <Label>Password</Label>\n          <Input secureTextEntry />\n        </Item>\n      </Form>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Regular Input\", () => {\n  const tree = renderer\n    .create(\n      <Form>\n        <Item regular>\n          <Input placeholder=\"Regular Textbox\" />\n        </Item>\n      </Form>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Underline Input\", () => {\n  const tree = renderer\n    .create(\n      <Form>\n        <Item>\n          <Input placeholder=\"Underline Textbox\" />\n        </Item>\n      </Form>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Rounded Input\", () => {\n  const tree = renderer\n    .create(\n      <Form>\n        <Item rounded>\n          <Input placeholder=\"Rounded Textbox\" />\n        </Item>\n      </Form>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Icon Input\", () => {\n  const tree = renderer\n    .create(\n      <Form>\n        <Item>\n          <Icon active name=\"home\" />\n          <Input placeholder=\"Icon Textbox\" />\n        </Item>\n        <Item>\n          <Input placeholder=\"Icon Alignment in Textbox\" />\n          <Icon active name=\"swap\" />\n        </Item>\n      </Form>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Success Input\", () => {\n  const tree = renderer\n    .create(\n      <Form>\n        <Item success>\n          <Input placeholder=\"Textbox with Success Input\" />\n          <Icon name=\"ios-checkmark-circle\" />\n        </Item>\n      </Form>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Error Input\", () => {\n  const tree = renderer\n    .create(\n      <Form>\n        <Item error>\n          <Input placeholder=\"Textbox with Error Input\" />\n          <Icon name=\"ios-close-circle\" />\n        </Item>\n      </Form>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Disabled Input\", () => {\n  const tree = renderer\n    .create(\n      <Form>\n        <Item disabled>\n          <Input disabled placeholder=\"Disabled Textbox\" />\n          <Icon name=\"ios-information-circle\" />\n        </Item>\n      </Form>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\nit(\"renders Textarea Input\", () => {\n  const tree = renderer\n    .create(\n      <Form>\n        <Textarea rowSpan={5} bordered placeholder=\"Textarea\" />\n      </Form>\n    )\n    .toJSON();\n  expect(tree).toMatchSnapshot();\n});\n"]}